

----SNAPSHOT----(24 June 2021 19:51:34) Interfaz.image priorSource: 17895769!

----End fileIn of /Users/juan.ferrino/CuisUniversity/Packages/System/Collections-CompactArrays.pck.st----!

----End fileIn of /Users/juan.ferrino/CuisUniversity/Packages/Features/Compression.pck.st----!

----End fileIn of /Users/juan.ferrino/CuisUniversity/Packages/Features/Sound.pck.st----!

----End fileIn of /Users/juan.ferrino/CuisUniversity/Packages/Features/Cryptography-DigitalSignatures.pck.st----!

----End fileIn of /Users/juan.ferrino/CuisUniversity/Packages/Features/Identities-UUID.pck.st----!

----End fileIn of /Users/juan.ferrino/CuisUniversity/Packages/System/Network-Kernel.pck.st----!

----End fileIn of /Users/juan.ferrino/ingenieria1/2021-1c/20-TusLibros/Iteracion 4/WebClient.pck.st----!

----End fileIn of /Users/juan.ferrino/ingenieria1/2021-1c/20-TusLibros/Iteracion 4/StringsServicesServer.st----!

----End fileIn of /Users/juan.ferrino/ingenieria1/2021-1c/20-TusLibros/Iteracion3/TusLibros-80.st----!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'JPF 6/24/2021 21:04:52'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'JPF 6/24/2021 21:04:52'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'JPF 6/24/2021 21:04:52'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'JPF 6/24/2021 21:04:52'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'JPF 6/24/2021 21:04:52'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'JPF 6/24/2021 21:04:52'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'JPF 6/24/2021 21:04:52'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'JPF 6/24/2021 21:04:52'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'JPF 6/24/2021 21:04:52'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'JPF 6/24/2021 21:04:52'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'JPF 6/24/2021 21:04:52'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'JPF 6/24/2021 21:04:52'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'JPF 6/24/2021 21:04:52'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'JPF 6/24/2021 21:04:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'JPF 6/24/2021 21:04:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'JPF 6/24/2021 21:04:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'JPF 6/24/2021 21:04:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'JPF 6/24/2021 21:04:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'JPF 6/24/2021 21:04:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'JPF 6/24/2021 21:04:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07ListCartOfAnEmptyCartReturnsAnEmptyBag stamp: 'JPF 6/24/2021 21:04:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'JPF 6/24/2021 21:04:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'JPF 6/24/2021 21:04:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CanCheckoutACart stamp: 'JPF 6/24/2021 21:04:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'JPF 6/24/2021 21:04:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'JPF 6/24/2021 21:04:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'JPF 6/24/2021 21:04:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'JPF 6/24/2021 21:04:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'JPF 6/24/2021 21:04:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'JPF 6/24/2021 21:04:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'JPF 6/24/2021 21:04:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'JPF 6/24/2021 21:04:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'JPF 6/24/2021 21:04:52'!
PASSED!

----QUIT----(24 June 2021 21:13:02) Interfaz.image priorSource: 17898719!

----STARTUP---- (24 June 2021 21:13:21) as /Users/juan.ferrino/CuisUniversity/Interfaz.image!


Object subclass: #TusLibrosRestInterface
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Server'!

!classDefinition: #TusLibrosRestInterface category: 'TusLibros-Server' stamp: 'JPF 6/24/2021 21:14:58'!
Object subclass: #TusLibrosRestInterface
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Server'!
!TusLibrosRestInterface class methodsFor: 'no messages' stamp: 'JPF 6/24/2021 21:15:53'!
listeningOn: aPortNumber

	^self new initializeWith: aPortNumber.! !
!TusLibrosRestInterface methodsFor: 'initialization' stamp: 'JPF 6/24/2021 21:16:50'!
initializeWith: aPortNumber! !

!classDefinition: #TusLibrosRestInterface category: 'TusLibros-Server' stamp: 'JPF 6/24/2021 21:18:35'!
Object subclass: #TusLibrosRestInterface
	instanceVariableNames: 'port'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Server'!

!classDefinition: #TusLibrosRestInterface category: 'TusLibros-Server' stamp: 'JPF 6/24/2021 21:18:36'!
Object subclass: #TusLibrosRestInterface
	instanceVariableNames: 'port webServer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Server'!
!TusLibrosRestInterface methodsFor: 'initialization' stamp: 'JPF 6/24/2021 21:18:31' prior: 50929624!
initializeWith: aPortNumber
	
	port:= aPortNumber.
	
	webServer := WebServer new listenOn: self port.
	
	webServer addService: '/hello' action:[:request |	
		
		request send200Response: 'hello'].! !
!TusLibrosRestInterface methodsFor: 'accessing' stamp: 'JPF 6/24/2021 21:19:05'!
port
	
	^ port! !

TusLibrosRestInterface listeningOn: 8080!
!TusLibrosRestInterface methodsFor: 'initialization' stamp: 'JPF 6/24/2021 21:20:49' prior: 50929645!
initializeWith: aPortNumber
	
	port:= aPortNumber.
	
	webServer := WebServer new listenOn: self port.
	
	webServer addService: '/chau' action:[:request |	
		
		request send200Response: 'hello'].! !
!TusLibrosRestInterface methodsFor: 'nil' stamp: 'JPF 6/24/2021 21:21:52'!
destroy! !
!TusLibrosRestInterface methodsFor: 'as yet unclassified' stamp: 'JPF 6/24/2021 21:22:18' prior: 50929669!
destroy

	webServer ifNotNil:[webServer destroy]! !

----QUIT----(24 June 2021 21:23:28) Interfaz.image priorSource: 19134393!

----STARTUP---- (24 June 2021 21:23:39) as /Users/juan.ferrino/CuisUniversity/Interfaz.image!


server := TusLibrosRestInterface listeningOn: 8080.!

server destroy.!
!TusLibrosRestInterface methodsFor: 'initialization' stamp: 'JPF 6/24/2021 21:25:09' prior: 50929660!
initializeWith: aPortNumber
	
	port:= aPortNumber.
	
	webServer := WebServer new listenOn: self port.
	
	webServer addService: '/hello' action:[:request |	
		
		request send200Response: 'chau'].! !
!TusLibrosRestInterface methodsFor: 'initialization' stamp: 'JPF 6/24/2021 21:25:32' prior: 50929686!
initializeWith: aPortNumber
	
	port:= aPortNumber.
	
	webServer := WebServer new listenOn: self port.
	
	webServer addService: '/chau' action:[:request |	
		
		request send200Response: 'chau'].! !

server := TusLibrosRestInterface listeningOn: 8080.!
!TusLibrosRestInterface methodsFor: 'initialization' stamp: 'JPF 6/24/2021 21:27:46' prior: 50929696!
initializeWith: aPortNumber
	
	port:= aPortNumber.
	
	webServer := WebServer new listenOn: self port.
	
	webServer addService: '/hello' action:[:request |	
		
		request send200Response: 'hello'].! !

server!

server!

server := TusLibrosRestInterface listeningOn: 8080.!

server destroy.!

server destroy.!

!classDefinition: #TusLibrosRestInterface category: 'TusLibros-Server' stamp: 'JPF 6/24/2021 21:36:56'!
Object subclass: #TusLibrosRestInterface
	instanceVariableNames: 'port webServer tusLibrosSystemFacade'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Server'!
!TusLibrosRestInterface methodsFor: 'initialization' stamp: 'JPF 6/24/2021 21:37:29' prior: 50929708!
initializeWith: aPortNumber

	tusLibrosSystemFacade := TusLibrosSystemFacade
		authenticatingWith: ''
		acceptingItemsOf: ''
		registeringOn: ''
		debitingThrought: ''
		measuringTimeWith: ''.
	
	port:= aPortNumber.
	
	webServer := WebServer new listenOn: self port.
	
	webServer addService: '/hello' action:[:request |	
		
		request send200Response: 'hello'].! !

Clock subclass: #SystemClock
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Model'!

!classDefinition: #SystemClock category: 'TusLibros-Model' stamp: 'JPF 6/24/2021 21:41:00'!
Clock subclass: #SystemClock
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Model'!
!SystemClock methodsFor: 'time' stamp: 'JPF 6/24/2021 21:41:18' overrides: 50928172!
now! !
!SystemClock methodsFor: 'time' stamp: 'JPF 6/24/2021 21:41:21' overrides: 50928176!
today! !
!SystemClock methodsFor: 'time' stamp: 'JPF 6/24/2021 21:41:44' prior: 50929756 overrides: 50928172!
now! !
!SystemClock methodsFor: 'time' stamp: 'JPF 6/24/2021 21:44:12' prior: 50929763 overrides: 50928172!
now

	^ DateAndTime now! !
!SystemClock methodsFor: 'time' stamp: 'JPF 6/24/2021 21:44:25' prior: 50929759 overrides: 50928176!
today
	
	^ Date today! !

DateAndTime  now.!

Date today.!

DateAndTime now date.!
!TusLibrosRestInterface methodsFor: 'initialization' stamp: 'JPF 6/24/2021 21:46:15' prior: 50929730!
initializeWith: aPortNumber

	tusLibrosSystemFacade := TusLibrosSystemFacade
		authenticatingWith: ''
		acceptingItemsOf: ''
		registeringOn: ''
		debitingThrought: ''
		measuringTimeWith: SystemClock new.
	
	port:= aPortNumber.
	
	webServer := WebServer new listenOn: self port.
	
	webServer addService: '/hello' action:[:request |	
		
		request send200Response: 'hello'].! !

MerchantProcessor subclass: #MerchantProcessorStub
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Model'!

!classDefinition: #MerchantProcessorStub category: 'TusLibros-Model' stamp: 'JPF 6/24/2021 21:47:31'!
MerchantProcessor subclass: #MerchantProcessorStub
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Model'!
!MerchantProcessorStub methodsFor: 'no messages' stamp: 'JPF 6/24/2021 21:47:47' overrides: 50928279!
debit: anAmount from: aCreditCard! !
!TusLibrosRestInterface methodsFor: 'initialization' stamp: 'JPF 6/24/2021 21:48:31' prior: 50929777!
initializeWith: aPortNumber

	tusLibrosSystemFacade := TusLibrosSystemFacade
		authenticatingWith: ''
		acceptingItemsOf: ''
		registeringOn: ''
		debitingThrought: MerchantProcessorStub new
		measuringTimeWith: SystemClock new.
	
	port:= aPortNumber.
	
	webServer := WebServer new listenOn: self port.
	
	webServer addService: '/hello' action:[:request |	
		
		request send200Response: 'hello'].! !
!TusLibrosRestInterface methodsFor: 'initialization' stamp: 'JPF 6/24/2021 21:53:45' prior: 50929810!
initializeWith: aPortNumber

	tusLibrosSystemFacade := TusLibrosSystemFacade
		authenticatingWith: ''
		acceptingItemsOf: ''
		registeringOn: OrderedCollection new
		debitingThrought: MerchantProcessorStub new
		measuringTimeWith: SystemClock new.
	
	port:= aPortNumber.
	
	webServer := WebServer new listenOn: self port.
	
	webServer addService: '/hello' action:[:request |	
		
		request send200Response: 'hello'].! !

Object subclass: #TusLibrosSystemFactory
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Model'!

!classDefinition: #TusLibrosSystemFactory category: 'TusLibros-Model' stamp: 'JPF 6/24/2021 21:56:09'!
Object subclass: #TusLibrosSystemFactory
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Model'!
!TusLibrosSystemFactory methodsFor: 'factory protocol' stamp: 'JPF 6/24/2021 21:57:44'!
createClock

	self subclassResponsibility! !
!TusLibrosSystemFactory methodsFor: 'factory protocol' stamp: 'JPF 6/24/2021 21:57:59'!
createSalesBook

	self subclassResponsibility! !
!TusLibrosSystemFactory methodsFor: 'factory protocol' stamp: 'JPF 6/24/2021 21:58:11'!
createMerchantProcessor

	self subclassResponsibility! !
!TusLibrosSystemFactory methodsFor: 'factory protocol' stamp: 'JPF 6/24/2021 21:58:23'!
createCatalog

	self subclassResponsibility! !

----QUIT----(24 June 2021 22:17:27) Interfaz.image priorSource: 19136851!

----STARTUP---- (26 June 2021 10:01:27) as /Users/juan.ferrino/CuisUniversity/Interfaz.image!

!TusLibrosSystemFactory methodsFor: 'factory protocol' stamp: 'JPF 6/26/2021 10:06:33'!
createFacade
	
	! !
!TusLibrosSystemFactory methodsFor: 'factory protocol' stamp: 'JPF 6/26/2021 10:07:14' prior: 50929880!
createFacade
	
	^ TusLibrosSystemFacade
		authenticatingWith: ''
		acceptingItemsOf: ''
		registeringOn: OrderedCollection new
		debitingThrought: MerchantProcessorStub new
		measuringTimeWith: SystemClock new.
	! !

TusLibrosSystemFactory subclass: #TusLibrosDefaultFactory
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Model'!

!classDefinition: #TusLibrosDefaultFactory category: 'TusLibros-Model' stamp: 'JPF 6/26/2021 10:08:10'!
TusLibrosSystemFactory subclass: #TusLibrosDefaultFactory
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Model'!
!TusLibrosDefaultFactory methodsFor: 'factory protocol' stamp: 'JPF 6/26/2021 10:08:23' overrides: 50929870!
createCatalog! !
!TusLibrosDefaultFactory methodsFor: 'factory protocol' stamp: 'JPF 6/26/2021 10:08:31' overrides: 50929860!
createSalesBook! !
!TusLibrosDefaultFactory methodsFor: 'factory protocol' stamp: 'JPF 6/26/2021 10:08:40' overrides: 50929865!
createMerchantProcessor! !
!TusLibrosDefaultFactory methodsFor: 'factory protocol' stamp: 'JPF 6/26/2021 10:08:58' prior: 50929916 overrides: 50929865!
createMerchantProcessor

	^ MerchantProcessorStub new! !
!TusLibrosDefaultFactory methodsFor: 'factory protocol' stamp: 'JPF 6/26/2021 10:09:12' overrides: 50929855!
createClock

	^ MerchantProcessorStub new! !
!TusLibrosDefaultFactory methodsFor: 'factory protocol' stamp: 'JPF 6/26/2021 10:09:19' prior: 50929927 overrides: 50929855!
createClock

	^ SystemClock new! !
!TusLibrosDefaultFactory methodsFor: 'factory protocol' stamp: 'JPF 6/26/2021 10:09:40' prior: 50929912 overrides: 50929860!
createSalesBook
	
	^ OrderedCollection new! !
!TusLibrosSystemFactory methodsFor: 'factory protocol' stamp: 'JPF 6/26/2021 10:12:27'!
createValidUserAndPasswords
	
	^ self subclassResponsibility ! !
!TusLibrosDefaultFactory methodsFor: 'factory protocol' stamp: 'JPF 6/26/2021 10:13:41' overrides: 50929943!
createValidUserAndPasswords

	^ Dictionary new
		at: 'Juan Ferrino' put: '1234';
		at: 'Nora Trinchero' put: '1234';
		yourself! !
!TusLibrosSystemFactory methodsFor: 'factory protocol' stamp: 'JPF 6/26/2021 10:15:23' prior: 50929884!
createFacade
	
	^ TusLibrosSystemFacade
		authenticatingWith: self createValidUserAndPasswords
		acceptingItemsOf: ''
		registeringOn: OrderedCollection new
		debitingThrought: MerchantProcessorStub new
		measuringTimeWith: SystemClock new.
	! !
!TusLibrosSystemFactory methodsFor: 'factory protocol' stamp: 'JPF 6/26/2021 10:16:05' prior: 50929957!
createFacade
	
	^ TusLibrosSystemFacade
		authenticatingWith: self createValidUserAndPasswords
		acceptingItemsOf: self createCatalog 
		registeringOn: self createSalesBook 
		debitingThrought: self createMerchantProcessor 
		measuringTimeWith: self createClock
	! !
!TusLibrosDefaultFactory methodsFor: 'factory protocol' stamp: 'JPF 6/26/2021 10:18:25' prior: 50929908 overrides: 50929870!
createCatalog

	^ Dictionary new
		at: '' put: 10;
		at: '' put: 20;
		at: '' put: 30;
		at: '' put: 20;
		at: '' put: 25;
		yourself! !
!TusLibrosDefaultFactory methodsFor: 'factory protocol' stamp: 'JPF 6/26/2021 10:21:28' prior: 50929981 overrides: 50929870!
createCatalog

	^ Dictionary new
		at: 'Smalltalk, Objects and Design' put: 10;
		at: 'Design Patterns' put: 20;
		at: 'Object Thinking' put: 30;
		at: 'History of Programming Languages' put: 20;
		at: 'The Innovators' put: 25;
		yourself! !
!TusLibrosRestInterface methodsFor: 'initialization' stamp: 'JPF 6/26/2021 10:22:42' prior: 50929826!
initializeWith: aPortNumber

	tusLibrosSystemFacade := TusLibrosDefaultFactory new createFacade.
	
	port:= aPortNumber.
	
	webServer := WebServer new listenOn: self port.
	
	webServer addService: '/hello' action:[:request |	
		
		request send200Response: 'hello'].! !
!TusLibrosRestInterface methodsFor: 'initialization' stamp: 'JPF 6/26/2021 10:24:02' prior: 50930001!
initializeWith: aPortNumber

	tusLibrosSystemFacade := TusLibrosDefaultFactory new createFacade.
	
	port:= aPortNumber.
	
	webServer := WebServer new listenOn: self port.
	
	webServer addService: '/createCart' action:[:request |	
		
		request send200Response: 'hello'].! !
!TusLibrosRestInterface methodsFor: 'initialization' stamp: 'JPF 6/26/2021 10:25:27' prior: 50930013!
initializeWith: aPortNumber

	tusLibrosSystemFacade := TusLibrosDefaultFactory new createFacade.
	
	port:= aPortNumber.
	
	webServer := WebServer new listenOn: self port.
	
	webServer addService: '/createCart' action:[:request | | password user |	
		
		tusLibrosSystemFacade createCartFor: user authenticatedWith: password.
		
		request send200Response: 'hello'].! !
!TusLibrosRestInterface methodsFor: 'initialization' stamp: 'JPF 6/26/2021 10:27:49' prior: 50930025!
initializeWith: aPortNumber

	tusLibrosSystemFacade := TusLibrosDefaultFactory new createFacade.
	
	port:= aPortNumber.
	
	webServer := WebServer new listenOn: self port.
	
	webServer addService: '/createCart' action:[:request | | password clientId |	
		
		clientId := request fields at: 'clientId'.
		password := request fields at: 'password'.
		
		tusLibrosSystemFacade createCartFor: clientId authenticatedWith: password.
		
		request send200Response: 'hello'].! !
!TusLibrosRestInterface methodsFor: 'initialization' stamp: 'JPF 6/26/2021 10:28:33' prior: 50930040!
initializeWith: aPortNumber

	tusLibrosSystemFacade := TusLibrosDefaultFactory new createFacade.
	
	port:= aPortNumber.
	
	webServer := WebServer new listenOn: self port.
	
	webServer addService: '/createCart' action:[:request | | password clientId cartId |	
		
		clientId := request fields at: 'clientId'.
		password := request fields at: 'password'.
		
		cartId := tusLibrosSystemFacade createCartFor: clientId authenticatedWith: password.
		
		request send200Response: cartId].! !

server := TusLibrosRestInterface listeningOn: 8080.!
!TusLibrosRestInterface methodsFor: 'initialization' stamp: 'JPF 6/26/2021 10:35:16' prior: 50930058!
initializeWith: aPortNumber

	tusLibrosSystemFacade := TusLibrosDefaultFactory new createFacade.
	
	port:= aPortNumber.
	
	webServer := WebServer new listenOn: self port.
	
	webServer addService: '/createCart' action:[:request | | password clientId cartId |	
		self halt.
		clientId := request fields at: 'clientId'.
		password := request fields at: 'password'.
		
		cartId := tusLibrosSystemFacade createCartFor: clientId authenticatedWith: password.
		
		request send200Response: cartId].! !

server destroy.!

server := TusLibrosRestInterface listeningOn: 8080.!
!TusLibrosRestInterface methodsFor: 'initialization' stamp: 'JPF 6/26/2021 10:43:59' prior: 50930078!
initializeWith: aPortNumber

	tusLibrosSystemFacade := TusLibrosDefaultFactory new createFacade.
	
	port:= aPortNumber.
	
	webServer := WebServer new listenOn: self port.
	
	webServer addService: '/createCart' action:[:request | | password clientId cartId |	
		self halt.
		clientId := request fields at: 'clientId'.
		password := request fields at: 'password'.
		
		cartId := tusLibrosSystemFacade createCartFor: clientId authenticatedWith: password.
		
		request send200Response: cartId asString].! !
!TusLibrosRestInterface methodsFor: 'initialization' stamp: 'JPF 6/26/2021 10:44:05' prior: 50930099!
initializeWith: aPortNumber

	tusLibrosSystemFacade := TusLibrosDefaultFactory new createFacade.
	
	port:= aPortNumber.
	
	webServer := WebServer new listenOn: self port.
	
	webServer addService: '/createCart' action:[:request | | password clientId cartId |	
		
		clientId := request fields at: 'clientId'.
		password := request fields at: 'password'.
		
		cartId := tusLibrosSystemFacade createCartFor: clientId authenticatedWith: password.
		
		request send200Response: cartId asString].! !

server destroy.!

server := TusLibrosRestInterface listeningOn: 8080.!
!TusLibrosRestInterface methodsFor: 'initialization' stamp: 'JPF 6/26/2021 10:48:45' prior: 50930118!
initializeWith: aPortNumber

	tusLibrosSystemFacade := TusLibrosDefaultFactory new createFacade.
	
	port:= aPortNumber.
	
	webServer := WebServer new listenOn: self port.
	
	webServer addService: '/createCart' action:[:request | | password clientId cartId |	
		
		[clientId := request fields at: 'clientId'.
		password := request fields at: 'password'.
		cartId := tusLibrosSystemFacade createCartFor: clientId authenticatedWith: password.
		request send200Response: cartId asString]
		on: Error
		do: [ :anError |
			request send400Response: (anError messageText) ]
	].! !

server destroy.!

server := TusLibrosRestInterface listeningOn: 8080.!
!TusLibrosRestInterface methodsFor: 'initialization' stamp: 'JPF 6/26/2021 10:50:50' prior: 50930139!
initializeWith: aPortNumber

	tusLibrosSystemFacade := TusLibrosDefaultFactory new createFacade.
	
	port:= aPortNumber.
	
	webServer := WebServer new listenOn: self port.
	
	webServer addService: '/createCart' action:[:request | | password clientId cartId |	
		
		[clientId := request fields at: 'clientId'.
		password := request fields at: 'password'.
		cartId := tusLibrosSystemFacade createCartFor: clientId authenticatedWith: password.
		request send200Response: cartId asString]
		on: Error
		do: [ :anError |
			request send400Response: (anError messageText) ]].! !
!TusLibrosRestInterface methodsFor: 'initialization' stamp: 'JPF 6/26/2021 10:52:01' prior: 50930163!
initializeWith: aPortNumber

	tusLibrosSystemFacade := TusLibrosDefaultFactory new createFacade.
	
	port:= aPortNumber.
	
	webServer := WebServer new listenOn: self port.
	
	webServer addService: '/createCart' action:[:request | | password clientId cartId |	
		
		[clientId := request fields at: 'clientId'.
		password := request fields at: 'password'.
		cartId := tusLibrosSystemFacade createCartFor: clientId authenticatedWith: password.
		request send200Response: cartId asString]
		on: Error
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	webServer addService: '/addToCart' action:[:request | | book clientId cartId |	
		
		[clientId := request fields at: 'clientId'.
		book := request fields at: 'password'.
		cartId := tusLibrosSystemFacade createCartFor: clientId authenticatedWith: book.
		request send200Response: cartId asString]
		on: Error
		do: [ :anError |
			request send400Response: (anError messageText) ]].! !
!TusLibrosRestInterface methodsFor: 'initialization' stamp: 'JPF 6/26/2021 10:53:30' prior: 50930185!
initializeWith: aPortNumber

	tusLibrosSystemFacade := TusLibrosDefaultFactory new createFacade.
	
	port:= aPortNumber.
	
	webServer := WebServer new listenOn: self port.
	
	webServer addService: '/createCart' action:[:request | | password clientId cartId |	
		
		[clientId := request fields at: 'clientId'.
		password := request fields at: 'password'.
		cartId := tusLibrosSystemFacade createCartFor: clientId authenticatedWith: password.
		request send200Response: cartId asString]
		on: Error
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	webServer addService: '/addToCart' action:[:request | | book quantity cartId |	
		
		[cartId := request fields at: 'cartId'.
		book := request fields at: 'book'.
		quantity := request fields at: 'quantity'.
		
		
		request send200Response: cartId asString]
		on: Error
		do: [ :anError |
			request send400Response: (anError messageText) ]].! !
!TusLibrosRestInterface methodsFor: 'initialization' stamp: 'JPF 6/26/2021 10:54:28' prior: 50930219!
initializeWith: aPortNumber

	tusLibrosSystemFacade := TusLibrosDefaultFactory new createFacade.
	
	port:= aPortNumber.
	
	webServer := WebServer new listenOn: self port.
	
	webServer addService: '/createCart' action:[:request | | password clientId cartId |	
		
		[clientId := request fields at: 'clientId'.
		password := request fields at: 'password'.
		
		cartId := tusLibrosSystemFacade createCartFor: clientId authenticatedWith: password.
		
		request send200Response: cartId asString]
		on: Error
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	webServer addService: '/addToCart' action:[:request | | book quantity cartId |	
		
		[cartId := request fields at: 'cartId'.
		book := request fields at: 'book'.
		quantity := request fields at: 'quantity'.
		
		
		request send200Response: cartId asString]
		on: Error
		do: [ :anError |
			request send400Response: (anError messageText) ]].! !
!TusLibrosRestInterface methodsFor: 'initialization' stamp: 'JPF 6/26/2021 10:56:20' prior: 50930251!
initializeWith: aPortNumber

	tusLibrosSystemFacade := TusLibrosDefaultFactory new createFacade.
	
	port:= aPortNumber.
	
	webServer := WebServer new listenOn: self port.
	
	webServer addService: '/createCart' action:[:request | | password clientId cartId |	
		
		[clientId := request fields at: 'clientId'.
		password := request fields at: 'password'.
		
		cartId := tusLibrosSystemFacade createCartFor: clientId authenticatedWith: password.
		
		request send200Response: cartId asString]
		on: Error
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	webServer addService: '/addToCart' action:[:request | | book quantity cartId |	
		
		[cartId := request fields at: 'cartId'.
		book := request fields at: 'book'.
		quantity := request fields at: 'quantity'.
		
		tusLibrosSystemFacade add: quantity asNumber of: book toCartIdentifiedAs: cartId asNumber.
		
		request send200Response: cartId asString]
		on: Error
		do: [ :anError |
			request send400Response: (anError messageText) ]].! !
!TusLibrosRestInterface methodsFor: 'initialization' stamp: 'JPF 6/26/2021 10:56:32' prior: 50930284!
initializeWith: aPortNumber

	tusLibrosSystemFacade := TusLibrosDefaultFactory new createFacade.
	
	port:= aPortNumber.
	
	webServer := WebServer new listenOn: self port.
	
	webServer addService: '/createCart' action:[:request | | password clientId cartId |	
		
		[clientId := request fields at: 'clientId'.
		password := request fields at: 'password'.
		
		cartId := tusLibrosSystemFacade createCartFor: clientId authenticatedWith: password.
		
		request send200Response: cartId asString]
		on: Error
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	webServer addService: '/addToCart' action:[:request | | book quantity cartId |	
		
		[cartId := request fields at: 'cartId'.
		book := request fields at: 'book'.
		quantity := request fields at: 'quantity'.
		
		tusLibrosSystemFacade add: quantity asNumber of: book toCartIdentifiedAs: cartId asNumber.
		
		request send200Response: 'OK']
		on: Error
		do: [ :anError |
			request send400Response: (anError messageText) ]].! !
!TusLibrosRestInterface methodsFor: 'initialization' stamp: 'JPF 6/26/2021 10:56:55' prior: 50930319!
initializeWith: aPortNumber

	tusLibrosSystemFacade := TusLibrosDefaultFactory new createFacade.
	
	port:= aPortNumber.
	
	webServer := WebServer new listenOn: self port.
	
	webServer addService: '/createCart' action:[:request | | password clientId cartId |	
		
		[clientId := request fields at: 'clientId'.
		password := request fields at: 'password'.
		
		cartId := tusLibrosSystemFacade createCartFor: clientId authenticatedWith: password.
		
		request send200Response: cartId asString]
		on: Error
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	webServer addService: '/addToCart' action:[:request | | book quantity cartId |	
		
		[cartId := request fields at: 'cartId'.
		book := request fields at: 'book'.
		quantity := request fields at: 'quantity'.
		
		tusLibrosSystemFacade
			add: quantity asNumber
			of: book
			toCartIdentifiedAs: cartId asNumber.
		
		request send200Response: 'OK']
		on: Error
		do: [ :anError |
			request send400Response: (anError messageText) ]].! !
!TusLibrosRestInterface methodsFor: 'initialization' stamp: 'JPF 6/26/2021 10:57:25' prior: 50930354!
initializeWith: aPortNumber

	tusLibrosSystemFacade := TusLibrosDefaultFactory new createFacade.
	
	port:= aPortNumber.
	
	webServer := WebServer new listenOn: self port.
	
	webServer addService: '/createCart' action:[ :request | | password clientId cartId |	
		
		[clientId := request fields at: 'clientId'.
		password := request fields at: 'password'.
		
		cartId := tusLibrosSystemFacade createCartFor: clientId authenticatedWith: password.
		
		request send200Response: cartId asString]
		on: Error
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	webServer addService: '/addToCart' action:[ :request | | book quantity cartId |	
		
		[cartId := request fields at: 'cartId'.
		book := request fields at: 'book'.
		quantity := request fields at: 'quantity'.
		
		tusLibrosSystemFacade
			add: quantity asNumber
			of: book
			toCartIdentifiedAs: cartId asNumber.
		
		request send200Response: 'OK']
		on: Error
		do: [ :anError |
			request send400Response: (anError messageText) ]].! !

server destroy.!

server := TusLibrosRestInterface listeningOn: 8080.!
!TusLibrosRestInterface methodsFor: 'initialization' stamp: 'JPF 6/26/2021 11:05:53'!
handle: request With: aBlock
		
	[aBlock value: request]
	on: Error
	do: [ :anError |
		request send400Response: (anError messageText) ]! !
!TusLibrosRestInterface methodsFor: 'private' stamp: 'JPF 6/26/2021 11:08:56'!
handle: request with: aBlock
		
	[aBlock value: request]
	on: Error
	do: [ :anError |
		request send400Response: (anError messageText) ]! !

!methodRemoval: TusLibrosRestInterface #handle:With: stamp: 'JPF 6/26/2021 11:08:56'!
handle: request With: aBlock
		
	[aBlock value: request]
	on: Error
	do: [ :anError |
		request send400Response: (anError messageText) ]!
!TusLibrosRestInterface methodsFor: 'private' stamp: 'JPF 6/26/2021 11:09:23' prior: 50930433!
handle: request with: aBlock
		
	[aBlock value]
	on: Error
	do: [ :anError |
		request send400Response: (anError messageText) ]! !
!TusLibrosRestInterface methodsFor: 'initialization' stamp: 'JPF 6/26/2021 11:10:04' prior: 50930389!
initializeWith: aPortNumber

	tusLibrosSystemFacade := TusLibrosDefaultFactory new createFacade.
	
	port:= aPortNumber.
	
	webServer := WebServer new listenOn: self port.
	
	webServer addService: '/createCart' action:[ :request | | password clientId cartId |	
		
		self handle: request with: [clientId := request fields at: 'clientId'.
		password := request fields at: 'password'.
		
		cartId := tusLibrosSystemFacade createCartFor: clientId authenticatedWith: password.
		
		request send200Response: cartId asString]].
	
	webServer addService: '/addToCart' action:[ :request | | book quantity cartId |	
		
		[cartId := request fields at: 'cartId'.
		book := request fields at: 'book'.
		quantity := request fields at: 'quantity'.
		
		tusLibrosSystemFacade
			add: quantity asNumber
			of: book
			toCartIdentifiedAs: cartId asNumber.
		
		request send200Response: 'OK']
		on: Error
		do: [ :anError |
			request send400Response: (anError messageText) ]].! !
!TusLibrosRestInterface methodsFor: 'initialization' stamp: 'JPF 6/26/2021 11:10:40' prior: 50930456!
initializeWith: aPortNumber

	tusLibrosSystemFacade := TusLibrosDefaultFactory new createFacade.
	
	port:= aPortNumber.
	
	webServer := WebServer new listenOn: self port.
	
	webServer addService: '/createCart' action:[ :request | | password clientId cartId |	
		
		self 
			handle: request
			with: [
				clientId := request fields at: 'clientId'.
				password := request fields at: 'password'.
		
				cartId := tusLibrosSystemFacade createCartFor: clientId authenticatedWith: password.
		
				request send200Response: cartId asString]].
	
	webServer addService: '/addToCart' action:[ :request | | book quantity cartId |	
		
		[cartId := request fields at: 'cartId'.
		book := request fields at: 'book'.
		quantity := request fields at: 'quantity'.
		
		tusLibrosSystemFacade
			add: quantity asNumber
			of: book
			toCartIdentifiedAs: cartId asNumber.
		
		request send200Response: 'OK']
		on: Error
		do: [ :anError |
			request send400Response: (anError messageText) ]].! !
!TusLibrosRestInterface methodsFor: 'initialization' stamp: 'JPF 6/26/2021 11:13:22'!
createCart: request
		
	| cartId clientId password |
	clientId := request fields at: 'clientId'.
	password := request fields at: 'password'.

	cartId := tusLibrosSystemFacade createCartFor: clientId authenticatedWith: password.

	request send200Response: cartId asString! !
!TusLibrosRestInterface methodsFor: 'initialization' stamp: 'JPF 6/26/2021 11:13:34' prior: 50930524!
createCart: request
		
	| cartId clientId password |
	
	clientId := request fields at: 'clientId'.
	password := request fields at: 'password'.

	cartId := tusLibrosSystemFacade createCartFor: clientId authenticatedWith: password.

	request send200Response: cartId asString! !
!TusLibrosRestInterface methodsFor: 'initialization' stamp: 'JPF 6/26/2021 11:14:19'!
handleCreateCart: request
		
	| cartId clientId password |
	
	clientId := request fields at: 'clientId'.
	password := request fields at: 'password'.

	cartId := tusLibrosSystemFacade createCartFor: clientId authenticatedWith: password.

	request send200Response: cartId asString! !

!methodRemoval: TusLibrosRestInterface #createCart: stamp: 'JPF 6/26/2021 11:14:19'!
createCart: request
		
	| cartId clientId password |
	
	clientId := request fields at: 'clientId'.
	password := request fields at: 'password'.

	cartId := tusLibrosSystemFacade createCartFor: clientId authenticatedWith: password.

	request send200Response: cartId asString!
!TusLibrosRestInterface methodsFor: 'initialization' stamp: 'JPF 6/26/2021 11:16:24' prior: 50930548!
handleCreateCart: request

	self handle: request with: [	| cartId clientId password |
	
	clientId := request fields at: 'clientId'.
	password := request fields at: 'password'.

	cartId := tusLibrosSystemFacade createCartFor: clientId authenticatedWith: password.

	request send200Response: cartId asString
	]! !
!TusLibrosRestInterface methodsFor: 'initialization' stamp: 'JPF 6/26/2021 11:16:36' prior: 50930572!
handleCreateCart: request

	self handle: request with: [	| cartId clientId password |
	
		clientId := request fields at: 'clientId'.
		password := request fields at: 'password'.

		cartId := tusLibrosSystemFacade createCartFor: clientId authenticatedWith: password.

		request send200Response: cartId asString
	]! !
!TusLibrosRestInterface methodsFor: 'initialization' stamp: 'JPF 6/26/2021 11:16:38' prior: 50930585!
handleCreateCart: request

	self handle: request with: [	 | cartId clientId password |
	
		clientId := request fields at: 'clientId'.
		password := request fields at: 'password'.

		cartId := tusLibrosSystemFacade createCartFor: clientId authenticatedWith: password.

		request send200Response: cartId asString
	]! !
!TusLibrosRestInterface methodsFor: 'initialization' stamp: 'JPF 6/26/2021 11:17:52' prior: 50930490!
initializeWith: aPortNumber

	tusLibrosSystemFacade := TusLibrosDefaultFactory new createFacade.
	
	port:= aPortNumber.
	
	webServer := WebServer new listenOn: self port.
	
	webServer addService: '/createCart' action:[ :request | self handleCreateCart: request].
	
	webServer addService: '/addToCart' action:[ :request | | book quantity cartId |	
		
		[cartId := request fields at: 'cartId'.
		book := request fields at: 'book'.
		quantity := request fields at: 'quantity'.
		
		tusLibrosSystemFacade
			add: quantity asNumber
			of: book
			toCartIdentifiedAs: cartId asNumber.
		
		request send200Response: 'OK']
		on: Error
		do: [ :anError |
			request send400Response: (anError messageText) ]].! !
!TusLibrosRestInterface methodsFor: 'initialization' stamp: 'JPF 6/26/2021 11:17:54' prior: 50930613!
initializeWith: aPortNumber

	tusLibrosSystemFacade := TusLibrosDefaultFactory new createFacade.
	
	port:= aPortNumber.
	
	webServer := WebServer new listenOn: self port.
	
	webServer addService: '/createCart' action:[ :request | self handleCreateCart: request ].
	
	webServer addService: '/addToCart' action:[ :request | | book quantity cartId |	
		
		[cartId := request fields at: 'cartId'.
		book := request fields at: 'book'.
		quantity := request fields at: 'quantity'.
		
		tusLibrosSystemFacade
			add: quantity asNumber
			of: book
			toCartIdentifiedAs: cartId asNumber.
		
		request send200Response: 'OK']
		on: Error
		do: [ :anError |
			request send400Response: (anError messageText) ]].! !
!TusLibrosRestInterface methodsFor: 'initialization' stamp: 'JPF 6/26/2021 11:18:43'!
handleAddToCart: request

	self handle: request with: [	 | cartId clientId password |
	
		clientId := request fields at: 'clientId'.
		password := request fields at: 'password'.

		cartId := tusLibrosSystemFacade createCartFor: clientId authenticatedWith: password.

		request send200Response: cartId asString
	]! !
!TusLibrosRestInterface methodsFor: 'initialization' stamp: 'JPF 6/26/2021 11:20:02' prior: 50930664!
handleAddToCart: request

	self handle: request with: [	 | book quantity cartId |	
		
		cartId := request fields at: 'cartId'.
		book := request fields at: 'book'.
		quantity := request fields at: 'quantity'.
		
		tusLibrosSystemFacade
			add: quantity asNumber
			of: book
			toCartIdentifiedAs: cartId asNumber.
		
		request send200Response: 'OK'
	]! !
!TusLibrosRestInterface methodsFor: 'initialization' stamp: 'JPF 6/26/2021 11:21:10' prior: 50930639!
initializeWith: aPortNumber

	tusLibrosSystemFacade := TusLibrosDefaultFactory new createFacade.
	
	port:= aPortNumber.
	
	webServer := WebServer new listenOn: self port.
	
	webServer addService: '/createCart' action:[ :request | self handleCreateCart: request ].
	
	webServer addService: '/addToCart' action:[ :request | self handleAddToCart: request ].! !

----SNAPSHOT----(26 June 2021 11:25:11) Interfaz.image priorSource: 19143150!

server := TusLibrosRestInterface listeningOn: 8080.!

server destroy.!

server := TusLibrosRestInterface listeningOn: 8080.!
!TusLibrosRestInterface methodsFor: 'initialization' stamp: 'JPF 6/26/2021 11:30:25' prior: 50930693!
initializeWith: aPortNumber

	tusLibrosSystemFacade := TusLibrosDefaultFactory new createFacade.
	
	port:= aPortNumber.
	
	webServer :=
		WebServer new listenOn: self port;
		addService: '/createCart' action:[ :request | self handleCreateCart: request ];
		addService: '/addToCart' action:[ :request | self handleAddToCart: request ];
		addService: '/listCart' action:[ :request | self handleListCart: request ].! !
!TusLibrosRestInterface methodsFor: 'handlers' stamp: 'JPF 6/26/2021 11:30:39'!
handleListCart: request

	self handle: request with: [	 | book quantity cartId |	
		
		cartId := request fields at: 'cartId'.
		book := request fields at: 'book'.
		quantity := request fields at: 'quantity'.
		
		tusLibrosSystemFacade
			add: quantity asNumber
			of: book
			toCartIdentifiedAs: cartId asNumber.
		
		request send200Response: 'OK'
	]! !
!TusLibrosRestInterface methodsFor: 'handlers' stamp: 'JPF 6/26/2021 11:31:30' prior: 50930730!
handleListCart: request

	self handle: request with: [	 | cartId cart |	
		
		cartId := request fields at: 'cartId'.
		
		cart := tusLibrosSystemFacade listCartIdentifiedAs: cartId.
		
		request send200Response: 'OK'
	]! !
!TusLibrosRestInterface methodsFor: 'handlers' stamp: 'JPF 6/26/2021 11:34:09' prior: 50930745!
handleListCart: request

	self handle: request with: [	 | cartId cartContent |	
		
		cartId := request fields at: 'cartId'.
		
		cartContent := tusLibrosSystemFacade listCartIdentifiedAs: cartId.
		
		request send200Response: 'OK'
	]! !
!TusLibrosRestInterface methodsFor: 'handlers' stamp: 'JPF 6/26/2021 11:35:30' prior: 50930755!
handleListCart: request

	self handle: request with: [	 | cartId cartContent |	
		
		cartId := request fields at: 'cartId'.
		
		cartContent := tusLibrosSystemFacade listCartIdentifiedAs: cartId.
		
		request send200Response: WebUtils 
	]! !
!TusLibrosRestInterface methodsFor: 'handlers' stamp: 'JPF 6/26/2021 11:36:28' prior: 50930766!
handleListCart: request

	self handle: request with: [	 | cartId cartContent |	
		
		cartId := request fields at: 'cartId'.
		
		cartContent := tusLibrosSystemFacade listCartIdentifiedAs: cartId.
		
		request send200Response: (WebUtils jsonEncode: cartContent).
	]! !

server := TusLibrosRestInterface listeningOn: 8080.!

server destroy.!

server := TusLibrosRestInterface listeningOn: 8080.!

server := TusLibrosRestInterface listeningOn: 8080.!

server destroy.!

----QUIT----(26 June 2021 11:41:31) Interfaz.image priorSource: 19169797!

----STARTUP---- (26 June 2021 11:41:42) as /Users/juan.ferrino/CuisUniversity/Interfaz.image!


server := TusLibrosRestInterface listeningOn: 8080.!
!TusLibrosRestInterface methodsFor: 'handlers' stamp: 'JPF 6/26/2021 11:45:00' prior: 50930777!
handleListCart: request

	self handle: request with: [	 | cartId cartContent |	
		
		cartId := request fields at: 'cartId'.
		
		cartContent := tusLibrosSystemFacade listCartIdentifiedAs: cartId asNumber.
		
		request send200Response: (WebUtils jsonEncode: cartContent).
	]! !

server destroy.!

server := TusLibrosRestInterface listeningOn: 8080.!
!TusLibrosRestInterface methodsFor: 'handlers' stamp: 'JPF 6/26/2021 11:48:46' prior: 50930802!
handleListCart: request

	self handle: request with: [	 | cartId cartContent |	
		
		cartId := request fields at: 'cartId'.
		
		cartContent := tusLibrosSystemFacade listCartIdentifiedAs: cartId asNumber.
		
		request send200Response: (WebUtils jsonEncode: cartContent).
	]! !

TestCase subclass: #TusLibrosRestInterfaceTest
	instanceVariableNames: 'port webServer tusLibrosSystemFacade'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Server'!

!classDefinition: #TusLibrosRestInterfaceTest category: 'TusLibros-Server' stamp: 'JPF 6/26/2021 11:49:10'!
TestCase subclass: #TusLibrosRestInterfaceTest
	instanceVariableNames: 'port webServer tusLibrosSystemFacade'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Server'!
!TusLibrosRestInterfaceTest methodsFor: 'tests' stamp: 'JPF 6/26/2021 11:50:41'!
test01ShouldConvertABagToADictionaryOfOcurrences! !

!classRenamed: #TusLibrosRestInterfaceTest as: #MapperTest stamp: 'JPF 6/26/2021 11:51:25'!
Smalltalk renameClassNamed: #TusLibrosRestInterfaceTest as: #MapperTest!
!MapperTest methodsFor: 'tests' stamp: 'JPF 6/26/2021 11:52:26' prior: 50930843!
test01ShouldConvertABagToADictionaryOfOcurrences

	! !
!MapperTest methodsFor: 'tests' stamp: 'JPF 6/26/2021 11:52:47'!
test01ShouldConvertAnEmptyBagToAEmptyDictionary

	! !

!methodRemoval: MapperTest #test01ShouldConvertABagToADictionaryOfOcurrences stamp: 'JPF 6/26/2021 11:52:47'!
test01ShouldConvertABagToADictionaryOfOcurrences

	!

!classDefinition: #Mapper category: 'TusLibros-Server' stamp: 'JPF 6/26/2021 11:54:23'!
Object subclass: #Mapper
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Server'!
!MapperTest methodsFor: 'tests' stamp: 'JPF 6/26/2021 11:54:12' prior: 50930857!
test01ShouldConvertAnEmptyBagToAEmptyDictionary

	self assert: (Mapper bagToDictionayOfOcurrences: (Bag new)) = Dictionary new.

	! !

!testRun: #MapperTest #test01ShouldConvertAnEmptyBagToAEmptyDictionary stamp: 'JPF 6/26/2021 11:54:31'!
ERROR!
!Mapper class methodsFor: 'mapping' stamp: 'JPF 6/26/2021 11:54:50'!
bagToDictionayOfOcurrences: aBag 
	self shouldBeImplemented.! !
!Mapper class methodsFor: 'mapping' stamp: 'JPF 6/26/2021 11:55:01' prior: 50930884!
bagToDictionayOfOcurrences: aBag 
	^ Dictionary new.! !
!Mapper class methodsFor: 'mapping' stamp: 'JPF 6/26/2021 11:55:03' prior: 50930889!
bagToDictionayOfOcurrences: aBag 
	
	^ Dictionary new.! !

!testRun: #MapperTest #test01ShouldConvertAnEmptyBagToAEmptyDictionary stamp: 'JPF 6/26/2021 11:55:04'!
PASSED!

!testRun: #MapperTest #test01ShouldConvertAnEmptyBagToAEmptyDictionary stamp: 'JPF 6/26/2021 11:55:04'!
PASSED!
!MapperTest methodsFor: 'tests' stamp: 'JPF 6/26/2021 11:55:59'!
test02ShouldConvertABagWithItemsToTheCorrespondingDictionaryOfOcurrences

	self assert: (Mapper bagToDictionayOfOcurrences: (Bag new)) = Dictionary new.

	! !
!MapperTest methodsFor: 'tests' stamp: 'JPF 6/26/2021 11:57:11' prior: 50930905!
test02ShouldConvertABagWithItemsToTheCorrespondingDictionaryOfOcurrences

	| bag |
	bag := Bag with: 'item1' with: 'item2' with: 'item1' with: 'item1' with: 'item2' with: 'item3'.

	self assert: (Mapper bagToDictionayOfOcurrences: (Bag new)) = Dictionary new.

	! !
!MapperTest methodsFor: 'tests' stamp: 'JPF 6/26/2021 11:58:33' prior: 50930913!
test02ShouldConvertABagWithItemsToTheCorrespondingDictionaryOfOcurrences

	| bag expectedDictionary |
	
	bag := Bag with: 'item1' with: 'item2' with: 'item1' with: 'item1' with: 'item2' with: 'item3'.
	expectedDictionary := Dictionary with: ('item1'->3) with: ('item2'->2) with: ('item3'->1).

	self assert: (Mapper bagToDictionayOfOcurrences: (Bag new)) = Dictionary new.

	! !
!MapperTest methodsFor: 'tests' stamp: 'JPF 6/26/2021 11:58:54' prior: 50930924!
test02ShouldConvertABagWithItemsToTheCorrespondingDictionaryOfOcurrences

	| bag expectedDictionary |
	
	bag := Bag with: 'item1' with: 'item2' with: 'item1' with: 'item1' with: 'item2' with: 'item3'.
	expectedDictionary := Dictionary with: ('item1'->3) with: ('item2'->2) with: ('item3'->1).

	self assert: (Mapper bagToDictionayOfOcurrences: bag) = expectedDictionary

	! !

!testRun: #MapperTest #test02ShouldConvertABagWithItemsToTheCorrespondingDictionaryOfOcurrences stamp: 'JPF 6/26/2021 11:58:57'!
FAILURE!

!classDefinition: 'Mapper class' category: 'TusLibros-Server' stamp: 'JPF 6/26/2021 12:00:06'!
Mapper class
	instanceVariableNames: 'dictionary'!
!Mapper class methodsFor: 'mapping' stamp: 'JPF 6/26/2021 12:00:04' prior: 50930894!
bagToDictionayOfOcurrences: aBag 
	
	dictionary := Dictionary new.! !

Mapper class
	instanceVariableNames: ''!
!Mapper class methodsFor: 'mapping' stamp: 'JPF 6/26/2021 12:00:58' prior: 50930963!
bagToDictionayOfOcurrences: aBag 
	
	Dictionary new.! !

Mapper class
	instanceVariableNames: ''!

!classDefinition: 'Mapper class' category: 'TusLibros-Server' stamp: 'JPF 6/26/2021 12:01:05'!
Mapper class
	instanceVariableNames: ''!
!Mapper class methodsFor: 'mapping' stamp: 'JPF 6/26/2021 12:01:20' prior: 50930970!
bagToDictionayOfOcurrences: aBag 
	
	| dictionary |
	dictionary := Dictionary new.! !
!Mapper class methodsFor: 'mapping' stamp: 'JPF 6/26/2021 12:02:27' prior: 50930980!
bagToDictionayOfOcurrences: aBag 
	
	| dictionary |
	
	dictionary := Dictionary new.
	
	aBag do: [ :item | dictionary at: item put: (aBag ocurrencesOf: item)]! !
!Mapper class methodsFor: 'mapping' stamp: 'JPF 6/26/2021 12:03:30' prior: 50930986!
bagToDictionayOfOcurrences: aBag 
	
	| dictionary |
	
	dictionary := Dictionary new.
	
	aBag do: [ :item | dictionary at: item put: (aBag occurrencesOf: item)]! !
!Mapper class methodsFor: 'mapping' stamp: 'JPF 6/26/2021 12:03:47' prior: 50930994!
bagToDictionayOfOcurrences: aBag 
	
	| dictionary |
	
	dictionary := Dictionary new.
	
	aBag do: [ :item | dictionary at: item put: (aBag occurrencesOf: item)].
	
	^ dictionary! !

!testRun: #MapperTest #test02ShouldConvertABagWithItemsToTheCorrespondingDictionaryOfOcurrences stamp: 'JPF 6/26/2021 12:03:56'!
PASSED!

!testRun: #MapperTest #test01ShouldConvertAnEmptyBagToAEmptyDictionary stamp: 'JPF 6/26/2021 12:03:56'!
PASSED!

!testRun: #MapperTest #test02ShouldConvertABagWithItemsToTheCorrespondingDictionaryOfOcurrences stamp: 'JPF 6/26/2021 12:03:56'!
PASSED!
!TusLibrosRestInterface methodsFor: 'handlers' stamp: 'JPF 6/26/2021 12:06:05' prior: 50930816!
handleListCart: request

	self handle: request with: [	 | cartId cartContent itemsOcurrences response |	
		
		cartId := request fields at: 'cartId'.
		
		cartContent := tusLibrosSystemFacade listCartIdentifiedAs: cartId asNumber.
		
		itemsOcurrences := Mapper bagToDictionayOfOcurrences: (WebUtils jsonEncode: cartContent).
		
		response := nil.
		
		request send200Response: ''.
	]! !
!TusLibrosRestInterface methodsFor: 'handlers' stamp: 'JPF 6/26/2021 12:06:34' prior: 50931023!
handleListCart: request

	self handle: request with: [	 | cartId cartContent itemsOcurrences response |	
		
		cartId := request fields at: 'cartId'.
		
		cartContent := tusLibrosSystemFacade listCartIdentifiedAs: cartId asNumber.
		
		itemsOcurrences := Mapper bagToDictionayOfOcurrences: cartContent.
		
		response := nil.
		
		request send200Response: ''.
	]! !
!TusLibrosRestInterface methodsFor: 'handlers' stamp: 'JPF 6/26/2021 12:11:18' prior: 50931039!
handleListCart: request

	self handle: request with: [	 | cartId cartContent itemsOcurrences response |	
		
		cartId := request fields at: 'cartId'.
		
		cartContent := tusLibrosSystemFacade listCartIdentifiedAs: cartId asNumber.
		
		itemsOcurrences := Mapper bagToDictionayOfOcurrences: cartContent.
		
		response := String streamContents:[ :s| WebUtils jsonMap: itemsOcurrences on: s].
		
		request send200Response: ''.
	]! !
!TusLibrosRestInterface methodsFor: 'handlers' stamp: 'JPF 6/26/2021 12:11:29' prior: 50931054!
handleListCart: request

	self handle: request with: [	 | cartId cartContent itemsOcurrences response |	
		
		cartId := request fields at: 'cartId'.
		
		cartContent := tusLibrosSystemFacade listCartIdentifiedAs: cartId asNumber.
		
		itemsOcurrences := Mapper bagToDictionayOfOcurrences: cartContent.
		
		response := String streamContents:[ :s| WebUtils jsonMap: itemsOcurrences on: s].
		
		request send200Response: response.
	]! !

server destroy.!

server := TusLibrosRestInterface listeningOn: 8080.!
!TusLibrosRestInterface methodsFor: 'initialization' stamp: 'JPF 6/26/2021 12:16:37' prior: 50930714!
initializeWith: aPortNumber

	tusLibrosSystemFacade := TusLibrosDefaultFactory new createFacade.
	
	port:= aPortNumber.
	
	webServer :=
		WebServer new listenOn: self port;
		addService: '/createCart' action:[ :request | self handleCreateCart: request ];
		addService: '/addToCart' action:[ :request | self handleAddToCart: request ];
		addService: '/listCart' action:[ :request | self handleListCart: request ];
		addService: '/addToCart' action:[ :request | self handleListPurchases: request ].! !
!TusLibrosRestInterface methodsFor: 'handlers' stamp: 'JPF 6/26/2021 12:16:58'!
handleListPurchases: request

	self handle: request with: [	 | cartId cartContent itemsOcurrences response |	
		
		cartId := request fields at: 'cartId'.
		
		cartContent := tusLibrosSystemFacade listCartIdentifiedAs: cartId asNumber.
		
		itemsOcurrences := Mapper bagToDictionayOfOcurrences: cartContent.
		
		response := String streamContents:[ :s| WebUtils jsonMap: itemsOcurrences on: s].
		
		request send200Response: response.
	]! !
!TusLibrosRestInterface methodsFor: 'handlers' stamp: 'JPF 6/26/2021 12:17:17' prior: 50931110!
handleListPurchases: request

	self handle: request with: [	 | cartId purchases itemsOcurrences response |	
		
		cartId := request fields at: 'cartId'.
		
		purchases := tusLibrosSystemFacade listCartIdentifiedAs: cartId asNumber.
		
		itemsOcurrences := Mapper bagToDictionayOfOcurrences: purchases.
		
		response := String streamContents:[ :s| WebUtils jsonMap: itemsOcurrences on: s].
		
		request send200Response: response.
	]! !
!TusLibrosRestInterface methodsFor: 'handlers' stamp: 'JPF 6/26/2021 12:18:52' prior: 50931127!
handleListPurchases: request

	self handle: request with: [	 | clientId password purchases itemsOcurrences response |	
		
		clientId := request fields at: 'clientId'.
		password := request fields at: 'password'.
		
		purchases := tusLibrosSystemFacade listPurchasesOf: clientId authenticatingWith: password.
		
		itemsOcurrences := Mapper bagToDictionayOfOcurrences: purchases.
		
		response := String streamContents:[ :s| WebUtils jsonMap: itemsOcurrences on: s].
		
		request send200Response: response.
	]! !
!TusLibrosRestInterface methodsFor: 'initialization' stamp: 'JPF 6/26/2021 12:19:06' prior: 50931091!
initializeWith: aPortNumber

	tusLibrosSystemFacade := TusLibrosDefaultFactory new createFacade.
	
	port:= aPortNumber.
	
	webServer :=
		WebServer new listenOn: self port;
		addService: '/createCart' action:[ :request | self handleCreateCart: request ];
		addService: '/addToCart' action:[ :request | self handleAddToCart: request ];
		addService: '/listCart' action:[ :request | self handleListCart: request ];
		addService: '/listPurchases' action:[ :request | self handleListPurchases: request ].! !
!TusLibrosSystemFacadeTest methodsFor: 'tests - list purchases' stamp: 'JPF 6/26/2021 12:22:03' prior: 50928972!
test14ListPurchasesIncludesBoughtItems

	| cartId purchases |

	cartId := systemFacade createCartFor: self validUser authenticatedWith: self validUserPassword.
	systemFacade add: 2 of: self validBook toCartIdentifiedAs: cartId.
	systemFacade add: 1 of: self anotherValidBook toCartIdentifiedAs: cartId.
	systemFacade
		checkOutCartIdentifiedAs: cartId
		withCreditCardNumbered: '1111222233334444'
		ownedBy: 'Juan Perez'
		expiringOn: testObjectsFactory notExpiredMonthOfYear.

	purchases := systemFacade listPurchasesOf: self validUser authenticatingWith: self validUserPassword.
	self halt.

	self assert: (purchases at: self validBook) equals: (testObjectsFactory itemSellByTheStorePrice * 2).
	self assert: (purchases at: self anotherValidBook) equals: testObjectsFactory anotherItemSellByTheStorePrice.! !

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'JPF 6/26/2021 12:27:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'JPF 6/26/2021 12:27:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'JPF 6/26/2021 12:27:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'JPF 6/26/2021 12:27:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'JPF 6/26/2021 12:27:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'JPF 6/26/2021 12:27:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'JPF 6/26/2021 12:27:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07ListCartOfAnEmptyCartReturnsAnEmptyBag stamp: 'JPF 6/26/2021 12:27:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'JPF 6/26/2021 12:27:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'JPF 6/26/2021 12:27:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CanCheckoutACart stamp: 'JPF 6/26/2021 12:27:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'JPF 6/26/2021 12:27:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'JPF 6/26/2021 12:27:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'JPF 6/26/2021 12:27:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'JPF 6/26/2021 12:27:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'JPF 6/26/2021 12:27:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'JPF 6/26/2021 12:27:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'JPF 6/26/2021 12:27:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'JPF 6/26/2021 12:27:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'JPF 6/26/2021 12:27:15'!
PASSED!
!TusLibrosSystemFacadeTest methodsFor: 'tests - list purchases' stamp: 'JPF 6/26/2021 12:27:20' prior: 50931184!
test14ListPurchasesIncludesBoughtItems

	| cartId purchases |

	cartId := systemFacade createCartFor: self validUser authenticatedWith: self validUserPassword.
	systemFacade add: 2 of: self validBook toCartIdentifiedAs: cartId.
	systemFacade add: 1 of: self anotherValidBook toCartIdentifiedAs: cartId.
	systemFacade
		checkOutCartIdentifiedAs: cartId
		withCreditCardNumbered: '1111222233334444'
		ownedBy: 'Juan Perez'
		expiringOn: testObjectsFactory notExpiredMonthOfYear.

	purchases := systemFacade listPurchasesOf: self validUser authenticatingWith: self validUserPassword.

	self assert: (purchases at: self validBook) equals: (testObjectsFactory itemSellByTheStorePrice * 2).
	self assert: (purchases at: self anotherValidBook) equals: testObjectsFactory anotherItemSellByTheStorePrice.! !
!TusLibrosRestInterface methodsFor: 'handlers' stamp: 'JPF 6/26/2021 12:28:40' prior: 50931144!
handleListPurchases: request

	self handle: request with: [	 | clientId password purchases response |	
		
		clientId := request fields at: 'clientId'.
		password := request fields at: 'password'.
		
		purchases := tusLibrosSystemFacade listPurchasesOf: clientId authenticatingWith: password.
		
		response := String streamContents:[ :s| WebUtils jsonMap: purchases on: s].
		
		request send200Response: response.
	]! !
!TusLibrosRestInterface methodsFor: 'initialization' stamp: 'JPF 6/26/2021 12:29:51' prior: 50931164!
initializeWith: aPortNumber

	tusLibrosSystemFacade := TusLibrosDefaultFactory new createFacade.
	
	port:= aPortNumber.
	
	webServer :=
		WebServer new listenOn: self port;
		addService: '/createCart' action:[ :request | self handleCreateCart: request ];
		addService: '/addToCart' action:[ :request | self handleAddToCart: request ];
		addService: '/listCart' action:[ :request | self handleListCart: request ];
		addService: '/listPurchases' action:[ :request | self handleListPurchases: request ];
		addService: '/checkOutCart' action:[ :request | self handleCheckOutCart: request ].! !
!TusLibrosRestInterface methodsFor: 'handlers' stamp: 'JPF 6/26/2021 12:30:09'!
handleCheckOutCart: request

	self handle: request with: [	 | cartId cartContent itemsOcurrences response |	
		
		cartId := request fields at: 'cartId'.
		
		cartContent := tusLibrosSystemFacade listCartIdentifiedAs: cartId asNumber.
		
		itemsOcurrences := Mapper bagToDictionayOfOcurrences: cartContent.
		
		response := String streamContents:[ :s| WebUtils jsonMap: itemsOcurrences on: s].
		
		request send200Response: response.
	]! !
!TusLibrosRestInterface methodsFor: 'handlers' stamp: 'JPF 6/26/2021 12:33:17' prior: 50931354!
handleCheckOutCart: request

	self handle: request with: [	 | cartId ticket |	
		
		cartId := request fields at: 'cartId'.
		
		ticket := tusLibrosSystemFacade
			checkOutCartIdentifiedAs: cartId asNumber
			withCreditCardNumbered: '1111222211112222'
			ownedBy: 'Juan Ferrino'
			expiringOn: ''.
		
		request send200Response: ticket.
	]! !
!TusLibrosRestInterface methodsFor: 'handlers' stamp: 'JPF 6/26/2021 12:35:10' prior: 50931371!
handleCheckOutCart: request

	self handle: request with: [	 | cartId ticket |	
		
		cartId := request fields at: 'cartId'.
		
		ticket := tusLibrosSystemFacade
			checkOutCartIdentifiedAs: cartId asNumber
			withCreditCardNumbered: '1111222211112222'
			ownedBy: 'Juan Ferrino'
			expiringOn: (Month month: 11 year: 2026).
		
		request send200Response: ticket.
	]! !

server destroy.!

server := TusLibrosRestInterface listeningOn: 8080.!
!TusLibrosRestInterface methodsFor: 'handlers' stamp: 'JPF 6/26/2021 12:37:56' prior: 50931385!
handleCheckOutCart: request

	self handle: request with: [	 | cartId ticket |	
		
		cartId := request fields at: 'cartId'.
		
		ticket := tusLibrosSystemFacade
			checkOutCartIdentifiedAs: cartId asNumber
			withCreditCardNumbered: '1111222211112222'
			ownedBy: 'Juan Ferrino'
			expiringOn: (Month month: 11 year: 2026).
		self halt.
		
		request send200Response: ticket.
	]! !

bag := Bag with: 'item1' with: 'item1' with: 'item2'.!

bag contents !
!TusLibrosRestInterface methodsFor: 'handlers' stamp: 'JPF 6/26/2021 12:44:14' prior: 50931071!
handleListCart: request

	self handle: request with: [	 | cartId cart itemsOcurrences response |	
		
		cartId := request fields at: 'cartId'.
		
		cart := tusLibrosSystemFacade listCartIdentifiedAs: cartId asNumber.
		
		itemsOcurrences := Mapper bagToDictionayOfOcurrences: cart.
		
		response := String streamContents:[ :s| WebUtils jsonMap: itemsOcurrences on: s].
		
		request send200Response: response.
	]! !
!TusLibrosRestInterface methodsFor: 'handlers' stamp: 'JPF 6/26/2021 12:44:32' prior: 50931420!
handleListCart: request

	self handle: request with: [	 | cartId cart response |	
		
		cartId := request fields at: 'cartId'.
		
		cart := tusLibrosSystemFacade listCartIdentifiedAs: cartId asNumber.
		
		response := String streamContents:[ :s| WebUtils jsonMap: cart contents on: s].
		
		request send200Response: response.
	]! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'JPF 6/26/2021 12:47:10'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'JPF 6/26/2021 12:47:10'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'JPF 6/26/2021 12:47:10'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'JPF 6/26/2021 12:47:10'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'JPF 6/26/2021 12:47:10'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'JPF 6/26/2021 12:47:10'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'JPF 6/26/2021 12:47:10'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'JPF 6/26/2021 12:47:10'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'JPF 6/26/2021 12:47:10'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'JPF 6/26/2021 12:47:10'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'JPF 6/26/2021 12:47:10'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'JPF 6/26/2021 12:47:10'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'JPF 6/26/2021 12:47:10'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'JPF 6/26/2021 12:47:10'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'JPF 6/26/2021 12:47:10'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'JPF 6/26/2021 12:47:10'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'JPF 6/26/2021 12:47:10'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'JPF 6/26/2021 12:47:10'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'JPF 6/26/2021 12:47:10'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'JPF 6/26/2021 12:47:10'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07ListCartOfAnEmptyCartReturnsAnEmptyBag stamp: 'JPF 6/26/2021 12:47:10'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'JPF 6/26/2021 12:47:10'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'JPF 6/26/2021 12:47:10'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CanCheckoutACart stamp: 'JPF 6/26/2021 12:47:10'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'JPF 6/26/2021 12:47:10'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'JPF 6/26/2021 12:47:11'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'JPF 6/26/2021 12:47:11'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'JPF 6/26/2021 12:47:11'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'JPF 6/26/2021 12:47:11'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'JPF 6/26/2021 12:47:11'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'JPF 6/26/2021 12:47:11'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'JPF 6/26/2021 12:47:11'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'JPF 6/26/2021 12:47:11'!
PASSED!
!TusLibrosSystemFacade methodsFor: 'facade protocol' stamp: 'JPF 6/26/2021 12:47:55' prior: 50928508!
checkOutCartIdentifiedAs: aCartId withCreditCardNumbered: aCreditCartNumber ownedBy: anOwner expiringOn: anExpirationMonthOfYear

	self
		withCartSessionIdentifiedAs: aCartId
		do: [ :cartSession | ^ cartSession
			checkOutCartWithCreditCardNumbered: aCreditCartNumber
			ownedBy: anOwner
			expiringOn: anExpirationMonthOfYear ]
! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'JPF 6/26/2021 12:48:24'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'JPF 6/26/2021 12:48:24'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'JPF 6/26/2021 12:48:24'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'JPF 6/26/2021 12:48:24'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'JPF 6/26/2021 12:48:24'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'JPF 6/26/2021 12:48:24'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'JPF 6/26/2021 12:48:24'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'JPF 6/26/2021 12:48:24'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'JPF 6/26/2021 12:48:24'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'JPF 6/26/2021 12:48:24'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'JPF 6/26/2021 12:48:24'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'JPF 6/26/2021 12:48:24'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'JPF 6/26/2021 12:48:24'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'JPF 6/26/2021 12:48:24'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'JPF 6/26/2021 12:48:24'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'JPF 6/26/2021 12:48:24'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'JPF 6/26/2021 12:48:24'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'JPF 6/26/2021 12:48:24'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'JPF 6/26/2021 12:48:24'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'JPF 6/26/2021 12:48:24'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07ListCartOfAnEmptyCartReturnsAnEmptyBag stamp: 'JPF 6/26/2021 12:48:24'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'JPF 6/26/2021 12:48:24'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'JPF 6/26/2021 12:48:24'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CanCheckoutACart stamp: 'JPF 6/26/2021 12:48:24'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'JPF 6/26/2021 12:48:24'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'JPF 6/26/2021 12:48:24'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'JPF 6/26/2021 12:48:24'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'JPF 6/26/2021 12:48:24'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'JPF 6/26/2021 12:48:24'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'JPF 6/26/2021 12:48:24'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'JPF 6/26/2021 12:48:24'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'JPF 6/26/2021 12:48:24'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'JPF 6/26/2021 12:48:24'!
PASSED!

server destroy.!

server := TusLibrosRestInterface listeningOn: 8080.!
!TusLibrosRestInterface methodsFor: 'handlers' stamp: 'JPF 6/26/2021 12:51:16' prior: 50931402!
handleCheckOutCart: request

	self handle: request with: [	 | cartId ticket |	
		
		cartId := request fields at: 'cartId'.
		
		ticket := tusLibrosSystemFacade
			checkOutCartIdentifiedAs: cartId asNumber
			withCreditCardNumbered: '1111222211112222'
			ownedBy: 'Juan Ferrino'
			expiringOn: (Month month: 11 year: 2026).
		
		request send200Response: (WebUtils jsonEncode: ticket).
	]! !
!TusLibrosRestInterface methodsFor: 'handlers' stamp: 'JPF 6/26/2021 12:57:21' prior: 50931436!
handleListCart: request

	self handle: request with: [	 | cartId cart |	
		
		cartId := request fields at: 'cartId'.
		
		cart := tusLibrosSystemFacade listCartIdentifiedAs: cartId asNumber.
		
		request send200Response: (WebUtils jsonEncode: cart contents).
	]! !
!TusLibrosRestInterface methodsFor: 'handlers' stamp: 'JPF 6/26/2021 13:02:17' prior: 50931700!
handleCheckOutCart: request

	self handle: request with: [	 | cartId ticket detail |	
		
		cartId := request fields at: 'cartId'.
		
		ticket := tusLibrosSystemFacade
			checkOutCartIdentifiedAs: cartId asNumber
			withCreditCardNumbered: '1111222211112222'
			ownedBy: 'Juan Ferrino'
			expiringOn: (Month month: 11 year: 2026).
			
		detail := ticket
		
		request send200Response: (WebUtils jsonEncode: ticket).
	]! !

!methodRemoval: Mapper class #bagToDictionayOfOcurrences: stamp: 'JPF 6/26/2021 13:04:16'!
bagToDictionayOfOcurrences: aBag 
	
	| dictionary |
	
	dictionary := Dictionary new.
	
	aBag do: [ :item | dictionary at: item put: (aBag occurrencesOf: item)].
	
	^ dictionary!
!MapperTest methodsFor: 'tests' stamp: 'JPF 6/26/2021 13:05:50'!
test01ShouldConvertAnEmptyTicketToAnEmptyList

	self assert: (Mapper bagToDictionayOfOcurrences: (Bag new)) = Dictionary new.

	! !

!methodRemoval: MapperTest #test01ShouldConvertAnEmptyBagToAEmptyDictionary stamp: 'JPF 6/26/2021 13:05:50'!
test01ShouldConvertAnEmptyBagToAEmptyDictionary

	self assert: (Mapper bagToDictionayOfOcurrences: (Bag new)) = Dictionary new.

	!
!MapperTest methodsFor: 'tests' stamp: 'JPF 6/26/2021 13:06:59' prior: 50931752!
test01ShouldConvertAnEmptyTicketToAnEmptyList

	self assert: (Mapper mapTicketToResponse: (Ticket of: OrderedCollection new)) = OrderedCollection new.

	! !
!MapperTest methodsFor: 'tests' stamp: 'JPF 6/26/2021 13:07:56' prior: 50931767!
test01ShouldConvertAnEmptyTicketToAnEmptyList

	self 
		assert: OrderedCollection new
		equals: (Mapper mapTicketToResponse: (Ticket of: OrderedCollection new)).
	! !

!testRun: #MapperTest #test01ShouldConvertAnEmptyTicketToAnEmptyList stamp: 'JPF 6/26/2021 13:07:59'!
ERROR!
!Mapper class methodsFor: 'to response' stamp: 'JPF 6/26/2021 13:08:19'!
mapTicketToResponse: aTicket 
	self shouldBeImplemented.! !
!Mapper class methodsFor: 'to response' stamp: 'JPF 6/26/2021 13:08:28' prior: 50931786!
mapTicketToResponse: aTicket 
	^ OrderedCollection new.! !
!Mapper class methodsFor: 'to response' stamp: 'JPF 6/26/2021 13:08:31' prior: 50931791!
mapTicketToResponse: aTicket

	^ OrderedCollection new.! !
!MapperTest methodsFor: 'tests' stamp: 'JPF 6/26/2021 13:09:26'!
test02ShouldConvertATicketToTheCorrespondingListOfDictionaries

	| bag expectedDictionary |
	
	bag := Bag with: 'item1' with: 'item2' with: 'item1' with: 'item1' with: 'item2' with: 'item3'.
	expectedDictionary := Dictionary with: ('item1'->3) with: ('item2'->2) with: ('item3'->1).

	self assert: (Mapper bagToDictionayOfOcurrences: bag) = expectedDictionary

	! !

!methodRemoval: MapperTest #test02ShouldConvertABagWithItemsToTheCorrespondingDictionaryOfOcurrences stamp: 'JPF 6/26/2021 13:09:26'!
test02ShouldConvertABagWithItemsToTheCorrespondingDictionaryOfOcurrences

	| bag expectedDictionary |
	
	bag := Bag with: 'item1' with: 'item2' with: 'item1' with: 'item1' with: 'item2' with: 'item3'.
	expectedDictionary := Dictionary with: ('item1'->3) with: ('item2'->2) with: ('item3'->1).

	self assert: (Mapper bagToDictionayOfOcurrences: bag) = expectedDictionary

	!
!MapperTest methodsFor: 'tests' stamp: 'JPF 6/26/2021 13:16:05' prior: 50931800!
test02ShouldConvertATicketToTheCorrespondingListOfDictionaries

	| ticket expectedResponse |
	
	ticket := Ticket of: (OrderedCollection 
		with: (LineItem of: 'item1' quantity: 2 total: 20)
		with: (LineItem of: 'item2' quantity: 1 total: 30)).
	
	expectedResponse := OrderedCollection
		with: (Dictionary with: ('product'->'item1') with: ('quantity'->2) with: ('total'->2))
		with: (Dictionary with: ('product'->'item2') with: ('quantity'->1) with: ('total'->30)).

	self assert: (Mapper mapTicketToResponse: ticket) = expectedResponse.

	! !
!MapperTest methodsFor: 'tests' stamp: 'JPF 6/26/2021 13:16:10' prior: 50931830!
test02ShouldConvertATicketToTheCorrespondingListOfDictionaries

	| ticket expectedResponse |
	
	ticket := Ticket of: (OrderedCollection 
		with: (LineItem of: 'item1' quantity: 2 total: 20)
		with: (LineItem of: 'item2' quantity: 1 total: 30)).
	
	expectedResponse := OrderedCollection
		with: (Dictionary with: ('product'->'item1') with: ('quantity'->2) with: ('total'->2))	
		with: (Dictionary with: ('product'->'item2') with: ('quantity'->1) with: ('total'->30)).

	self assert: (Mapper mapTicketToResponse: ticket) = expectedResponse.

	! !

!testRun: #MapperTest #test02ShouldConvertATicketToTheCorrespondingListOfDictionaries stamp: 'JPF 6/26/2021 13:16:10'!
FAILURE!
!Mapper class methodsFor: 'to response' stamp: 'JPF 6/26/2021 13:21:03' prior: 50931796!
mapTicketToResponse: aTicket
	
	| response |
	response := OrderedCollection new.
	
	aTicket lineItemsDo: [ :lineItem |
		response add: (Dictionary with: ('item'->lineItem item) with: ('total'->lineItem total))
		].
		

	^ response.! !
!Mapper class methodsFor: 'to response' stamp: 'JPF 6/26/2021 13:21:11' prior: 50931874!
mapTicketToResponse: aTicket
	
	| response |
	
	response := OrderedCollection new.
	
	aTicket lineItemsDo: [ :lineItem |
		response add: (Dictionary with: ('item'->lineItem item) with: ('total'->lineItem total))
		].
		
	^ response.! !
!MapperTest methodsFor: 'tests' stamp: 'JPF 6/26/2021 13:21:57' prior: 50931850!
test02ShouldConvertATicketToTheCorrespondingListOfDictionaries

	| ticket expectedResponse |
	
	ticket := Ticket of: (OrderedCollection 
		with: (LineItem of: 'item1' quantity: 2 total: 20)
		with: (LineItem of: 'item2' quantity: 1 total: 30)).
	
	expectedResponse := OrderedCollection
		with: (Dictionary with: ('item'->'item1') with: ('total'->20))	
		with: (Dictionary with: ('item'->'item2') with: ('total'->30)).

	self assert: (Mapper mapTicketToResponse: ticket) = expectedResponse.

	! !

!testRun: #MapperTest #test02ShouldConvertATicketToTheCorrespondingListOfDictionaries stamp: 'JPF 6/26/2021 13:22:02'!
PASSED!

!testRun: #MapperTest #test01ShouldConvertAnEmptyTicketToAnEmptyList stamp: 'JPF 6/26/2021 13:22:05'!
PASSED!
!TusLibrosRestInterface methodsFor: 'handlers' stamp: 'JPF 6/26/2021 13:22:27' prior: 50931728!
handleCheckOutCart: request

	self handle: request with: [	 | cartId ticket response |	
		
		cartId := request fields at: 'cartId'.
		
		ticket := tusLibrosSystemFacade
			checkOutCartIdentifiedAs: cartId asNumber
			withCreditCardNumbered: '1111222211112222'
			ownedBy: 'Juan Ferrino'
			expiringOn: (Month month: 11 year: 2026).
			
		response := ticket
		
		request send200Response: (WebUtils jsonEncode: ticket).
	]! !
!TusLibrosRestInterface methodsFor: 'handlers' stamp: 'JPF 6/26/2021 13:22:43' prior: 50931921!
handleCheckOutCart: request

	self handle: request with: [	 | cartId ticket response |	
		
		cartId := request fields at: 'cartId'.
		
		ticket := tusLibrosSystemFacade
			checkOutCartIdentifiedAs: cartId asNumber
			withCreditCardNumbered: '1111222211112222'
			ownedBy: 'Juan Ferrino'
			expiringOn: (Month month: 11 year: 2026).
			
		response := Mapper mapTicketToResponse: ticket.
		
		request send200Response: (WebUtils jsonEncode: ticket).
	]! !
!TusLibrosRestInterface methodsFor: 'handlers' stamp: 'JPF 6/26/2021 13:24:08' prior: 50931938!
handleCheckOutCart: request

	self handle: request with: [	 | cartId ticket response |	
		
		cartId := request fields at: 'cartId'.
		
		ticket := tusLibrosSystemFacade
			checkOutCartIdentifiedAs: cartId asNumber
			withCreditCardNumbered: '1111222211112222'
			ownedBy: 'Juan Ferrino'
			expiringOn: (Month month: 11 year: 2026).
			
		response := Mapper mapTicketToResponse: ticket.
		
		request send200Response: (WebUtils jsonEncode: response).
	]! !
!MapperTest methodsFor: 'tests' stamp: 'JPF 6/26/2021 13:25:37'!
test01ShouldConvertAnEmptyTicketToAnEmptyArray

	self 
		assert: OrderedCollection new
		equals: (Mapper mapTicketToResponse: (Ticket of: OrderedCollection new)).
	! !

!methodRemoval: MapperTest #test01ShouldConvertAnEmptyTicketToAnEmptyList stamp: 'JPF 6/26/2021 13:25:37'!
test01ShouldConvertAnEmptyTicketToAnEmptyList

	self 
		assert: OrderedCollection new
		equals: (Mapper mapTicketToResponse: (Ticket of: OrderedCollection new)).
	!
!MapperTest methodsFor: 'tests' stamp: 'JPF 6/26/2021 13:25:48' prior: 50931973!
test01ShouldConvertAnEmptyTicketToAnEmptyArray

	self 
		assert: OrderedCollection new
		equals: (Mapper mapTicketToResponse: (Ticket of: Array new)).
	! !
!MapperTest methodsFor: 'tests' stamp: 'JPF 6/26/2021 13:26:00'!
test02ShouldConvertATicketToTheCorrespondingArrayOfDictionaries

	| ticket expectedResponse |
	
	ticket := Ticket of: (OrderedCollection 
		with: (LineItem of: 'item1' quantity: 2 total: 20)
		with: (LineItem of: 'item2' quantity: 1 total: 30)).
	
	expectedResponse := OrderedCollection
		with: (Dictionary with: ('item'->'item1') with: ('total'->20))	
		with: (Dictionary with: ('item'->'item2') with: ('total'->30)).

	self assert: (Mapper mapTicketToResponse: ticket) = expectedResponse.

	! !

!methodRemoval: MapperTest #test02ShouldConvertATicketToTheCorrespondingListOfDictionaries stamp: 'JPF 6/26/2021 13:26:00'!
test02ShouldConvertATicketToTheCorrespondingListOfDictionaries

	| ticket expectedResponse |
	
	ticket := Ticket of: (OrderedCollection 
		with: (LineItem of: 'item1' quantity: 2 total: 20)
		with: (LineItem of: 'item2' quantity: 1 total: 30)).
	
	expectedResponse := OrderedCollection
		with: (Dictionary with: ('item'->'item1') with: ('total'->20))	
		with: (Dictionary with: ('item'->'item2') with: ('total'->30)).

	self assert: (Mapper mapTicketToResponse: ticket) = expectedResponse.

	!
!MapperTest methodsFor: 'tests' stamp: 'JPF 6/26/2021 13:26:12' prior: 50931997!
test02ShouldConvertATicketToTheCorrespondingArrayOfDictionaries

	| ticket expectedResponse |
	
	ticket := Ticket of: (OrderedCollection 
		with: (LineItem of: 'item1' quantity: 2 total: 20)
		with: (LineItem of: 'item2' quantity: 1 total: 30)).
	
	expectedResponse := OrderedCollection
		with: (Dictionary with: ('item'->'item1') with: ('total'->20))	
		with: (Dictionary with: ('item'->'item2') with: ('total'->30)) asArray.

	self assert: (Mapper mapTicketToResponse: ticket) = expectedResponse.

	! !
!Mapper class methodsFor: 'to response' stamp: 'JPF 6/26/2021 13:27:19' prior: 50931885!
mapTicketToResponse: aTicket
	
	| response |
	
	response := OrderedCollection new.
	
	aTicket lineItemsDo: [ :lineItem |
		response add: (Dictionary with: ('item'->lineItem item) with: ('total'->lineItem total))
		].
		
	^ response asArray .! !
!MapperTest methodsFor: 'tests' stamp: 'JPF 6/27/2021 10:05:45' prior: 50932035!
test02ShouldConvertATicketToTheCorrespondingArrayOfDictionaries

	| ticket expectedResponse |
	
	ticket := Ticket of: (OrderedCollection 
		with: (LineItem of: 'item1' quantity: 2 total: 20)
		with: (LineItem of: 'item2' quantity: 1 total: 30)).
	
	expectedResponse := OrderedCollection
		with: (Dictionary with: ('item'->'item1') with: ('quantity'->2) with: ('total'->20))	
		with: (Dictionary with: ('item'->'item2') with: ('quantity'->1) with: ('total'->30)) asArray.

	self assert: (Mapper mapTicketToResponse: ticket) = expectedResponse.

	! !
!LineItem methodsFor: 'accessing' stamp: 'JPF 6/27/2021 10:06:39'!
quantity

	^ quantity! !
!Mapper class methodsFor: 'to response' stamp: 'JPF 6/27/2021 10:07:24' prior: 50932054!
mapTicketToResponse: aTicket
	
	| response |
	
	response := OrderedCollection new.
	
	aTicket lineItemsDo: [ :lineItem |
		response add: (Dictionary
			with: ('item'->lineItem item)
			with: ('quantity'->lineItem item)
			with: ('total'->lineItem total))
		].
		
	^ response asArray .! !

!testRun: #MapperTest #test01ShouldConvertAnEmptyTicketToAnEmptyArray stamp: 'JPF 6/27/2021 10:07:29'!
FAILURE!

!testRun: #MapperTest #test02ShouldConvertATicketToTheCorrespondingArrayOfDictionaries stamp: 'JPF 6/27/2021 10:07:29'!
FAILURE!
!Mapper class methodsFor: 'to response' stamp: 'JPF 6/27/2021 10:07:50' prior: 50932089!
mapTicketToResponse: aTicket
	
	| response |
	
	response := OrderedCollection new.
	
	aTicket lineItemsDo: [ :lineItem |
		response add: (Dictionary
			with: ('item'->lineItem item)
			with: ('quantity'->lineItem quantity)
			with: ('total'->lineItem total))
		].
		
	^ response asArray .! !

!testRun: #MapperTest #test01ShouldConvertAnEmptyTicketToAnEmptyArray stamp: 'JPF 6/27/2021 10:07:59'!
FAILURE!

!testRun: #MapperTest #test02ShouldConvertATicketToTheCorrespondingArrayOfDictionaries stamp: 'JPF 6/27/2021 10:07:59'!
FAILURE!

!testRun: #MapperTest #test01ShouldConvertAnEmptyTicketToAnEmptyArray stamp: 'JPF 6/27/2021 10:08:10'!
FAILURE!
!MapperTest methodsFor: 'tests' stamp: 'JPF 6/27/2021 10:08:50' prior: 50931990!
test01ShouldConvertAnEmptyTicketToAnEmptyArray

	self 
		assert: {}
		equals: (Mapper mapTicketToResponse: (Ticket of: Array new)).
	! !
!MapperTest methodsFor: 'tests' stamp: 'JPF 6/27/2021 10:08:56' prior: 50932132!
test01ShouldConvertAnEmptyTicketToAnEmptyArray

	self 
		assert: {} equals: (Mapper mapTicketToResponse: (Ticket of: Array new)).
	! !

!testRun: #MapperTest #test01ShouldConvertAnEmptyTicketToAnEmptyArray stamp: 'JPF 6/27/2021 10:09:04'!
PASSED!

!testRun: #MapperTest #test02ShouldConvertATicketToTheCorrespondingArrayOfDictionaries stamp: 'JPF 6/27/2021 10:09:04'!
FAILURE!

!testRun: #MapperTest #test02ShouldConvertATicketToTheCorrespondingArrayOfDictionaries stamp: 'JPF 6/27/2021 10:09:04'!
FAILURE!
!MapperTest methodsFor: 'tests' stamp: 'JPF 6/27/2021 10:10:03' prior: 50932065!
test02ShouldConvertATicketToTheCorrespondingArrayOfDictionaries

	| ticket expectedResponse |
	
	ticket := Ticket of: (OrderedCollection 
		with: (LineItem of: 'item1' quantity: 2 total: 20)
		with: (LineItem of: 'item2' quantity: 1 total: 30)).
	
	expectedResponse := (OrderedCollection
		with: (Dictionary with: ('item'->'item1') with: ('quantity'->2) with: ('total'->20))	
		with: (Dictionary with: ('item'->'item2') with: ('quantity'->1) with: ('total'->30))) asArray.

	self assert: (Mapper mapTicketToResponse: ticket) = expectedResponse.

	! !

!testRun: #MapperTest #test01ShouldConvertAnEmptyTicketToAnEmptyArray stamp: 'JPF 6/27/2021 10:10:10'!
PASSED!

!testRun: #MapperTest #test02ShouldConvertATicketToTheCorrespondingArrayOfDictionaries stamp: 'JPF 6/27/2021 10:10:10'!
PASSED!
!TusLibrosSystemFacadeTest methodsFor: 'test - list catalog' stamp: 'JPF 6/27/2021 10:13:10'!
test01shouldReturnTheCatalog

	"catalog := systemFacade listCatalog.
	
	self assert: self catalog "! !

!classDefinition: #TusLibrosSystemFacadeTest category: 'TusLibros-Tests' stamp: 'JPF 6/27/2021 10:13:55'!
TestCase subclass: #TusLibrosSystemFacadeTest
	instanceVariableNames: 'testObjectsFactory clock systemFacade catalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Tests'!
!TusLibrosSystemFacadeTest methodsFor: 'test - list catalog' stamp: 'JPF 6/27/2021 10:13:52' prior: 50932186!
test01shouldReturnTheCatalog

	catalog := systemFacade listCatalog.
	
	self assert: testObjectsFactory defaultCatalog equals: catalog! !

!testRun: #TusLibrosSystemFacadeTest #test01shouldReturnTheCatalog stamp: 'JPF 6/27/2021 10:14:06'!
ERROR!
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'JPF 6/27/2021 10:14:23'!
listCatalog
	self shouldBeImplemented.! !
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'JPF 6/27/2021 10:14:47' prior: 50932214!
listCatalog

	^ catalog copy.! !

!testRun: #TusLibrosSystemFacadeTest #test01shouldReturnTheCatalog stamp: 'JPF 6/27/2021 10:14:55'!
PASSED!
!TusLibrosRestInterface methodsFor: 'initialization' stamp: 'JPF 6/27/2021 10:16:42' prior: 50931333!
initializeWith: aPortNumber

	tusLibrosSystemFacade := TusLibrosDefaultFactory new createFacade.
	
	port:= aPortNumber.
	
	webServer :=
		WebServer new listenOn: self port;
		addService: '/createCart' action:[ :request | self handleCreateCart: request ];
		addService: '/addToCart' action:[ :request | self handleAddToCart: request ];
		addService: '/listCart' action:[ :request | self handleListCart: request ];
		addService: '/listPurchases' action:[ :request | self handleListPurchases: request ];
		addService: '/checkOutCart' action:[ :request | self handleCheckOutCart: request ];
		addService: '/listCatalog' action:[ :request | self handleListCatalog: request ].! !
!TusLibrosRestInterface methodsFor: 'handlers' stamp: 'JPF 6/27/2021 10:17:09'!
handleCatalog: request

	self handle: request with: [	 | clientId password purchases response |	
		
		clientId := request fields at: 'clientId'.
		password := request fields at: 'password'.
		
		purchases := tusLibrosSystemFacade listPurchasesOf: clientId authenticatingWith: password.
		
		response := String streamContents:[ :s| WebUtils jsonMap: purchases on: s].
		
		request send200Response: response.
	]! !
!TusLibrosRestInterface methodsFor: 'handlers' stamp: 'JPF 6/27/2021 10:17:13' prior: 50932251!
handleCatalog: request

	self handle: request with: [	 | clientId password catalog response |	
		
		clientId := request fields at: 'clientId'.
		password := request fields at: 'password'.
		
		catalog := tusLibrosSystemFacade listPurchasesOf: clientId authenticatingWith: password.
		
		response := String streamContents:[ :s| WebUtils jsonMap: catalog on: s].
		
		request send200Response: response.
	]! !
!TusLibrosRestInterface methodsFor: 'handlers' stamp: 'JPF 6/27/2021 10:17:56' prior: 50932267!
handleCatalog: request

	self handle: request with: [	 | catalog response |	
		
		catalog := tusLibrosSystemFacade listCatalog.
		
		response := String streamContents:[ :s| WebUtils jsonMap: catalog on: s].
		
		request send200Response: response.
	]! !

server destroy.!

server := TusLibrosRestInterface listeningOn: 8080.!
!TusLibrosRestInterface methodsFor: 'handlers' stamp: 'JPF 6/27/2021 10:22:29'!
handleListCatalog: request

	self handle: request with: [	 | catalog response |	
		
		catalog := tusLibrosSystemFacade listCatalog.
		
		response := String streamContents:[ :s| WebUtils jsonMap: catalog on: s].
		
		request send200Response: response.
	]! !

!methodRemoval: TusLibrosRestInterface #handleCatalog: stamp: 'JPF 6/27/2021 10:22:33'!
handleCatalog: request

	self handle: request with: [	 | catalog response |	
		
		catalog := tusLibrosSystemFacade listCatalog.
		
		response := String streamContents:[ :s| WebUtils jsonMap: catalog on: s].
		
		request send200Response: response.
	]!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'JPF 6/27/2021 10:30:06'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'JPF 6/27/2021 10:30:06'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'JPF 6/27/2021 10:30:06'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'JPF 6/27/2021 10:30:06'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'JPF 6/27/2021 10:30:06'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'JPF 6/27/2021 10:30:06'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'JPF 6/27/2021 10:30:06'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'JPF 6/27/2021 10:30:06'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'JPF 6/27/2021 10:30:06'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'JPF 6/27/2021 10:30:06'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'JPF 6/27/2021 10:30:06'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'JPF 6/27/2021 10:30:06'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'JPF 6/27/2021 10:30:06'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'JPF 6/27/2021 10:30:06'!
PASSED!

!testRun: #MapperTest #test01ShouldConvertAnEmptyTicketToAnEmptyArray stamp: 'JPF 6/27/2021 10:30:06'!
PASSED!

!testRun: #MapperTest #test02ShouldConvertATicketToTheCorrespondingArrayOfDictionaries stamp: 'JPF 6/27/2021 10:30:06'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'JPF 6/27/2021 10:30:06'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01shouldReturnTheCatalog stamp: 'JPF 6/27/2021 10:30:06'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'JPF 6/27/2021 10:30:06'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'JPF 6/27/2021 10:30:06'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'JPF 6/27/2021 10:30:06'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'JPF 6/27/2021 10:30:06'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'JPF 6/27/2021 10:30:06'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07ListCartOfAnEmptyCartReturnsAnEmptyBag stamp: 'JPF 6/27/2021 10:30:06'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'JPF 6/27/2021 10:30:06'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'JPF 6/27/2021 10:30:06'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CanCheckoutACart stamp: 'JPF 6/27/2021 10:30:06'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'JPF 6/27/2021 10:30:06'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'JPF 6/27/2021 10:30:06'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'JPF 6/27/2021 10:30:06'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'JPF 6/27/2021 10:30:06'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'JPF 6/27/2021 10:30:06'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'JPF 6/27/2021 10:30:06'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'JPF 6/27/2021 10:30:06'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'JPF 6/27/2021 10:30:06'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'JPF 6/27/2021 10:30:06'!
PASSED!
!TusLibrosSystemFacadeTest methodsFor: 'tests - list purchases' stamp: 'JPF 6/27/2021 10:33:49' prior: 50931288!
test14ListPurchasesIncludesBoughtItems

	| cartId purchases |

	cartId := systemFacade createCartFor: self validUser authenticatedWith: self validUserPassword.
	systemFacade add: 2 of: self validBook toCartIdentifiedAs: cartId.
	systemFacade add: 1 of: self anotherValidBook toCartIdentifiedAs: cartId.
	systemFacade
		checkOutCartIdentifiedAs: cartId
		withCreditCardNumbered: '1111222233334444'
		ownedBy: 'Juan Perez'
		expiringOn: testObjectsFactory notExpiredMonthOfYear.

	purchases := systemFacade listPurchasesOf: self validUser authenticatingWith: self validUserPassword.

	self assert: (purchases at: self validBook) equals: 2.
	self assert: (purchases at: self anotherValidBook) equals: 1.
	self assert: purchases total equals: (testObjectsFactory itemSellByTheStorePrice * 2) + testObjectsFactory anotherItemSellByTheStorePrice.! !

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'JPF 6/27/2021 10:34:03'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'JPF 6/27/2021 10:34:03'!
FAILURE!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'JPF 6/27/2021 10:37:31' prior: 50928564!
list: aSale on: salesOrderedByBook

	"Esto es un indicio de que por ahi conviene empezar a pensar en modelar un SaleBook - Hernan"
	| total |
	total := 0.
	aSale lineItemsDo: [ :aLineItem | | oldQuantity newQuantity |
		oldQuantity := salesOrderedByBook at: aLineItem item ifAbsentPut: [ 0 ].
		newQuantity := oldQuantity + aLineItem quantity.
		total := total + aLineItem total.
		salesOrderedByBook at: aLineItem item put: newQuantity ].
	
	salesOrderedByBook total: total.! !

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'JPF 6/27/2021 10:37:54'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01shouldReturnTheCatalog stamp: 'JPF 6/27/2021 10:37:54'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'JPF 6/27/2021 10:37:54'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'JPF 6/27/2021 10:37:54'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'JPF 6/27/2021 10:37:54'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'JPF 6/27/2021 10:37:54'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'JPF 6/27/2021 10:37:54'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07ListCartOfAnEmptyCartReturnsAnEmptyBag stamp: 'JPF 6/27/2021 10:37:54'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'JPF 6/27/2021 10:37:54'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'JPF 6/27/2021 10:37:54'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CanCheckoutACart stamp: 'JPF 6/27/2021 10:37:54'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'JPF 6/27/2021 10:37:54'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'JPF 6/27/2021 10:37:54'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'JPF 6/27/2021 10:37:54'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'JPF 6/27/2021 10:37:54'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'JPF 6/27/2021 10:37:54'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'JPF 6/27/2021 10:37:54'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'JPF 6/27/2021 10:37:54'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'JPF 6/27/2021 10:37:54'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'JPF 6/27/2021 10:37:54'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'JPF 6/27/2021 10:38:09'!
ERROR!

!classDefinition: #PurchasesDetail category: 'TusLibros-Model' stamp: 'JPF 6/27/2021 10:39:51'!
Object subclass: #PurchasesDetail
	instanceVariableNames: 'itemsAndQuantities total'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Model'!
!TusLibrosSystemFacade methodsFor: 'facade protocol' stamp: 'JPF 6/27/2021 10:39:11' prior: 50928542!
listPurchasesOf: aUser authenticatingWith: aPassword

	^self if: aUser authenticatesWith: aPassword do: [ | sales |
		sales := self salesDoneBy: aUser.
		sales
			inject: PurchasesDetail new
			into: [ :salesOrderedByBook :aSale |
				self list: aSale on: salesOrderedByBook.
				salesOrderedByBook ] ]! !

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'JPF 6/27/2021 10:39:59'!
ERROR!
!PurchasesDetail methodsFor: 'as yet unclassified' stamp: 'JPF 6/27/2021 10:40:33'!
at: aString ifAbsentPut: aBlockClosure 
	self shouldBeImplemented.! !
!TusLibrosSystemFacade methodsFor: 'facade protocol' stamp: 'JPF 6/27/2021 10:42:50' prior: 50932588!
listPurchasesOf: aUser authenticatingWith: aPassword

	^self if: aUser authenticatesWith: aPassword do: [ | sales |
		sales := self salesDoneBy: aUser.
		"
		sales
			inject: PurchasesDetail new
			into: [ :salesOrderedByBook :aSale |
				self list: aSale on: salesOrderedByBook.
				salesOrderedByBook ] "
		^ PurchasesDetail for: sales.
			]! !
!PurchasesDetail class methodsFor: 'instance creation' stamp: 'JPF 6/27/2021 10:43:44'!
for: sales

	! !
!PurchasesDetail class methodsFor: 'instance creation' stamp: 'JPF 6/27/2021 10:44:16' prior: 50932624!
for: sales

	^ self new initializeFor: sales.! !
!PurchasesDetail methodsFor: 'as yet unclassified' stamp: 'JPF 6/27/2021 10:44:58'!
initializeFor: sales

	total := 0.
	itemsAndQuantities := Dictionary new.! !
!PurchasesDetail methodsFor: 'as yet unclassified' stamp: 'JPF 6/27/2021 10:45:06' prior: 50932633!
initializeFor: sales

	total := 0.
	itemsAndQuantities := Dictionary new.
	
	! !
!PurchasesDetail methodsFor: 'as yet unclassified' stamp: 'JPF 6/27/2021 10:46:48' prior: 50932639!
initializeFor: sales

	total := 0.
	itemsAndQuantities := Dictionary new.
	
	sales do: [ :aSale | 
		"self list: aSale on: salesOrderedByBook.
		salesOrderedByBook "]
	
	! !
!PurchasesDetail methodsFor: 'as yet unclassified' stamp: 'JPF 6/27/2021 10:48:26'!
list: aSale

	aSale lineItemsDo: [ :aLineItem | | oldQuantity newQuantity |
		oldQuantity := itemsAndQuantities at: aLineItem item ifAbsentPut: [ 0 ].
		newQuantity := oldQuantity + aLineItem quantity.
		total := total + aLineItem total.
		itemsAndQuantities at: aLineItem item put: newQuantity ].! !
!PurchasesDetail methodsFor: 'as yet unclassified' stamp: 'JPF 6/27/2021 10:48:31'!
add: aSale

	aSale lineItemsDo: [ :aLineItem | | oldQuantity newQuantity |
		oldQuantity := itemsAndQuantities at: aLineItem item ifAbsentPut: [ 0 ].
		newQuantity := oldQuantity + aLineItem quantity.
		total := total + aLineItem total.
		itemsAndQuantities at: aLineItem item put: newQuantity ].! !

!methodRemoval: PurchasesDetail #list: stamp: 'JPF 6/27/2021 10:48:37'!
list: aSale

	aSale lineItemsDo: [ :aLineItem | | oldQuantity newQuantity |
		oldQuantity := itemsAndQuantities at: aLineItem item ifAbsentPut: [ 0 ].
		newQuantity := oldQuantity + aLineItem quantity.
		total := total + aLineItem total.
		itemsAndQuantities at: aLineItem item put: newQuantity ].!
!PurchasesDetail methodsFor: 'as yet unclassified' stamp: 'JPF 6/27/2021 10:49:03' prior: 50932645!
initializeFor: sales

	total := 0.
	itemsAndQuantities := Dictionary new.
	
	sales do: [ :aSale | self add: aSale ]
	
	! !
!PurchasesDetail methodsFor: 'as yet unclassified' stamp: 'JPF 6/27/2021 10:49:13' prior: 50932692!
initializeFor: sales

	total := 0.
	itemsAndQuantities := Dictionary new.
	
	sales do: [ :aSale | self add: aSale ].
	
	! !

!methodRemoval: PurchasesDetail #at:ifAbsentPut: stamp: 'JPF 6/27/2021 10:49:26'!
at: aString ifAbsentPut: aBlockClosure 
	self shouldBeImplemented.!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'JPF 6/27/2021 10:50:12'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'JPF 6/27/2021 10:50:12'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'JPF 6/27/2021 10:50:12'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'JPF 6/27/2021 10:50:12'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'JPF 6/27/2021 10:50:12'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'JPF 6/27/2021 10:50:12'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'JPF 6/27/2021 10:50:12'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'JPF 6/27/2021 10:50:12'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'JPF 6/27/2021 10:50:12'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'JPF 6/27/2021 10:50:12'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'JPF 6/27/2021 10:50:12'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'JPF 6/27/2021 10:50:12'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'JPF 6/27/2021 10:50:12'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'JPF 6/27/2021 10:50:12'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'JPF 6/27/2021 10:50:12'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01shouldReturnTheCatalog stamp: 'JPF 6/27/2021 10:50:12'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'JPF 6/27/2021 10:50:12'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'JPF 6/27/2021 10:50:12'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'JPF 6/27/2021 10:50:12'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'JPF 6/27/2021 10:50:12'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'JPF 6/27/2021 10:50:12'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07ListCartOfAnEmptyCartReturnsAnEmptyBag stamp: 'JPF 6/27/2021 10:50:12'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'JPF 6/27/2021 10:50:12'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'JPF 6/27/2021 10:50:12'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CanCheckoutACart stamp: 'JPF 6/27/2021 10:50:12'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'JPF 6/27/2021 10:50:12'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'JPF 6/27/2021 10:50:12'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'JPF 6/27/2021 10:50:12'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'JPF 6/27/2021 10:50:12'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'JPF 6/27/2021 10:50:12'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'JPF 6/27/2021 10:50:12'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'JPF 6/27/2021 10:50:12'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'JPF 6/27/2021 10:50:12'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'JPF 6/27/2021 10:50:12'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test10CanCheckoutACart stamp: 'JPF 6/27/2021 10:50:20'!
ERROR!
!TusLibrosSystemFacadeTest methodsFor: 'tests - checkout' stamp: 'JPF 6/27/2021 10:51:43' prior: 50929144!
test10CanCheckoutACart

	| cartId purchases |

	cartId := systemFacade createCartFor: self validUser authenticatedWith: self validUserPassword.
	systemFacade add: 1 of: self validBook toCartIdentifiedAs: cartId.
	systemFacade
		checkOutCartIdentifiedAs: cartId
		withCreditCardNumbered: testObjectsFactory notExpiredCreditCardNumber
		ownedBy: testObjectsFactory notExpiredCreditCardOwner
		expiringOn: testObjectsFactory notExpiredMonthOfYear.

	purchases := systemFacade listPurchasesOf: self validUser authenticatingWith: self validUserPassword.

	self assert: (purchases at: self validBook) equals: 1.
	self assert: (purchases total) equals: testObjectsFactory itemSellByTheStorePrice.
! !

!testRun: #TusLibrosSystemFacadeTest #test10CanCheckoutACart stamp: 'JPF 6/27/2021 10:51:50'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test10CanCheckoutACart stamp: 'JPF 6/27/2021 10:52:22'!
ERROR!
!PurchasesDetail methodsFor: 'accessing' stamp: 'JPF 6/27/2021 10:53:48' overrides: 16880774!
at: lineItem! !
!PurchasesDetail methodsFor: 'accessing' stamp: 'JPF 6/27/2021 10:54:35' prior: 50932866 overrides: 16880774!
at: item

	^ itemsAndQuantities at: item! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'JPF 6/27/2021 10:54:45'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'JPF 6/27/2021 10:54:45'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'JPF 6/27/2021 10:54:45'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'JPF 6/27/2021 10:54:45'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'JPF 6/27/2021 10:54:45'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'JPF 6/27/2021 10:54:45'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'JPF 6/27/2021 10:54:45'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'JPF 6/27/2021 10:54:45'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'JPF 6/27/2021 10:54:45'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'JPF 6/27/2021 10:54:45'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'JPF 6/27/2021 10:54:45'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'JPF 6/27/2021 10:54:45'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'JPF 6/27/2021 10:54:45'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'JPF 6/27/2021 10:54:45'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'JPF 6/27/2021 10:54:45'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01shouldReturnTheCatalog stamp: 'JPF 6/27/2021 10:54:45'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'JPF 6/27/2021 10:54:45'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'JPF 6/27/2021 10:54:45'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'JPF 6/27/2021 10:54:45'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'JPF 6/27/2021 10:54:45'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'JPF 6/27/2021 10:54:45'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07ListCartOfAnEmptyCartReturnsAnEmptyBag stamp: 'JPF 6/27/2021 10:54:45'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'JPF 6/27/2021 10:54:45'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'JPF 6/27/2021 10:54:45'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CanCheckoutACart stamp: 'JPF 6/27/2021 10:54:45'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'JPF 6/27/2021 10:54:45'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'JPF 6/27/2021 10:54:45'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'JPF 6/27/2021 10:54:45'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'JPF 6/27/2021 10:54:45'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'JPF 6/27/2021 10:54:45'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'JPF 6/27/2021 10:54:45'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'JPF 6/27/2021 10:54:45'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'JPF 6/27/2021 10:54:45'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'JPF 6/27/2021 10:54:45'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test10CanCheckoutACart stamp: 'JPF 6/27/2021 10:54:58'!
ERROR!
!PurchasesDetail methodsFor: 'accessing' stamp: 'JPF 6/27/2021 10:55:09'!
total
	self shouldBeImplemented.
	^total! !
!PurchasesDetail methodsFor: 'accessing' stamp: 'JPF 6/27/2021 10:55:14' prior: 50932997!
total
	
	^total! !

!testRun: #TusLibrosSystemFacadeTest #test10CanCheckoutACart stamp: 'JPF 6/27/2021 10:55:17'!
FAILURE!
!TusLibrosSystemFacadeTest methodsFor: 'tests - checkout' stamp: 'JPF 6/27/2021 10:55:51' prior: 50932835!
test10CanCheckoutACart

	| cartId purchases |

	cartId := systemFacade createCartFor: self validUser authenticatedWith: self validUserPassword.
	systemFacade add: 1 of: self validBook toCartIdentifiedAs: cartId.
	systemFacade
		checkOutCartIdentifiedAs: cartId
		withCreditCardNumbered: testObjectsFactory notExpiredCreditCardNumber
		ownedBy: testObjectsFactory notExpiredCreditCardOwner
		expiringOn: testObjectsFactory notExpiredMonthOfYear.

	purchases := systemFacade listPurchasesOf: self validUser authenticatingWith: self validUserPassword.

	self assert: 1 equals: (purchases at: self validBook).
	self assert: (purchases total) equals: testObjectsFactory itemSellByTheStorePrice.
! !
!TusLibrosSystemFacadeTest methodsFor: 'tests - checkout' stamp: 'JPF 6/27/2021 10:56:07' prior: 50933010!
test10CanCheckoutACart

	| cartId purchases |

	cartId := systemFacade createCartFor: self validUser authenticatedWith: self validUserPassword.
	systemFacade add: 1 of: self validBook toCartIdentifiedAs: cartId.
	systemFacade
		checkOutCartIdentifiedAs: cartId
		withCreditCardNumbered: testObjectsFactory notExpiredCreditCardNumber
		ownedBy: testObjectsFactory notExpiredCreditCardOwner
		expiringOn: testObjectsFactory notExpiredMonthOfYear.

	purchases := systemFacade listPurchasesOf: self validUser authenticatingWith: self validUserPassword.

	self assert: 1 equals: (purchases at: self validBook).
	self assert: testObjectsFactory itemSellByTheStorePrice equals: (purchases total).
! !

!testRun: #TusLibrosSystemFacadeTest #test10CanCheckoutACart stamp: 'JPF 6/27/2021 10:56:25'!
FAILURE!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'JPF 6/27/2021 10:56:52'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'JPF 6/27/2021 10:56:52'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'JPF 6/27/2021 10:56:52'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'JPF 6/27/2021 10:56:52'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'JPF 6/27/2021 10:56:52'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'JPF 6/27/2021 10:56:52'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'JPF 6/27/2021 10:56:52'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'JPF 6/27/2021 10:56:52'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'JPF 6/27/2021 10:56:52'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'JPF 6/27/2021 10:56:52'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'JPF 6/27/2021 10:56:52'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'JPF 6/27/2021 10:56:52'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'JPF 6/27/2021 10:56:52'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'JPF 6/27/2021 10:56:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'JPF 6/27/2021 10:56:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01shouldReturnTheCatalog stamp: 'JPF 6/27/2021 10:56:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'JPF 6/27/2021 10:56:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'JPF 6/27/2021 10:56:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'JPF 6/27/2021 10:56:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'JPF 6/27/2021 10:56:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'JPF 6/27/2021 10:56:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07ListCartOfAnEmptyCartReturnsAnEmptyBag stamp: 'JPF 6/27/2021 10:56:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'JPF 6/27/2021 10:56:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'JPF 6/27/2021 10:56:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CanCheckoutACart stamp: 'JPF 6/27/2021 10:56:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'JPF 6/27/2021 10:56:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'JPF 6/27/2021 10:56:52'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'JPF 6/27/2021 10:56:52'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'JPF 6/27/2021 10:56:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'JPF 6/27/2021 10:56:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'JPF 6/27/2021 10:56:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'JPF 6/27/2021 10:56:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'JPF 6/27/2021 10:56:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'JPF 6/27/2021 10:56:52'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'JPF 6/27/2021 10:56:58'!
ERROR!
!PurchasesDetail methodsFor: 'accessing' stamp: 'JPF 6/27/2021 10:57:21'!
isEmpty
	self shouldBeImplemented.! !
!PurchasesDetail methodsFor: 'accessing' stamp: 'JPF 6/27/2021 10:57:39' prior: 50933187!
isEmpty
	
	^ itemsAndQuantities isEmpty! !

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'JPF 6/27/2021 10:57:43'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'JPF 6/27/2021 10:57:45'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'JPF 6/27/2021 10:57:48'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'JPF 6/27/2021 10:57:53'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'JPF 6/27/2021 10:57:53'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'JPF 6/27/2021 10:57:53'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'JPF 6/27/2021 10:57:53'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'JPF 6/27/2021 10:57:53'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'JPF 6/27/2021 10:57:53'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'JPF 6/27/2021 10:57:53'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'JPF 6/27/2021 10:57:53'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'JPF 6/27/2021 10:57:53'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'JPF 6/27/2021 10:57:53'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'JPF 6/27/2021 10:57:53'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'JPF 6/27/2021 10:57:53'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'JPF 6/27/2021 10:57:53'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'JPF 6/27/2021 10:57:53'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'JPF 6/27/2021 10:57:53'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01shouldReturnTheCatalog stamp: 'JPF 6/27/2021 10:57:53'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'JPF 6/27/2021 10:57:53'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'JPF 6/27/2021 10:57:53'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'JPF 6/27/2021 10:57:53'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'JPF 6/27/2021 10:57:53'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'JPF 6/27/2021 10:57:53'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07ListCartOfAnEmptyCartReturnsAnEmptyBag stamp: 'JPF 6/27/2021 10:57:53'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'JPF 6/27/2021 10:57:53'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'JPF 6/27/2021 10:57:53'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CanCheckoutACart stamp: 'JPF 6/27/2021 10:57:53'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'JPF 6/27/2021 10:57:53'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'JPF 6/27/2021 10:57:53'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'JPF 6/27/2021 10:57:53'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'JPF 6/27/2021 10:57:53'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'JPF 6/27/2021 10:57:53'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'JPF 6/27/2021 10:57:53'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'JPF 6/27/2021 10:57:53'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'JPF 6/27/2021 10:57:53'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'JPF 6/27/2021 10:57:53'!
PASSED!
!MapperTest methodsFor: 'tests - map purchases detail' stamp: 'JPF 6/27/2021 11:03:37'!
test01ShouldConvertAnEmptyPurchasesDetailToResponseWithTotalZero

	| emptyPurchasesDetail expectedResponse |
	expectedResponse := Dictionary with: ('items'->{}) with: ('total'->0).
	emptyPurchasesDetail := PurchasesDetail with: OrderedCollection new.
	
	self 
		assert: expectedResponse 
		equals:  (Mapper mapPurchasesDetailToResponse: emptyPurchasesDetail).
	! !
!MapperTest methodsFor: 'tests - map purchases detail' stamp: 'JPF 6/27/2021 11:03:46' prior: 50933327!
test01ShouldConvertAnEmptyPurchasesDetailToResponseWithTotalZero

	| emptyPurchasesDetail expectedResponse |
	
	expectedResponse := Dictionary with: ('items'->{}) with: ('total'->0).
	emptyPurchasesDetail := PurchasesDetail with: OrderedCollection new.
	
	self 
		assert: expectedResponse 
		equals:  (Mapper mapPurchasesDetailToResponse: emptyPurchasesDetail).
	! !
!MapperTest methodsFor: 'tests - map purchases detail' stamp: 'JPF 6/27/2021 11:03:53' prior: 50933342!
test01ShouldConvertAnEmptyPurchasesDetailToResponseWithTotalZero

	| emptyPurchasesDetail expectedResponse |
	
	expectedResponse := Dictionary with: ('items'->{}) with: ('total'->0).
	emptyPurchasesDetail := PurchasesDetail with: OrderedCollection new.
	
	self 
		assert: expectedResponse 
		equals: (Mapper mapPurchasesDetailToResponse: emptyPurchasesDetail).
	! !

!testRun: #MapperTest #test01ShouldConvertAnEmptyPurchasesDetailToResponseWithTotalZero stamp: 'JPF 6/27/2021 11:03:54'!
ERROR!
!MapperTest methodsFor: 'tests - map purchases detail' stamp: 'JPF 6/27/2021 11:04:09' prior: 50933357!
test01ShouldConvertAnEmptyPurchasesDetailToResponseWithTotalZero

	| emptyPurchasesDetail expectedResponse |
	
	expectedResponse := Dictionary with: ('items'->{}) with: ('total'->0).
	emptyPurchasesDetail := PurchasesDetail for: OrderedCollection new.
	
	self 
		assert: expectedResponse 
		equals: (Mapper mapPurchasesDetailToResponse: emptyPurchasesDetail).
	! !

!testRun: #MapperTest #test01ShouldConvertAnEmptyPurchasesDetailToResponseWithTotalZero stamp: 'JPF 6/27/2021 11:04:10'!
ERROR!
!Mapper class methodsFor: 'mapping' stamp: 'JPF 6/27/2021 11:04:21'!
mapPurchasesDetailToResponse: aPurchasesDetail 
	self shouldBeImplemented.! !
!Mapper class methodsFor: 'mapping' stamp: 'JPF 6/27/2021 11:05:14' prior: 50933394!
mapPurchasesDetailToResponse: aPurchasesDetail

	^ Dictionary with: ('items'->{} with: ('total'->0)).! !

!testRun: #MapperTest #test01ShouldConvertAnEmptyPurchasesDetailToResponseWithTotalZero stamp: 'JPF 6/27/2021 11:05:16'!
ERROR!
!Mapper class methodsFor: 'mapping' stamp: 'JPF 6/27/2021 11:05:35' prior: 50933400!
mapPurchasesDetailToResponse: aPurchasesDetail

	^ Dictionary with: ('items'->{}) with: ('total'->0).! !

!testRun: #MapperTest #test01ShouldConvertAnEmptyPurchasesDetailToResponseWithTotalZero stamp: 'JPF 6/27/2021 11:05:37'!
PASSED!

!testRun: #MapperTest #test01ShouldConvertAnEmptyPurchasesDetailToResponseWithTotalZero stamp: 'JPF 6/27/2021 11:05:37'!
PASSED!

!testRun: #MapperTest #test01ShouldConvertAnEmptyTicketToAnEmptyArray stamp: 'JPF 6/27/2021 11:05:37'!
PASSED!

!testRun: #MapperTest #test02ShouldConvertATicketToTheCorrespondingArrayOfDictionaries stamp: 'JPF 6/27/2021 11:05:37'!
PASSED!
!MapperTest methodsFor: 'tests - map purchases detail' stamp: 'JPF 6/27/2021 11:09:59'!
test01ShouldConvertAPurchasesDetailToResponseWithItemsAndTotal

	| emptyPurchasesDetail expectedResponse |
	
	"ticket := Ticket of: (OrderedCollection with:"
	
	expectedResponse := Dictionary with: ('items'->{}) with: ('total'->0).
	emptyPurchasesDetail := PurchasesDetail for: OrderedCollection new.
	
	self 
		assert: expectedResponse 
		equals: (Mapper mapPurchasesDetailToResponse: emptyPurchasesDetail).
	! !
!MapperTest methodsFor: 'tests - map ticket' stamp: 'JPF 6/27/2021 11:12:47' prior: 50932158!
test02ShouldConvertATicketToTheCorrespondingArrayOfDictionaries

	| expectedResponse |
	
	
	
	expectedResponse := (OrderedCollection
		with: (Dictionary with: ('item'->'item1') with: ('quantity'->2) with: ('total'->20))	
		with: (Dictionary with: ('item'->'item2') with: ('quantity'->1) with: ('total'->30))) asArray.

	"self assert: (Mapper mapTicketToResponse: ticket) = expectedResponse."

	! !

MapperTest class
	instanceVariableNames: 'ticket'!

!classDefinition: 'MapperTest class' category: 'TusLibros-Server' stamp: 'JPF 6/27/2021 11:13:11'!
MapperTest class
	instanceVariableNames: 'ticket'!

!classDefinition: #MapperTest category: 'TusLibros-Server' stamp: 'JPF 6/27/2021 11:13:29'!
TestCase subclass: #MapperTest
	instanceVariableNames: 'port webServer tusLibrosSystemFacade ticket'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Server'!
!MapperTest methodsFor: 'setUp' stamp: 'JPF 6/27/2021 11:13:26' overrides: 16927572!
setUp

	ticket := Ticket of: (OrderedCollection 
		with: (LineItem of: 'item1' quantity: 2 total: 20)
		with: (LineItem of: 'item2' quantity: 1 total: 30)).! !
!MapperTest methodsFor: 'tests - map ticket' stamp: 'JPF 6/27/2021 11:14:17' prior: 50933448!
test02ShouldConvertATicketToTheCorrespondingArrayOfDictionaries

	| expectedResponse |
	
	expectedResponse := (OrderedCollection
		with: (Dictionary with: ('item'->'item1') with: ('quantity'->2) with: ('total'->20))	
		with: (Dictionary with: ('item'->'item2') with: ('quantity'->1) with: ('total'->30))) asArray.

	self assert: (Mapper mapTicketToResponse: ticket) = expectedResponse.

	! !

!classDefinition: #MapperTest category: 'TusLibros-Server' stamp: 'JPF 6/27/2021 11:14:49'!
TestCase subclass: #MapperTest
	instanceVariableNames: 'port webServer tusLibrosSystemFacade ticket lineItem1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Server'!

!classDefinition: #MapperTest category: 'TusLibros-Server' stamp: 'JPF 6/27/2021 11:15:42'!
TestCase subclass: #MapperTest
	instanceVariableNames: 'port webServer tusLibrosSystemFacade ticket lineItem1 lineItem2'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Server'!
!MapperTest methodsFor: 'setUp' stamp: 'JPF 6/27/2021 11:15:41' prior: 50933478 overrides: 16927572!
setUp

	lineItem1 := LineItem of: 'item1' quantity: 2 total: 20.
	lineItem2 := LineItem of: 'item2' quantity: 1 total: 30.
	ticket := Ticket of: (OrderedCollection with: lineItem1 with: lineItem2).! !
!MapperTest methodsFor: 'tests - map ticket' stamp: 'JPF 6/27/2021 11:16:55' prior: 50933486!
test02ShouldConvertATicketToTheCorrespondingArrayOfDictionaries

	| expectedResponse |
	
	expectedResponse := (OrderedCollection
		with: (Dictionary with: ('item'->lineItem1 item) with: ('quantity'->lineItem1 quantity) with: ('total'->lineItem1 total))	
		with: (Dictionary with: ('item'->lineItem2 item) with: ('quantity'->lineItem2 quantity) with: ('total'->lineItem2 total))) asArray.

	self assert: (Mapper mapTicketToResponse: ticket) = expectedResponse.

	! !
!MapperTest methodsFor: 'tests - map ticket' stamp: 'JPF 6/27/2021 11:17:48' prior: 50933530!
test02ShouldConvertATicketToTheCorrespondingArrayOfDictionaries

	| expectedResponse |
	
	expectedResponse := (OrderedCollection
		with: (Dictionary
			with: ('item'->lineItem1 item)
			with: ('quantity'->lineItem1 quantity)
			with: ('total'->lineItem1 total))	
		with: (Dictionary 
			with: ('item'->lineItem2 item) 
			with: ('quantity'->lineItem2 quantity) 
			with: ('total'->lineItem2 total))
			) asArray.

	self assert: (Mapper mapTicketToResponse: ticket) = expectedResponse.

	! !
!MapperTest methodsFor: 'tests - map purchases detail' stamp: 'JPF 6/27/2021 11:18:25'!
test02ShouldConvertAPurchasesDetailToResponseWithItemsAndTotal

	| emptyPurchasesDetail expectedResponse |
	
	"ticket := Ticket of: (OrderedCollection with:"
	
	expectedResponse := Dictionary with: ('items'->{}) with: ('total'->0).
	emptyPurchasesDetail := PurchasesDetail for: OrderedCollection new.
	
	self 
		assert: expectedResponse 
		equals: (Mapper mapPurchasesDetailToResponse: emptyPurchasesDetail).
	! !

!methodRemoval: MapperTest #test01ShouldConvertAPurchasesDetailToResponseWithItemsAndTotal stamp: 'JPF 6/27/2021 11:18:25'!
test01ShouldConvertAPurchasesDetailToResponseWithItemsAndTotal

	| emptyPurchasesDetail expectedResponse |
	
	"ticket := Ticket of: (OrderedCollection with:"
	
	expectedResponse := Dictionary with: ('items'->{}) with: ('total'->0).
	emptyPurchasesDetail := PurchasesDetail for: OrderedCollection new.
	
	self 
		assert: expectedResponse 
		equals: (Mapper mapPurchasesDetailToResponse: emptyPurchasesDetail).
	!
!MapperTest methodsFor: 'tests - map purchases detail' stamp: 'JPF 6/27/2021 11:18:33' prior: 50933567!
test02ShouldConvertAPurchasesDetailToResponseWithItemsAndTotal

	| emptyPurchasesDetail expectedResponse |
	
	expectedResponse := Dictionary with: ('items'->{}) with: ('total'->0).
	emptyPurchasesDetail := PurchasesDetail for: OrderedCollection new.
	
	self 
		assert: expectedResponse 
		equals: (Mapper mapPurchasesDetailToResponse: emptyPurchasesDetail).
	! !
!MapperTest methodsFor: 'tests - map purchases detail' stamp: 'JPF 6/27/2021 11:18:58' prior: 50933600!
test02ShouldConvertAPurchasesDetailToResponseWithItemsAndTotal

	| purchasesDetail expectedResponse |
	
	expectedResponse := Dictionary with: ('items'->{}) with: ('total'->0).
	purchasesDetail := PurchasesDetail for: OrderedCollection new.
	
	self 
		assert: expectedResponse 
		equals: (Mapper mapPurchasesDetailToResponse: purchasesDetail).
	! !
!MapperTest methodsFor: 'tests - map purchases detail' stamp: 'JPF 6/27/2021 11:20:11' prior: 50933615!
test02ShouldConvertAPurchasesDetailToResponseWithItemsAndTotal

	| purchasesDetail expectedResponse |
	
	expectedResponse := Dictionary with: ('items'->{}) with: ('total'->0).
	purchasesDetail := PurchasesDetail
		for: (OrderedCollection with: (Sale doneBy: 'client' certifiedWith: ticket)).
	
	self 
		assert: expectedResponse 
		equals: (Mapper mapPurchasesDetailToResponse: purchasesDetail).
	! !
!MapperTest methodsFor: 'tests - map purchases detail' stamp: 'JPF 6/27/2021 11:22:16' prior: 50933630!
test02ShouldConvertAPurchasesDetailToResponseWithItemsAndTotal

	| purchasesDetail expectedResponse expectedItems |
	
	expectedItems := OrderedCollection
		with: 1.
	
	expectedResponse := Dictionary 
		with: ('items'->expectedItems) with: ('total'->0).
	
	purchasesDetail := PurchasesDetail
		for: (OrderedCollection with: (Sale doneBy: 'client' certifiedWith: ticket)).
	
	self 
		assert: expectedResponse 
		equals: (Mapper mapPurchasesDetailToResponse: purchasesDetail).
	! !
!MapperTest methodsFor: 'tests - map purchases detail' stamp: 'JPF 6/27/2021 11:22:53' prior: 50933646!
test02ShouldConvertAPurchasesDetailToResponseWithItemsAndTotal

	| purchasesDetail expectedResponse expectedItems |
	
	expectedItems := (OrderedCollection
		with: (Dictionary
			with: ('item'->lineItem1 item)
			with: ('quantity'->lineItem1 quantity)
			with: ('total'->lineItem1 total))	
		with: (Dictionary 
			with: ('item'->lineItem2 item) 
			with: ('quantity'->lineItem2 quantity) 
			with: ('total'->lineItem2 total))
			) asArray.
	
	expectedResponse := Dictionary 
		with: ('items'->expectedItems) with: ('total'->0).
	
	purchasesDetail := PurchasesDetail
		for: (OrderedCollection with: (Sale doneBy: 'client' certifiedWith: ticket)).
	
	self 
		assert: expectedResponse 
		equals: (Mapper mapPurchasesDetailToResponse: purchasesDetail).
	! !
!MapperTest methodsFor: 'tests - map purchases detail' stamp: 'JPF 6/27/2021 11:23:00' prior: 50933665!
test02ShouldConvertAPurchasesDetailToResponseWithItemsAndTotal

	| purchasesDetail expectedResponse expectedItems |
	
	expectedItems := (OrderedCollection
		with: (Dictionary
			with: ('item'->lineItem1 item)
			with: ('quantity'->lineItem1 quantity)
			with: ('total'->lineItem1 total))	
		with: (Dictionary 
			with: ('item'->lineItem2 item) 
			with: ('quantity'->lineItem2 quantity) 
			with: ('total'->lineItem2 total))
			) asArray.
	
	expectedResponse := Dictionary with: ('items'->expectedItems) with: ('total'->0).
	
	purchasesDetail := PurchasesDetail
		for: (OrderedCollection with: (Sale doneBy: 'client' certifiedWith: ticket)).
	
	self 
		assert: expectedResponse 
		equals: (Mapper mapPurchasesDetailToResponse: purchasesDetail).
	! !
!MapperTest methodsFor: 'tests - map purchases detail' stamp: 'JPF 6/27/2021 11:23:53' prior: 50933692!
test02ShouldConvertAPurchasesDetailToResponseWithItemsAndTotal

	| purchasesDetail expectedResponse expectedItems |
	
	expectedItems := (OrderedCollection
		with: (Dictionary
			with: ('item'->lineItem1 item)
			with: ('quantity'->lineItem1 quantity)
			with: ('total'->lineItem1 total))	
		with: (Dictionary 
			with: ('item'->lineItem2 item) 
			with: ('quantity'->lineItem2 quantity) 
			with: ('total'->lineItem2 total))
			) asArray.
	
	expectedResponse := Dictionary 
		with: ('items'->expectedItems)
		with: ('total'->(lineItem1 total + lineItem2 total)).
	
	purchasesDetail := PurchasesDetail
		for: (OrderedCollection with: (Sale doneBy: 'client' certifiedWith: ticket)).
	
	self 
		assert: expectedResponse 
		equals: (Mapper mapPurchasesDetailToResponse: purchasesDetail).
	! !

!testRun: #MapperTest #test02ShouldConvertAPurchasesDetailToResponseWithItemsAndTotal stamp: 'JPF 6/27/2021 11:23:58'!
FAILURE!
!Mapper class methodsFor: 'mapping' stamp: 'JPF 6/27/2021 11:24:47' prior: 50933410!
mapPurchasesDetailToResponse: aPurchasesDetail

	^ Dictionary with: ('items'->{}) with: ('total'->aPurchasesDetail total).! !
!MapperTest methodsFor: 'tests - map ticket' stamp: 'JPF 6/27/2021 11:25:13' prior: 50933548!
test02ShouldConvertATicketToTheCorrespondingArrayOfDictionaries

	| expectedResponse |
	
	expectedResponse := (OrderedCollection
		with: (Dictionary
			with: ('item'->lineItem1 item)
			with: ('quantity'->lineItem1 quantity))	
		with: (Dictionary 
			with: ('item'->lineItem2 item) 
			with: ('quantity'->lineItem2 quantity))
			) asArray.

	self assert: (Mapper mapTicketToResponse: ticket) = expectedResponse.

	! !
!Mapper class methodsFor: 'mapping' stamp: 'JPF 6/27/2021 11:29:17' prior: 50933751!
mapPurchasesDetailToResponse: aPurchasesDetail

	| items |
	items := OrderedCollection new.
	aPurchasesDetail itemsAndQuantitiesDo: [ :itemAndQuantity |
		items add: (Dictionary with: ('item'->itemAndQuantity key) with: ('quantity'->itemAndQuantity value)) ].

	^ Dictionary with: ('items'->{}) with: ('total'->aPurchasesDetail total).! !
!Mapper class methodsFor: 'mapping' stamp: 'JPF 6/27/2021 11:29:43' prior: 50933774!
mapPurchasesDetailToResponse: aPurchasesDetail

	| items |
	
	items := OrderedCollection new.
	aPurchasesDetail itemsAndQuantitiesDo: [ :itemAndQuantity |
		items add: (Dictionary
			with: ('item'->itemAndQuantity key)
			with: ('quantity'->itemAndQuantity value)) ].

	^ Dictionary with: ('items'->items) with: ('total'->aPurchasesDetail total).! !

!testRun: #MapperTest #test01ShouldConvertAnEmptyPurchasesDetailToResponseWithTotalZero stamp: 'JPF 6/27/2021 11:29:59'!
ERROR!

!testRun: #MapperTest #test01ShouldConvertAnEmptyTicketToAnEmptyArray stamp: 'JPF 6/27/2021 11:29:59'!
PASSED!

!testRun: #MapperTest #test02ShouldConvertAPurchasesDetailToResponseWithItemsAndTotal stamp: 'JPF 6/27/2021 11:29:59'!
ERROR!

!testRun: #MapperTest #test02ShouldConvertATicketToTheCorrespondingArrayOfDictionaries stamp: 'JPF 6/27/2021 11:29:59'!
FAILURE!

!testRun: #MapperTest #test02ShouldConvertATicketToTheCorrespondingArrayOfDictionaries stamp: 'JPF 6/27/2021 11:30:13'!
FAILURE!
!MapperTest methodsFor: 'tests - map purchases detail' stamp: 'JPF 6/27/2021 11:30:43' prior: 50933719!
test02ShouldConvertAPurchasesDetailToResponseWithItemsAndTotal

	| purchasesDetail expectedResponse expectedItems |
	
	expectedItems := (OrderedCollection
		with: (Dictionary
			with: ('item'->lineItem1 item)
			with: ('quantity'->lineItem1 quantity))	
		with: (Dictionary 
			with: ('item'->lineItem2 item) 
			with: ('quantity'->lineItem2 quantity))
			) asArray.
	
	expectedResponse := Dictionary 
		with: ('items'->expectedItems)
		with: ('total'->(lineItem1 total + lineItem2 total)).
	
	purchasesDetail := PurchasesDetail
		for: (OrderedCollection with: (Sale doneBy: 'client' certifiedWith: ticket)).
	
	self 
		assert: expectedResponse 
		equals: (Mapper mapPurchasesDetailToResponse: purchasesDetail).
	! !
!MapperTest methodsFor: 'tests - map ticket' stamp: 'JPF 6/27/2021 11:31:13' prior: 50933758!
test02ShouldConvertATicketToTheCorrespondingArrayOfDictionaries

	| expectedResponse |
	
	expectedResponse := (OrderedCollection
		with: (Dictionary
			with: ('item'->lineItem1 item)
			with: ('quantity'->lineItem1 quantity)
			with: ('total'->lineItem1 total))	
		with: (Dictionary 
			with: ('item'->lineItem2 item) 
			with: ('quantity'->lineItem2 quantity)
			with: ('total'->lineItem2 total))
			) asArray.

	self assert: (Mapper mapTicketToResponse: ticket) = expectedResponse.

	! !

!testRun: #MapperTest #test01ShouldConvertAnEmptyPurchasesDetailToResponseWithTotalZero stamp: 'JPF 6/27/2021 11:31:16'!
ERROR!

!testRun: #MapperTest #test01ShouldConvertAnEmptyTicketToAnEmptyArray stamp: 'JPF 6/27/2021 11:31:16'!
PASSED!

!testRun: #MapperTest #test02ShouldConvertAPurchasesDetailToResponseWithItemsAndTotal stamp: 'JPF 6/27/2021 11:31:16'!
ERROR!

!testRun: #MapperTest #test02ShouldConvertATicketToTheCorrespondingArrayOfDictionaries stamp: 'JPF 6/27/2021 11:31:16'!
PASSED!

!testRun: #MapperTest #test01ShouldConvertAnEmptyPurchasesDetailToResponseWithTotalZero stamp: 'JPF 6/27/2021 11:31:22'!
ERROR!
!PurchasesDetail methodsFor: 'accessing' stamp: 'JPF 6/27/2021 11:31:32'!
itemsAndQuantitiesDo: aBlockClosure 
	self shouldBeImplemented.! !
!PurchasesDetail methodsFor: 'accessing' stamp: 'JPF 6/27/2021 11:32:08' prior: 50933886!
itemsAndQuantitiesDo: aBlockClosure 
	
	itemsAndQuantities associationsDo: aBlockClosure! !

!testRun: #MapperTest #test01ShouldConvertAnEmptyPurchasesDetailToResponseWithTotalZero stamp: 'JPF 6/27/2021 11:32:12'!
FAILURE!
!Mapper class methodsFor: 'mapping' stamp: 'JPF 6/27/2021 11:33:06' prior: 50933788!
mapPurchasesDetailToResponse: aPurchasesDetail

	| items |
	
	items := OrderedCollection new.
	aPurchasesDetail itemsAndQuantitiesDo: [ :itemAndQuantity |
		items add: (Dictionary
			with: ('item'->itemAndQuantity key)
			with: ('quantity'->itemAndQuantity value)) ].

	^ Dictionary with: ('items'->items asArray) with: ('total'->aPurchasesDetail total).! !

!testRun: #MapperTest #test01ShouldConvertAnEmptyPurchasesDetailToResponseWithTotalZero stamp: 'JPF 6/27/2021 11:33:16'!
PASSED!

!testRun: #MapperTest #test01ShouldConvertAnEmptyTicketToAnEmptyArray stamp: 'JPF 6/27/2021 11:33:16'!
PASSED!

!testRun: #MapperTest #test02ShouldConvertAPurchasesDetailToResponseWithItemsAndTotal stamp: 'JPF 6/27/2021 11:33:16'!
FAILURE!

!testRun: #MapperTest #test02ShouldConvertATicketToTheCorrespondingArrayOfDictionaries stamp: 'JPF 6/27/2021 11:33:16'!
PASSED!

!testRun: #MapperTest #test02ShouldConvertAPurchasesDetailToResponseWithItemsAndTotal stamp: 'JPF 6/27/2021 11:33:16'!
FAILURE!
!MapperTest methodsFor: 'tests - map purchases detail' stamp: 'JPF 6/27/2021 11:34:31' prior: 50933822!
test02ShouldConvertAPurchasesDetailToResponseWithItemsAndTotal

	| purchasesDetail expectedResponse expectedItems actualResponse |
	
	expectedItems := (OrderedCollection
		with: (Dictionary
			with: ('item'->lineItem1 item)
			with: ('quantity'->lineItem1 quantity))	
		with: (Dictionary 
			with: ('item'->lineItem2 item) 
			with: ('quantity'->lineItem2 quantity))
			) asArray.
	
	expectedResponse := Dictionary 
		with: ('items'->expectedItems)
		with: ('total'->(lineItem1 total + lineItem2 total)).
	
	purchasesDetail := PurchasesDetail
		for: (OrderedCollection with: (Sale doneBy: 'client' certifiedWith: ticket)).
		
	actualResponse := Mapper mapPurchasesDetailToResponse: purchasesDetail.
	
	self assert: expectedResponse equals: actualResponse.
	! !
!MapperTest methodsFor: 'tests - map purchases detail' stamp: 'JPF 6/27/2021 11:41:24' prior: 50933936!
test02ShouldConvertAPurchasesDetailToResponseWithItemsAndTotal

	| purchasesDetail expectedResponse expectedItems actualResponse |
	
	expectedItems := (OrderedCollection
		with: (Dictionary
			with: ('item'->lineItem1 item)
			with: ('quantity'->lineItem1 quantity))	
		with: (Dictionary 
			with: ('item'->lineItem2 item) 
			with: ('quantity'->lineItem2 quantity))
			) asArray.
	
	expectedResponse := Dictionary 
		with: ('items'->expectedItems)
		with: ('total'->(lineItem1 total + lineItem2 total)).
	
	purchasesDetail := PurchasesDetail
		for: (OrderedCollection with: (Sale doneBy: 'client' certifiedWith: ticket)).
		
	actualResponse := Mapper mapPurchasesDetailToResponse: purchasesDetail.
	
	self assert: (expectedResponse at: 'items') asSortedCollection equals: (actualResponse at: 'items') asSortedCollection.
	self assert: (expectedResponse at: 'total') equals: (actualResponse at: 'total').
	! !

!testRun: #MapperTest #test02ShouldConvertAPurchasesDetailToResponseWithItemsAndTotal stamp: 'JPF 6/27/2021 11:41:26'!
ERROR!
!MapperTest methodsFor: 'tests - map purchases detail' stamp: 'JPF 6/27/2021 11:47:45' prior: 50933964!
test02ShouldConvertAPurchasesDetailToResponseWithItemsAndTotal

	| purchasesDetail expectedResponse expectedItems actualResponse |
	
	expectedItems := (OrderedCollection
		with: (Dictionary
			with: ('item'->lineItem1 item)
			with: ('quantity'->lineItem1 quantity))	
		with: (Dictionary 
			with: ('item'->lineItem2 item) 
			with: ('quantity'->lineItem2 quantity))
			) asArray.
	
	expectedResponse := Dictionary 
		with: ('items'->expectedItems)
		with: ('total'->(lineItem1 total + lineItem2 total)).
	
	purchasesDetail := PurchasesDetail
		for: (OrderedCollection with: (Sale doneBy: 'client' certifiedWith: ticket)).
		
	actualResponse := Mapper mapPurchasesDetailToResponse: purchasesDetail.
	
	"self assert: (expectedResponse at: 'items') asSortedCollection equals: (actualResponse at: 'items') asSortedCollection.
	self assert: (expectedResponse at: 'total') equals: (actualResponse at: 'total')."
	self assert: expectedResponse equals: actualResponse.
	! !
!Mapper class methodsFor: 'mapping' stamp: 'JPF 6/27/2021 11:49:49' prior: 50933901!
mapPurchasesDetailToResponse: aPurchasesDetail

	| items sortBlock |
	
	items := OrderedCollection new.
	aPurchasesDetail itemsAndQuantitiesDo: [ :itemAndQuantity |
		items add: (Dictionary
			with: ('item'->itemAndQuantity key)
			with: ('quantity'->itemAndQuantity value)) ].
		
	sortBlock := [ :element1 :element2 | (element1 at: 'item') <= (element1 at: 'item')].

	^ Dictionary with: ('items'->(items asSortedCollection: sortBlock) asArray) with: ('total'->aPurchasesDetail total).! !

!testRun: #MapperTest #test01ShouldConvertAnEmptyPurchasesDetailToResponseWithTotalZero stamp: 'JPF 6/27/2021 11:49:55'!
PASSED!

!testRun: #MapperTest #test01ShouldConvertAnEmptyTicketToAnEmptyArray stamp: 'JPF 6/27/2021 11:49:55'!
PASSED!

!testRun: #MapperTest #test02ShouldConvertAPurchasesDetailToResponseWithItemsAndTotal stamp: 'JPF 6/27/2021 11:49:55'!
FAILURE!

!testRun: #MapperTest #test02ShouldConvertATicketToTheCorrespondingArrayOfDictionaries stamp: 'JPF 6/27/2021 11:49:55'!
PASSED!

!testRun: #MapperTest #test02ShouldConvertAPurchasesDetailToResponseWithItemsAndTotal stamp: 'JPF 6/27/2021 11:49:55'!
FAILURE!

!testRun: #MapperTest #test01ShouldConvertAnEmptyPurchasesDetailToResponseWithTotalZero stamp: 'JPF 6/27/2021 11:50:21'!
PASSED!

!testRun: #MapperTest #test01ShouldConvertAnEmptyTicketToAnEmptyArray stamp: 'JPF 6/27/2021 11:50:21'!
PASSED!

!testRun: #MapperTest #test02ShouldConvertAPurchasesDetailToResponseWithItemsAndTotal stamp: 'JPF 6/27/2021 11:50:21'!
FAILURE!

!testRun: #MapperTest #test02ShouldConvertATicketToTheCorrespondingArrayOfDictionaries stamp: 'JPF 6/27/2021 11:50:21'!
PASSED!

!testRun: #MapperTest #test02ShouldConvertAPurchasesDetailToResponseWithItemsAndTotal stamp: 'JPF 6/27/2021 11:50:21'!
FAILURE!
!Mapper class methodsFor: 'mapping' stamp: 'JPF 6/27/2021 11:51:20' prior: 50934033!
mapPurchasesDetailToResponse: aPurchasesDetail

	| items sortBlock |
	
	items := OrderedCollection new.
	aPurchasesDetail itemsAndQuantitiesDo: [ :itemAndQuantity |
		items add: (Dictionary
			with: ('item'->itemAndQuantity key)
			with: ('quantity'->itemAndQuantity value)) ].
		
	sortBlock := [ :element1 :element2 | (element1 at: 'item') >= (element1 at: 'item')].

	^ Dictionary with: ('items'->(items asSortedCollection: sortBlock) asArray) with: ('total'->aPurchasesDetail total).! !

!testRun: #MapperTest #test01ShouldConvertAnEmptyPurchasesDetailToResponseWithTotalZero stamp: 'JPF 6/27/2021 11:51:23'!
PASSED!

!testRun: #MapperTest #test01ShouldConvertAnEmptyTicketToAnEmptyArray stamp: 'JPF 6/27/2021 11:51:23'!
PASSED!

!testRun: #MapperTest #test02ShouldConvertAPurchasesDetailToResponseWithItemsAndTotal stamp: 'JPF 6/27/2021 11:51:23'!
FAILURE!

!testRun: #MapperTest #test02ShouldConvertATicketToTheCorrespondingArrayOfDictionaries stamp: 'JPF 6/27/2021 11:51:23'!
PASSED!

!testRun: #MapperTest #test02ShouldConvertAPurchasesDetailToResponseWithItemsAndTotal stamp: 'JPF 6/27/2021 11:51:23'!
FAILURE!
!Mapper class methodsFor: 'mapping' stamp: 'JPF 6/27/2021 11:53:34' prior: 50934091!
mapPurchasesDetailToResponse: aPurchasesDetail

	| items sortBlock |
	
	items := OrderedCollection new.
	aPurchasesDetail itemsAndQuantitiesDo: [ :itemAndQuantity |
		items add: (Dictionary
			with: ('item'->itemAndQuantity key)
			with: ('quantity'->itemAndQuantity value)) ].
		
	sortBlock := [ :element1 :element2 | (element1 at: 'item') <= (element2 at: 'item')].

	^ Dictionary with: ('items'->(items asSortedCollection: sortBlock) asArray) with: ('total'->aPurchasesDetail total).! !

!testRun: #MapperTest #test01ShouldConvertAnEmptyPurchasesDetailToResponseWithTotalZero stamp: 'JPF 6/27/2021 11:53:41'!
PASSED!

!testRun: #MapperTest #test01ShouldConvertAnEmptyTicketToAnEmptyArray stamp: 'JPF 6/27/2021 11:53:41'!
PASSED!

!testRun: #MapperTest #test02ShouldConvertAPurchasesDetailToResponseWithItemsAndTotal stamp: 'JPF 6/27/2021 11:53:41'!
PASSED!

!testRun: #MapperTest #test02ShouldConvertATicketToTheCorrespondingArrayOfDictionaries stamp: 'JPF 6/27/2021 11:53:41'!
PASSED!

!testRun: #MapperTest #test01ShouldConvertAnEmptyPurchasesDetailToResponseWithTotalZero stamp: 'JPF 6/27/2021 11:53:47'!
PASSED!

!testRun: #MapperTest #test01ShouldConvertAnEmptyTicketToAnEmptyArray stamp: 'JPF 6/27/2021 11:53:47'!
PASSED!

!testRun: #MapperTest #test02ShouldConvertAPurchasesDetailToResponseWithItemsAndTotal stamp: 'JPF 6/27/2021 11:53:47'!
PASSED!

!testRun: #MapperTest #test02ShouldConvertATicketToTheCorrespondingArrayOfDictionaries stamp: 'JPF 6/27/2021 11:53:47'!
PASSED!
!TusLibrosRestInterface methodsFor: 'handlers' stamp: 'JPF 6/27/2021 11:55:35' prior: 50931316!
handleListPurchases: request

	self handle: request with: [	 | clientId password purchases response |	
		
		clientId := request fields at: 'clientId'.
		password := request fields at: 'password'.
		
		purchases := tusLibrosSystemFacade listPurchasesOf: clientId authenticatingWith: password.
		
		response := Mapper mapPurchasesDetailToResponse: purchases.
		
		request send200Response: response.
	]! !
!TusLibrosRestInterface methodsFor: 'handlers' stamp: 'JPF 6/27/2021 11:56:03' prior: 50934179!
handleListPurchases: request

	self handle: request with: [	 | clientId password purchases response |	
		
		clientId := request fields at: 'clientId'.
		password := request fields at: 'password'.
		
		purchases := tusLibrosSystemFacade listPurchasesOf: clientId authenticatingWith: password.
		
		response := Mapper mapPurchasesDetailToResponse: purchases.
		
		request send200Response: (WebUtils jsonEncode: response).
	]! !

server destroy.!

server := TusLibrosRestInterface listeningOn: 8080.!
!TusLibrosSystemFacadeTest methodsFor: 'tests - remove item' stamp: 'JPF 6/27/2021 12:11:32'!
test01ShoulFailIfTryToRemoveAnItemFromAnInexistentCart

	self
		should: [ systemFacade remove: testObjectsFactory itemSellByTheStore from: '1' ]
		raise: Error - MessageNotUnderstood 
		withMessageText: systemFacade class 

	! !
!TusLibrosSystemFacadeTest methodsFor: 'tests - remove item' stamp: 'JPF 6/27/2021 12:12:12' prior: 50934214!
test01ShoulFailIfTryToRemoveAnItemFromAnInexistentCart

	self
		should: [ systemFacade remove: testObjectsFactory itemSellByTheStore from: '1' ]
		raise: Error - MessageNotUnderstood 
		withMessageText: systemFacade class invalidCartIdErrorDescription.

	! !

!testRun: #TusLibrosSystemFacadeTest #test01ShoulFailIfTryToRemoveAnItemFromAnInexistentCart stamp: 'JPF 6/27/2021 12:12:17'!
ERROR!
!TusLibrosSystemFacadeTest methodsFor: 'tests - remove item' stamp: 'JPF 6/27/2021 12:13:34' prior: 50934225!
test01ShoulFailIfTryToRemoveAnItemFromAnInexistentCart

	self
		should: [ systemFacade remove: testObjectsFactory itemSellByTheStore from: '1' ]
		raise: Error - MessageNotUnderstood 
		withMessageText: systemFacade invalidCartIdErrorDescription.

	! !

!testRun: #TusLibrosSystemFacadeTest #test01ShoulFailIfTryToRemoveAnItemFromAnInexistentCart stamp: 'JPF 6/27/2021 12:13:36'!
ERROR!
!TusLibrosSystemFacade methodsFor: 'facade protocol' stamp: 'JPF 6/27/2021 12:14:06'!
remove: aString from: aString2 
	self shouldBeImplemented.! !
!TusLibrosSystemFacade methodsFor: 'facade protocol' stamp: 'JPF 6/27/2021 12:14:22' prior: 50934256!
remove: anItem from: aCartId

	self shouldBeImplemented.! !
!TusLibrosSystemFacade methodsFor: 'facade protocol' stamp: 'JPF 6/27/2021 12:14:29' prior: 50934262!
remove: anItem from: aCartId
	
	! !
!TusLibrosSystemFacade methodsFor: 'facade protocol' stamp: 'JPF 6/27/2021 12:15:27'!
remove: anItem fromCartIdentifiedAs: aCartId
	
	! !

!methodRemoval: TusLibrosSystemFacade #remove:from: stamp: 'JPF 6/27/2021 12:15:27'!
remove: anItem from: aCartId
	
	!
!TusLibrosSystemFacade methodsFor: 'facade protocol' stamp: 'JPF 6/27/2021 12:16:17' prior: 50934272!
remove: anItem fromCartIdentifiedAs: aCartId

	self withCartSessionIdentifiedAs: aCartId do: [ :cartSession | ]
	
	! !

!testRun: #TusLibrosSystemFacadeTest #test01ShoulFailIfTryToRemoveAnItemFromAnInexistentCart stamp: 'JPF 6/27/2021 12:16:32'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test01ShoulFailIfTryToRemoveAnItemFromAnInexistentCart stamp: 'JPF 6/27/2021 12:16:32'!
ERROR!
!TusLibrosSystemFacadeTest methodsFor: 'tests - remove item' stamp: 'JPF 6/27/2021 12:16:48' prior: 50934241!
test01ShoulFailIfTryToRemoveAnItemFromAnInexistentCart

	self
		should: [ systemFacade remove: testObjectsFactory itemSellByTheStore fromCartIdentifiedAs: '1' ]
		raise: Error - MessageNotUnderstood 
		withMessageText: systemFacade invalidCartIdErrorDescription.

	! !

!testRun: #TusLibrosSystemFacadeTest #test01ShoulFailIfTryToRemoveAnItemFromAnInexistentCart stamp: 'JPF 6/27/2021 12:16:52'!
PASSED!
!TusLibrosSystemFacadeTest methodsFor: 'tests - remove item' stamp: 'JPF 6/27/2021 12:18:25'!
test01ShoulFailIfTryToRemoveAnItemThatItIsNotInTheCart

	self
		should: [ systemFacade remove: testObjectsFactory itemSellByTheStore fromCartIdentifiedAs: '1' ]
		raise: Error - MessageNotUnderstood 
		withMessageText: systemFacade invalidCartIdErrorDescription.

	! !
!TusLibrosSystemFacadeTest methodsFor: 'tests - remove item' stamp: 'JPF 6/27/2021 12:18:33'!
test02ShoulFailIfTryToRemoveAnItemThatItIsNotInTheCart

	self
		should: [ systemFacade remove: testObjectsFactory itemSellByTheStore fromCartIdentifiedAs: '1' ]
		raise: Error - MessageNotUnderstood 
		withMessageText: systemFacade invalidCartIdErrorDescription.

	! !

!methodRemoval: TusLibrosSystemFacadeTest #test01ShoulFailIfTryToRemoveAnItemThatItIsNotInTheCart stamp: 'JPF 6/27/2021 12:18:33'!
test01ShoulFailIfTryToRemoveAnItemThatItIsNotInTheCart

	self
		should: [ systemFacade remove: testObjectsFactory itemSellByTheStore fromCartIdentifiedAs: '1' ]
		raise: Error - MessageNotUnderstood 
		withMessageText: systemFacade invalidCartIdErrorDescription.

	!
!TusLibrosSystemFacadeTest methodsFor: 'tests - remove item' stamp: 'JPF 6/27/2021 12:20:07' prior: 50934325!
test02ShoulFailIfTryToRemoveAnItemThatItIsNotInTheCart

	| cartId |
	cartId := systemFacade createCartFor: self validUser authenticatedWith: self validUserPassword.

	self
		should: [ systemFacade remove: testObjectsFactory itemSellByTheStore fromCartIdentifiedAs: '1' ]
		raise: Error - MessageNotUnderstood.

	! !
!TusLibrosSystemFacadeTest methodsFor: 'tests - remove item' stamp: 'JPF 6/27/2021 12:20:17' prior: 50934350!
test02ShoulFailIfTryToRemoveAnItemThatItIsNotInTheCart

	| cartId |
	cartId := systemFacade createCartFor: self validUser authenticatedWith: self validUserPassword.

	self
		should: [ systemFacade remove: testObjectsFactory itemSellByTheStore fromCartIdentifiedAs: cartId ]
		raise: Error - MessageNotUnderstood.

	! !
!TusLibrosSystemFacadeTest methodsFor: 'tests - remove item' stamp: 'JPF 6/27/2021 12:20:22' prior: 50934364!
test02ShoulFailIfTryToRemoveAnItemThatItIsNotInTheCart

	| cartId |
	
	cartId := systemFacade createCartFor: self validUser authenticatedWith: self validUserPassword.

	self
		should: [ systemFacade remove: testObjectsFactory itemSellByTheStore fromCartIdentifiedAs: cartId ]
		raise: Error - MessageNotUnderstood.

	! !

!testRun: #TusLibrosSystemFacadeTest #test02ShoulFailIfTryToRemoveAnItemThatItIsNotInTheCart stamp: 'JPF 6/27/2021 12:20:26'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test02ShoulFailIfTryToRemoveAnItemThatItIsNotInTheCart stamp: 'JPF 6/27/2021 12:20:26'!
FAILURE!
!CartTest methodsFor: 'tests' stamp: 'JPF 6/27/2021 12:23:05'!
test09CanNotRemoveAnItemThatIsNotInTheCart

	| cart |

	cart := testObjectsFactory createCart.

	self
		should: [ cart remove: testObjectsFactory itemSellByTheStore ]
		raise: Error - MessageNotUnderstood
		withMessageText: ''.! !
!CartTest methodsFor: 'tests' stamp: 'JPF 6/27/2021 12:23:52' prior: 50934399!
test09CanNotRemoveAnItemThatIsNotInTheCart

	| cart |

	cart := testObjectsFactory createCart.

	self
		should: [ cart remove: testObjectsFactory itemSellByTheStore ]
		raise: Error - MessageNotUnderstood
		withMessageText: cart itemIsNotInTheCart.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'JPF 6/27/2021 12:24:53'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'JPF 6/27/2021 12:24:53'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'JPF 6/27/2021 12:24:53'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'JPF 6/27/2021 12:24:53'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'JPF 6/27/2021 12:24:53'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'JPF 6/27/2021 12:24:53'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'JPF 6/27/2021 12:24:53'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'JPF 6/27/2021 12:24:53'!
PASSED!

!testRun: #CartTest #test09CanNotRemoveAnItemThatIsNotInTheCart stamp: 'JPF 6/27/2021 12:24:53'!
ERROR!

!testRun: #CartTest #test09CanNotRemoveAnItemThatIsNotInTheCart stamp: 'JPF 6/27/2021 12:24:53'!
ERROR!
!Cart methodsFor: 'error messages' stamp: 'JPF 6/27/2021 12:25:01'!
itemIsNotInTheCart
	self shouldBeImplemented.! !
!Cart methodsFor: 'error messages' stamp: 'JPF 6/27/2021 12:25:17' prior: 50934452!
itemIsNotInTheCart
	
	^ 'item is not present in the cart'! !

!testRun: #CartTest #test09CanNotRemoveAnItemThatIsNotInTheCart stamp: 'JPF 6/27/2021 12:25:20'!
ERROR!
!Cart methodsFor: 'removing' stamp: 'JPF 6/27/2021 12:26:01'!
remove: aString 
	self shouldBeImplemented.! !
!Cart methodsFor: 'removing' stamp: 'JPF 6/27/2021 12:26:21' prior: 50934465!
remove: anItem! !

!testRun: #CartTest #test09CanNotRemoveAnItemThatIsNotInTheCart stamp: 'JPF 6/27/2021 12:26:30'!
FAILURE!
!Cart methodsFor: 'removing' stamp: 'JPF 6/27/2021 12:29:23' prior: 50934469!
remove: anItem

	(items includes: anItem) ifFalse: [ self error: self itemIsNotInTheCart ].! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'JPF 6/27/2021 12:29:33'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'JPF 6/27/2021 12:29:33'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'JPF 6/27/2021 12:29:33'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'JPF 6/27/2021 12:29:33'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'JPF 6/27/2021 12:29:33'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'JPF 6/27/2021 12:29:33'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'JPF 6/27/2021 12:29:33'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'JPF 6/27/2021 12:29:33'!
PASSED!

!testRun: #CartTest #test09CanNotRemoveAnItemThatIsNotInTheCart stamp: 'JPF 6/27/2021 12:29:33'!
PASSED!
!Cart methodsFor: 'removing' stamp: 'JPF 6/27/2021 12:30:04'!
assertItemIsInTheCart: anItem

	^ (items includes: anItem) ifFalse: [ self error: self itemIsNotInTheCart ]! !
!Cart methodsFor: 'removing' stamp: 'JPF 6/27/2021 12:30:04' prior: 50934476!
remove: anItem

	self assertItemIsInTheCart: anItem.! !
!CartTest methodsFor: 'tests' stamp: 'JPF 6/27/2021 12:31:01'!
test10ShouldRemoveAnItemFromTheCart

	| cart |

	cart := testObjectsFactory createCart.

	self
		should: [ cart remove: testObjectsFactory itemSellByTheStore ]
		raise: Error - MessageNotUnderstood
		withMessageText: cart itemIsNotInTheCart.! !
!CartTest methodsFor: 'tests' stamp: 'JPF 6/27/2021 12:31:55' prior: 50934520!
test10ShouldRemoveAnItemFromTheCart

	| cart |

	cart := testObjectsFactory createCart.
	cart add: 2 of: testObjectsFactory itemSellByTheStore.
	cart add: 2 of: testObjectsFactory anotherItemSellByTheStore.

	self
		should: [ cart remove: testObjectsFactory itemSellByTheStore ]
		raise: Error - MessageNotUnderstood
		withMessageText: cart itemIsNotInTheCart.! !
!CartTest methodsFor: 'tests' stamp: 'JPF 6/27/2021 12:32:59' prior: 50934531!
test10ShouldRemoveAnItemFromTheCart

	| cart |

	cart := testObjectsFactory createCart.
	cart add: 2 of: testObjectsFactory itemSellByTheStore.
	cart add: 2 of: testObjectsFactory anotherItemSellByTheStore.

	cart remove: testObjectsFactory itemSellByTheStore.
	
	self deny: (cart includes: testObjectsFactory itemSellByTheStore)! !
!CartTest methodsFor: 'tests' stamp: 'JPF 6/27/2021 12:33:31' prior: 50934545!
test10ShouldRemoveAnItemFromTheCart

	| cart |

	cart := testObjectsFactory createCart.
	cart add: 2 of: testObjectsFactory itemSellByTheStore.
	cart add: 2 of: testObjectsFactory anotherItemSellByTheStore.

	cart remove: testObjectsFactory itemSellByTheStore.
	
	self deny: (cart includes: testObjectsFactory itemSellByTheStore).
	self assert: 2 equals: testObjectsFactory anotherItemSellByTheStore.! !

!testRun: #CartTest #test10ShouldRemoveAnItemFromTheCart stamp: 'JPF 6/27/2021 12:33:36'!
FAILURE!

!testRun: #CartTest #test10ShouldRemoveAnItemFromTheCart stamp: 'JPF 6/27/2021 12:33:36'!
FAILURE!
!Cart methodsFor: 'removing' stamp: 'JPF 6/27/2021 12:34:51' prior: 50934516!
remove: anItem

	self assertItemIsInTheCart: anItem.
	items remove: anItem.! !

!testRun: #CartTest #test10ShouldRemoveAnItemFromTheCart stamp: 'JPF 6/27/2021 12:34:59'!
FAILURE!
!Cart methodsFor: 'removing' stamp: 'JPF 6/27/2021 12:36:26' prior: 50934580!
remove: anItem

	self assertItemIsInTheCart: anItem.
	items removeAll: anItem.! !

!testRun: #CartTest #test10ShouldRemoveAnItemFromTheCart stamp: 'JPF 6/27/2021 12:36:32'!
ERROR!

!testRun: #CartTest #test10ShouldRemoveAnItemFromTheCart stamp: 'JPF 6/27/2021 12:36:43'!
ERROR!

!testRun: #CartTest #test10ShouldRemoveAnItemFromTheCart stamp: 'JPF 6/27/2021 12:36:43'!
ERROR!
!Cart methodsFor: 'removing' stamp: 'JPF 6/27/2021 12:41:46' prior: 50934589!
remove: anItem

	self assertItemIsInTheCart: anItem.
	
	items := items select: [ :item | item ~= anItem ].! !
!Cart methodsFor: 'removing' stamp: 'JPF 6/27/2021 12:41:57' prior: 50934604!
remove: itemToRemove

	self assertItemIsInTheCart: itemToRemove.
	
	items := items select: [ :item | item ~= itemToRemove ].! !
!Cart methodsFor: 'removing' stamp: 'JPF 6/27/2021 12:42:18' prior: 50934610!
remove: itemToRemove

	self assertItemIsInTheCart: itemToRemove.
	
	items := items reject: [ :item | item = itemToRemove ].! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'JPF 6/27/2021 12:42:45'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'JPF 6/27/2021 12:42:45'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'JPF 6/27/2021 12:42:45'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'JPF 6/27/2021 12:42:45'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'JPF 6/27/2021 12:42:45'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'JPF 6/27/2021 12:42:45'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'JPF 6/27/2021 12:42:45'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'JPF 6/27/2021 12:42:45'!
PASSED!

!testRun: #CartTest #test09CanNotRemoveAnItemThatIsNotInTheCart stamp: 'JPF 6/27/2021 12:42:45'!
PASSED!

!testRun: #CartTest #test10ShouldRemoveAnItemFromTheCart stamp: 'JPF 6/27/2021 12:42:45'!
FAILURE!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'JPF 6/27/2021 12:42:45'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'JPF 6/27/2021 12:42:45'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'JPF 6/27/2021 12:42:45'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'JPF 6/27/2021 12:42:45'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'JPF 6/27/2021 12:42:45'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'JPF 6/27/2021 12:42:45'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'JPF 6/27/2021 12:42:45'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01ShoulFailIfTryToRemoveAnItemFromAnInexistentCart stamp: 'JPF 6/27/2021 12:42:45'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01shouldReturnTheCatalog stamp: 'JPF 6/27/2021 12:42:45'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'JPF 6/27/2021 12:42:45'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02ShoulFailIfTryToRemoveAnItemThatItIsNotInTheCart stamp: 'JPF 6/27/2021 12:42:45'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'JPF 6/27/2021 12:42:45'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'JPF 6/27/2021 12:42:45'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'JPF 6/27/2021 12:42:45'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'JPF 6/27/2021 12:42:45'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07ListCartOfAnEmptyCartReturnsAnEmptyBag stamp: 'JPF 6/27/2021 12:42:45'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'JPF 6/27/2021 12:42:45'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'JPF 6/27/2021 12:42:45'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CanCheckoutACart stamp: 'JPF 6/27/2021 12:42:45'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'JPF 6/27/2021 12:42:45'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'JPF 6/27/2021 12:42:45'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'JPF 6/27/2021 12:42:45'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'JPF 6/27/2021 12:42:45'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'JPF 6/27/2021 12:42:45'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'JPF 6/27/2021 12:42:45'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'JPF 6/27/2021 12:42:45'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'JPF 6/27/2021 12:42:45'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'JPF 6/27/2021 12:42:45'!
PASSED!

!testRun: #CartTest #test10ShouldRemoveAnItemFromTheCart stamp: 'JPF 6/27/2021 12:42:52'!
FAILURE!
!CartTest methodsFor: 'tests' stamp: 'JPF 6/27/2021 12:43:44' prior: 50934558!
test10ShouldRemoveAnItemFromTheCart

	| cart |

	cart := testObjectsFactory createCart.
	cart add: 2 of: testObjectsFactory itemSellByTheStore.
	cart add: 2 of: testObjectsFactory anotherItemSellByTheStore.

	cart remove: testObjectsFactory itemSellByTheStore.
	
	self deny: (cart includes: testObjectsFactory itemSellByTheStore).
	self assert: 2 equals: (cart occurrencesOf: testObjectsFactory anotherItemSellByTheStore).! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'JPF 6/27/2021 12:43:57'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'JPF 6/27/2021 12:43:57'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'JPF 6/27/2021 12:43:57'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'JPF 6/27/2021 12:43:57'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'JPF 6/27/2021 12:43:57'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'JPF 6/27/2021 12:43:57'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'JPF 6/27/2021 12:43:57'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'JPF 6/27/2021 12:43:57'!
PASSED!

!testRun: #CartTest #test09CanNotRemoveAnItemThatIsNotInTheCart stamp: 'JPF 6/27/2021 12:43:57'!
PASSED!

!testRun: #CartTest #test10ShouldRemoveAnItemFromTheCart stamp: 'JPF 6/27/2021 12:43:57'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'JPF 6/27/2021 12:43:57'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'JPF 6/27/2021 12:43:57'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'JPF 6/27/2021 12:43:57'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'JPF 6/27/2021 12:43:57'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'JPF 6/27/2021 12:43:57'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'JPF 6/27/2021 12:43:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'JPF 6/27/2021 12:43:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01ShoulFailIfTryToRemoveAnItemFromAnInexistentCart stamp: 'JPF 6/27/2021 12:43:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01shouldReturnTheCatalog stamp: 'JPF 6/27/2021 12:43:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'JPF 6/27/2021 12:43:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02ShoulFailIfTryToRemoveAnItemThatItIsNotInTheCart stamp: 'JPF 6/27/2021 12:43:57'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'JPF 6/27/2021 12:43:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'JPF 6/27/2021 12:43:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'JPF 6/27/2021 12:43:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'JPF 6/27/2021 12:43:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07ListCartOfAnEmptyCartReturnsAnEmptyBag stamp: 'JPF 6/27/2021 12:43:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'JPF 6/27/2021 12:43:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'JPF 6/27/2021 12:43:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CanCheckoutACart stamp: 'JPF 6/27/2021 12:43:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'JPF 6/27/2021 12:43:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'JPF 6/27/2021 12:43:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'JPF 6/27/2021 12:43:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'JPF 6/27/2021 12:43:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'JPF 6/27/2021 12:43:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'JPF 6/27/2021 12:43:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'JPF 6/27/2021 12:43:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'JPF 6/27/2021 12:43:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'JPF 6/27/2021 12:43:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02ShoulFailIfTryToRemoveAnItemThatItIsNotInTheCart stamp: 'JPF 6/27/2021 12:43:57'!
FAILURE!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'JPF 6/27/2021 12:44:14'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'JPF 6/27/2021 12:44:14'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'JPF 6/27/2021 12:44:14'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'JPF 6/27/2021 12:44:14'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'JPF 6/27/2021 12:44:14'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'JPF 6/27/2021 12:44:14'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'JPF 6/27/2021 12:44:14'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'JPF 6/27/2021 12:44:14'!
PASSED!

!testRun: #CartTest #test09CanNotRemoveAnItemThatIsNotInTheCart stamp: 'JPF 6/27/2021 12:44:14'!
PASSED!

!testRun: #CartTest #test10ShouldRemoveAnItemFromTheCart stamp: 'JPF 6/27/2021 12:44:14'!
PASSED!
!TusLibrosSystemFacade methodsFor: 'facade protocol' stamp: 'JPF 6/27/2021 12:45:26' prior: 50934281!
remove: anItem fromCartIdentifiedAs: aCartId

	self withCartSessionIdentifiedAs: aCartId do: [ :cartSession | self error: '']
	
	! !

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'JPF 6/27/2021 12:45:37'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01ShoulFailIfTryToRemoveAnItemFromAnInexistentCart stamp: 'JPF 6/27/2021 12:45:37'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01shouldReturnTheCatalog stamp: 'JPF 6/27/2021 12:45:37'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'JPF 6/27/2021 12:45:37'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02ShoulFailIfTryToRemoveAnItemThatItIsNotInTheCart stamp: 'JPF 6/27/2021 12:45:37'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'JPF 6/27/2021 12:45:37'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'JPF 6/27/2021 12:45:37'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'JPF 6/27/2021 12:45:37'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'JPF 6/27/2021 12:45:37'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07ListCartOfAnEmptyCartReturnsAnEmptyBag stamp: 'JPF 6/27/2021 12:45:37'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'JPF 6/27/2021 12:45:37'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'JPF 6/27/2021 12:45:37'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CanCheckoutACart stamp: 'JPF 6/27/2021 12:45:37'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'JPF 6/27/2021 12:45:37'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'JPF 6/27/2021 12:45:37'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'JPF 6/27/2021 12:45:37'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'JPF 6/27/2021 12:45:37'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'JPF 6/27/2021 12:45:37'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'JPF 6/27/2021 12:45:37'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'JPF 6/27/2021 12:45:37'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'JPF 6/27/2021 12:45:37'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'JPF 6/27/2021 12:45:37'!
PASSED!
!TusLibrosSystemFacadeTest methodsFor: 'tests - remove item' stamp: 'JPF 6/27/2021 12:46:20'!
test03ShoulRemoveAnItemFromTheCart

	| cartId |
	
	cartId := systemFacade createCartFor: self validUser authenticatedWith: self validUserPassword.

	self
		should: [ systemFacade remove: testObjectsFactory itemSellByTheStore fromCartIdentifiedAs: cartId ]
		raise: Error - MessageNotUnderstood.

	! !
!TusLibrosSystemFacadeTest methodsFor: 'tests - remove item' stamp: 'JPF 6/27/2021 12:47:14' prior: 50935041!
test03ShoulRemoveAnItemFromTheCart

	| cartId |
	
	cartId := systemFacade createCartFor: self validUser authenticatedWith: self validUserPassword.
	systemFacade add: 2 of: self validBook toCartIdentifiedAs: cartId.
	systemFacade add: 2 of: self anotherValidBook toCartIdentifiedAs: cartId.

	self
		should: [ systemFacade remove: testObjectsFactory itemSellByTheStore fromCartIdentifiedAs: cartId ]
		raise: Error - MessageNotUnderstood.

	! !
!TusLibrosSystemFacadeTest methodsFor: 'tests - remove item' stamp: 'JPF 6/27/2021 12:47:44' prior: 50935054!
test03ShoulRemoveAnItemFromTheCart

	| cartId |
	
	cartId := systemFacade createCartFor: self validUser authenticatedWith: self validUserPassword.
	systemFacade add: 2 of: self validBook toCartIdentifiedAs: cartId.
	systemFacade add: 2 of: self anotherValidBook toCartIdentifiedAs: cartId.

	systemFacade remove: self validBook fromCartIdentifiedAs: cartId.

	! !
!TusLibrosSystemFacadeTest methodsFor: 'tests - remove item' stamp: 'JPF 6/27/2021 12:47:57' prior: 50935072!
test03ShoulRemoveAnItemFromTheCart

	| cartId |
	
	cartId := systemFacade createCartFor: self validUser authenticatedWith: self validUserPassword.
	systemFacade add: 2 of: self validBook toCartIdentifiedAs: cartId.
	systemFacade add: 2 of: self anotherValidBook toCartIdentifiedAs: cartId.

	systemFacade remove: self validBook fromCartIdentifiedAs: cartId.
	
	

	! !
!TusLibrosSystemFacadeTest methodsFor: 'tests - remove item' stamp: 'JPF 6/27/2021 12:48:46' prior: 50935087!
test03ShoulRemoveAnItemFromTheCart

	| cartId cartContent |
	
	cartId := systemFacade createCartFor: self validUser authenticatedWith: self validUserPassword.
	systemFacade add: 2 of: self validBook toCartIdentifiedAs: cartId.
	systemFacade add: 2 of: self anotherValidBook toCartIdentifiedAs: cartId.

	systemFacade remove: self validBook fromCartIdentifiedAs: cartId.
	
	cartContent := systemFacade listCartIdentifiedAs: cartId.

	self assert: (cartContent occurrencesOf: self validBook) equals: 0.
	self assert: (cartContent occurrencesOf: self anotherValidBook) equals: 2
	
	

	! !

!testRun: #TusLibrosSystemFacadeTest #test03ShoulRemoveAnItemFromTheCart stamp: 'JPF 6/27/2021 12:48:53'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test03ShoulRemoveAnItemFromTheCart stamp: 'JPF 6/27/2021 12:48:53'!
ERROR!
!TusLibrosSystemFacade methodsFor: 'facade protocol' stamp: 'JPF 6/27/2021 12:49:36' prior: 50934950!
remove: anItem fromCartIdentifiedAs: aCartId

	self withCartSessionIdentifiedAs: aCartId do: [ :cartSession | cartSession remove: anItem ]
	
	! !

!testRun: #TusLibrosSystemFacadeTest #test03ShoulRemoveAnItemFromTheCart stamp: 'JPF 6/27/2021 12:49:37'!
ERROR!
!CartSession methodsFor: 'cart' stamp: 'JPF 6/27/2021 12:49:46'!
remove: aString 
	self shouldBeImplemented.! !
!CartSession methodsFor: 'cart' stamp: 'JPF 6/27/2021 12:49:57' prior: 50935142!
remove: anItemToRemove! !
!CartSession methodsFor: 'cart' stamp: 'JPF 6/27/2021 12:50:25' prior: 50935146!
remove: anItemToRemove

	cart remove: anItemToRemove! !

!testRun: #TusLibrosSystemFacadeTest #test03ShoulRemoveAnItemFromTheCart stamp: 'JPF 6/27/2021 12:50:33'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'JPF 6/27/2021 12:50:38'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'JPF 6/27/2021 12:50:38'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'JPF 6/27/2021 12:50:38'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'JPF 6/27/2021 12:50:38'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'JPF 6/27/2021 12:50:38'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'JPF 6/27/2021 12:50:38'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'JPF 6/27/2021 12:50:38'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'JPF 6/27/2021 12:50:38'!
PASSED!

!testRun: #CartTest #test09CanNotRemoveAnItemThatIsNotInTheCart stamp: 'JPF 6/27/2021 12:50:38'!
PASSED!

!testRun: #CartTest #test10ShouldRemoveAnItemFromTheCart stamp: 'JPF 6/27/2021 12:50:38'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'JPF 6/27/2021 12:50:38'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'JPF 6/27/2021 12:50:38'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'JPF 6/27/2021 12:50:38'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'JPF 6/27/2021 12:50:38'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'JPF 6/27/2021 12:50:38'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'JPF 6/27/2021 12:50:38'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'JPF 6/27/2021 12:50:38'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01ShoulFailIfTryToRemoveAnItemFromAnInexistentCart stamp: 'JPF 6/27/2021 12:50:38'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01shouldReturnTheCatalog stamp: 'JPF 6/27/2021 12:50:38'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'JPF 6/27/2021 12:50:38'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02ShoulFailIfTryToRemoveAnItemThatItIsNotInTheCart stamp: 'JPF 6/27/2021 12:50:38'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'JPF 6/27/2021 12:50:38'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03ShoulRemoveAnItemFromTheCart stamp: 'JPF 6/27/2021 12:50:38'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'JPF 6/27/2021 12:50:38'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'JPF 6/27/2021 12:50:38'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'JPF 6/27/2021 12:50:38'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07ListCartOfAnEmptyCartReturnsAnEmptyBag stamp: 'JPF 6/27/2021 12:50:38'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'JPF 6/27/2021 12:50:38'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'JPF 6/27/2021 12:50:38'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CanCheckoutACart stamp: 'JPF 6/27/2021 12:50:38'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'JPF 6/27/2021 12:50:38'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'JPF 6/27/2021 12:50:38'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'JPF 6/27/2021 12:50:38'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'JPF 6/27/2021 12:50:38'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'JPF 6/27/2021 12:50:38'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'JPF 6/27/2021 12:50:38'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'JPF 6/27/2021 12:50:38'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'JPF 6/27/2021 12:50:38'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'JPF 6/27/2021 12:50:38'!
PASSED!
!TusLibrosRestInterface methodsFor: 'initialization' stamp: 'JPF 6/27/2021 12:51:44' prior: 50932227!
initializeWith: aPortNumber

	tusLibrosSystemFacade := TusLibrosDefaultFactory new createFacade.
	
	port:= aPortNumber.
	
	webServer :=
		WebServer new listenOn: self port;
		addService: '/createCart' action:[ :request | self handleCreateCart: request ];
		addService: '/addToCart' action:[ :request | self handleAddToCart: request ];
		addService: '/listCart' action:[ :request | self handleListCart: request ];
		addService: '/listPurchases' action:[ :request | self handleListPurchases: request ];
		addService: '/checkOutCart' action:[ :request | self handleCheckOutCart: request ];
		addService: '/listCatalog' action:[ :request | self handleListCatalog: request ];
		addService: '/removeFromCart' action:[ :request | self removeFromCart: request ].
		.! !
!TusLibrosRestInterface methodsFor: 'handlers' stamp: 'JPF 6/27/2021 12:52:00'!
handleRemoveFromCart: request

	self handle: request with: [	 | book quantity cartId |	
		
		cartId := request fields at: 'cartId'.
		book := request fields at: 'book'.
		quantity := request fields at: 'quantity'.
		
		tusLibrosSystemFacade
			add: quantity asNumber
			of: book
			toCartIdentifiedAs: cartId asNumber.
		
		request send200Response: 'OK'
	]! !
!TusLibrosRestInterface methodsFor: 'handlers' stamp: 'JPF 6/27/2021 12:52:43' prior: 50935325!
handleRemoveFromCart: request

	self handle: request with: [	 | book cartId |	
		
		cartId := request fields at: 'cartId'.
		book := request fields at: 'book'.
		
		tusLibrosSystemFacade
			remove: book
			fromCartIdentifiedAs: cartId asNumber.
		
		request send200Response: 'OK'
	]! !

server destroy.!

server := TusLibrosRestInterface listeningOn: 8080.!
!TusLibrosRestInterface methodsFor: 'initialization' stamp: 'JPF 6/27/2021 12:54:57' prior: 50935298!
initializeWith: aPortNumber

	tusLibrosSystemFacade := TusLibrosDefaultFactory new createFacade.
	
	port:= aPortNumber.
	
	webServer :=
		WebServer new listenOn: self port;
		addService: '/createCart' action:[ :request | self handleCreateCart: request ];
		addService: '/addToCart' action:[ :request | self handleAddToCart: request ];
		addService: '/listCart' action:[ :request | self handleListCart: request ];
		addService: '/listPurchases' action:[ :request | self handleListPurchases: request ];
		addService: '/checkOutCart' action:[ :request | self handleCheckOutCart: request ];
		addService: '/listCatalog' action:[ :request | self handleListCatalog: request ];
		addService: '/removeFromCart' action:[ :request | self handleRemoveFromCart: request ].
		.! !

server destroy.!

server := TusLibrosRestInterface listeningOn: 8080.!

----SNAPSHOT----(27 June 2021 12:57:23) Interfaz.image priorSource: 19172593!

----QUIT----(27 June 2021 13:05:38) Interfaz.image priorSource: 19319463!

----STARTUP---- (28 June 2021 17:00:22) as /Users/juan.ferrino/CuisUniversity/Interfaz.image!


----End fileIn of /Users/juan.ferrino/CuisUniversity/Packages/Morphic/Morphic-Widgets-Extras.pck.st----!

CodePackage subclass: #ColorExtrasPackage
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Color-Extras'!

!classDefinition: #ColorExtrasPackage category: 'Color-Extras' stamp: 'Install-Color-Extras 6/28/2021 19:00:31'!
CodePackage subclass: #ColorExtrasPackage
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Color-Extras'!

ColorExtrasPackage class
	instanceVariableNames: ''!

!classDefinition: 'ColorExtrasPackage class' category: 'Color-Extras' stamp: 'Install-Color-Extras 6/28/2021 19:00:31'!
ColorExtrasPackage class
	instanceVariableNames: ''!

----End fileIn of /Users/juan.ferrino/CuisUniversity/Packages/Features/Color-Extras.pck.st----!

CodePackage subclass: #MorphicMisc1Package
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Morphic-Misc1'!

!classDefinition: #MorphicMisc1Package category: 'Morphic-Misc1' stamp: 'Install-Morphic-Misc1 6/28/2021 19:00:32'!
CodePackage subclass: #MorphicMisc1Package
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Morphic-Misc1'!
!MorphicMisc1Package commentStamp: '<historical>' prior: 0!
My purpose in life is to check that any base image methods overridden have not been updated.
See #MorphMisc1Package class>>prePackageInstall!

MorphicMisc1Package class
	instanceVariableNames: ''!

!classDefinition: 'MorphicMisc1Package class' category: 'Morphic-Misc1' stamp: 'Install-Morphic-Misc1 6/28/2021 19:00:32'!
MorphicMisc1Package class
	instanceVariableNames: ''!

----End fileIn of /Users/juan.ferrino/CuisUniversity/Packages/Morphic/Morphic-Misc1/Morphic-Misc1.pck.st----!

----End fileIn of /Users/juan.ferrino/ingenieria1/2021-1c/20-TusLibros/Iteracion 4/WebClient.pck.st----!

----End fileIn of /Users/juan.ferrino/ingenieria1/2021-1c/20-TusLibros/Iteracion 4/WordsClientDemo.st----!

Panel subclass: #TusLibrosClientWindow
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Client'!

!classDefinition: #TusLibrosClientWindow category: #'TusLibros-Client' stamp: 'JPF 6/28/2021 19:08:15'!
Panel subclass: #TusLibrosClientWindow
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Client'!

!classRenamed: #TusLibrosClientWindow as: #TusLibrosLoginWindow stamp: 'JPF 6/28/2021 19:10:33'!
Smalltalk renameClassNamed: #TusLibrosClientWindow as: #TusLibrosLoginWindow!
!TusLibrosLoginWindow class methodsFor: 'instance creation' stamp: 'JPF 6/28/2021 19:11:55'!
open

	^ self new initializeWith: 'Tus Libros - Login'.! !

!classDefinition: #LoginModel category: #'TusLibros-Client' stamp: 'JPF 6/28/2021 19:13:59'!
Object subclass: #LoginModel
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Client'!
!TusLibrosLoginWindow methodsFor: 'initialization' stamp: 'JPF 6/28/2021 19:13:48'!
initializeWith: aTitle

	self titleMorph showButtonsNamed: #( close collapse ).
	self setLabel: aTitle.
	self model: (LoginModel new).
	self morphExtent: (self defaultExtent).
	self buildMorphicWindow.
	self openInWorld.
			
	"self model when: #newWordsArrived send: #refreshListOfWords to: self."! !

!classRenamed: #TusLibrosLoginWindow as: #LoginWindow stamp: 'JPF 6/28/2021 19:14:13'!
Smalltalk renameClassNamed: #TusLibrosLoginWindow as: #LoginWindow!
!LoginWindow methodsFor: 'initialization' stamp: 'JPF 6/28/2021 19:14:55' overrides: 50941505!
defaultExtent

	^ 485@485! !
!LoginWindow methodsFor: 'GUI building' stamp: 'JPF 6/28/2021 19:15:38' overrides: 50941419!
buildMorphicWindow! !

loginWindow := LoginWindow open.!

loginWindow close.!

loginWindow := LoginWindow open.!
!LoginWindow methodsFor: 'GUI building' stamp: 'JPF 6/28/2021 19:20:02' prior: 50953405 overrides: 50941419!
buildMorphicWindow

	self layoutMorph beColumn.! !
!LoginWindow methodsFor: 'GUI building' stamp: 'JPF 6/28/2021 19:22:55' prior: 50953412 overrides: 50941419!
buildMorphicWindow

	self 
		layoutMorph beColumn;
		separation: 15;
		axisEdgeWeight: 0.5;
		addMorph: self buildClientIdRow;
		addMorph: self buildPasswordRow;
		addMorph: self buildSubmitButton.! !
!LoginWindow methodsFor: 'GUI building' stamp: 'JPF 6/28/2021 19:23:20'!
buildClientIdRow! !
!LoginWindow methodsFor: 'GUI building' stamp: 'JPF 6/28/2021 19:23:32'!
buildPasswordRow! !
!LoginWindow methodsFor: 'GUI building' stamp: 'JPF 6/28/2021 19:23:52'!
buildSubmitButton! !

!classDefinition: #LoginWindow category: #'TusLibros-Client' stamp: 'JPF 6/28/2021 19:26:54'!
Panel subclass: #LoginWindow
	instanceVariableNames: 'clientIdTextBoxMorph'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Client'!
!LoginWindow methodsFor: 'GUI building' stamp: 'JPF 6/28/2021 19:26:53' prior: 50953426!
buildClientIdRow

	clientIdTextBoxMorph := TextModelMorph
		textProvider: self model
		textGetter: #clientId
		textSetter: #clientId:.

	! !
!LoginWindow methodsFor: 'GUI building' stamp: 'JPF 6/28/2021 19:28:26' prior: 50953444!
buildClientIdRow

	clientIdTextBoxMorph := TextModelMorph
		textProvider: self model
		textGetter: #clientId
		textSetter: #clientId:.
		
	clientIdTextBoxMorph textMorph 
		setProperty: #keyStroke: 
		toValue: [ :key | clientIdTextBoxMorph textMorph acceptContents ]

	! !
!LoginWindow methodsFor: 'GUI building' stamp: 'JPF 6/28/2021 19:28:31' prior: 50953452!
buildClientIdRow

	clientIdTextBoxMorph := TextModelMorph
		textProvider: self model
		textGetter: #clientId
		textSetter: #clientId:.
		
	clientIdTextBoxMorph textMorph 
		setProperty: #keyStroke: 
		toValue: [ :key | clientIdTextBoxMorph textMorph acceptContents ].

	! !
!LoginWindow methodsFor: 'GUI building' stamp: 'JPF 6/28/2021 19:32:01' prior: 50953464!
buildClientIdRow

	| clientIdRow |
	clientIdTextBoxMorph := TextModelMorph
		textProvider: self model
		textGetter: #clientId
		textSetter: #clientId:.
		
	clientIdTextBoxMorph textMorph 
		setProperty: #keyStroke: 
		toValue: [ :key | clientIdTextBoxMorph textMorph acceptContents ].
		
	clientIdRow := LayoutMorph
		newRow;
		separation: 25;
		axisEdgeWeight: 0.5;
		addMorph: (LabelMorph contents: 'Client ID:');
		addMorph: clientIdTextBoxMorph.
		
	^ clientIdRow

	! !
!LoginWindow methodsFor: 'GUI building' stamp: 'JPF 6/28/2021 19:32:13' prior: 50953476!
buildClientIdRow

	| clientIdRow |
	
	clientIdTextBoxMorph := TextModelMorph
		textProvider: self model
		textGetter: #clientId
		textSetter: #clientId:.
		
	clientIdTextBoxMorph textMorph 
		setProperty: #keyStroke: 
		toValue: [ :key | clientIdTextBoxMorph textMorph acceptContents ].
		
	clientIdRow := LayoutMorph
		newRow;
		separation: 25;
		axisEdgeWeight: 0.5;
		addMorph: (LabelMorph contents: 'Client ID:');
		addMorph: clientIdTextBoxMorph.
		
	^ clientIdRow

	! !
!LoginWindow methodsFor: 'GUI building' stamp: 'JPF 6/28/2021 19:32:39' prior: 50953417 overrides: 50941419!
buildMorphicWindow

	self 
		layoutMorph beColumn;
		separation: 15;
		axisEdgeWeight: 0.5;
		addMorph: self buildClientIdRow.";
		addMorph: self buildPasswordRow;
		addMorph: self buildSubmitButton."! !

loginWindow := LoginWindow open.!

!classDefinition: #LoginModel category: #'TusLibros-Client' stamp: 'JPF 6/28/2021 19:33:38'!
Object subclass: #LoginModel
	instanceVariableNames: 'clientId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Client'!
!LoginModel methodsFor: 'clientId' stamp: 'JPF 6/28/2021 19:33:34'!
clientId

	^ clientId! !
!LoginModel methodsFor: 'clientId' stamp: 'JPF 6/28/2021 19:33:53'!
clientId: value

	clientId := value! !
!LoginModel methodsFor: 'initialization' stamp: 'JPF 6/28/2021 19:34:16' overrides: 16896425!
initialize

	clientId := ''! !

loginWindow := LoginWindow open.!
!LoginWindow methodsFor: 'GUI building' stamp: 'JPF 6/28/2021 19:35:43' prior: 50953494!
buildClientIdRow

	| clientIdRow |
	
	clientIdTextBoxMorph := TextModelMorph
		textProvider: self model
		textGetter: #clientId
		textSetter: #clientId:.
		
	clientIdTextBoxMorph textMorph 
		setProperty: #keyStroke: 
		toValue: [ :key | clientIdTextBoxMorph textMorph acceptContents ].
		
	clientIdRow := LayoutMorph newRow.
	clientIdRow
		separation: 25;
		axisEdgeWeight: 0.5;
		addMorph: (LabelMorph contents: 'Client ID:');
		addMorph: clientIdTextBoxMorph.
		
	^ clientIdRow

	! !

loginWindow := LoginWindow open.!
!LoginWindow methodsFor: 'GUI building' stamp: 'JPF 6/28/2021 19:36:06' prior: 50953543!
buildClientIdRow

	| clientIdRowLayoutMorph |
	
	clientIdTextBoxMorph := TextModelMorph
		textProvider: self model
		textGetter: #clientId
		textSetter: #clientId:.
		
	clientIdTextBoxMorph textMorph 
		setProperty: #keyStroke: 
		toValue: [ :key | clientIdTextBoxMorph textMorph acceptContents ].
		
	clientIdRowLayoutMorph := LayoutMorph newRow.
	clientIdRowLayoutMorph
		separation: 25;
		axisEdgeWeight: 0.5;
		addMorph: (LabelMorph contents: 'Client ID:');
		addMorph: clientIdTextBoxMorph.
		
	^ clientIdRowLayoutMorph

	! !
!LoginWindow methodsFor: 'GUI building' stamp: 'JPF 6/28/2021 19:36:59' prior: 50953563!
buildClientIdRow

	| clientIdRowLayoutMorph |
	
	clientIdTextBoxMorph := TextModelMorph
		textProvider: self model
		textGetter: #clientId
		textSetter: #clientId:.
		
	clientIdTextBoxMorph textMorph 
		setProperty: #keyStroke: 
		toValue: [ :key | clientIdTextBoxMorph textMorph acceptContents ].
		
	clientIdTextBoxMorph 
		borderWidth: 1; 
		borderColor: Color skyBlue; 
		morphWidth: 300.
		
	clientIdRowLayoutMorph := LayoutMorph newRow.
	clientIdRowLayoutMorph
		separation: 25;
		axisEdgeWeight: 0.5;
		addMorph: (LabelMorph contents: 'Client ID:');
		addMorph: clientIdTextBoxMorph.
		
	^ clientIdRowLayoutMorph

	! !

loginWindow := LoginWindow open.!
!LoginWindow methodsFor: 'GUI building' stamp: 'JPF 6/28/2021 19:38:21' prior: 50953429!
buildPasswordRow

| clientIdRowLayoutMorph |
	
	clientIdTextBoxMorph := TextModelMorph
		textProvider: self model
		textGetter: #clientId
		textSetter: #clientId:.
		
	clientIdTextBoxMorph textMorph 
		setProperty: #keyStroke: 
		toValue: [ :key | clientIdTextBoxMorph textMorph acceptContents ].
		
	clientIdTextBoxMorph 
		borderWidth: 1; 
		borderColor: Color skyBlue; 
		morphWidth: 300.
		
	clientIdRowLayoutMorph := LayoutMorph newRow.
	clientIdRowLayoutMorph
		separation: 25;
		axisEdgeWeight: 0.5;
		addMorph: (LabelMorph contents: 'Client ID:');
		addMorph: clientIdTextBoxMorph.
		
	^ clientIdRowLayoutMorph! !
!LoginWindow methodsFor: 'GUI building' stamp: 'JPF 6/28/2021 19:38:30' prior: 50953607!
buildPasswordRow

	| clientIdRowLayoutMorph |
	
	clientIdTextBoxMorph := TextModelMorph
		textProvider: self model
		textGetter: #clientId
		textSetter: #clientId:.
		
	clientIdTextBoxMorph textMorph 
		setProperty: #keyStroke: 
		toValue: [ :key | clientIdTextBoxMorph textMorph acceptContents ].
		
	clientIdTextBoxMorph 
		borderWidth: 1; 
		borderColor: Color skyBlue; 
		morphWidth: 300.
		
	clientIdRowLayoutMorph := LayoutMorph newRow.
	clientIdRowLayoutMorph
		separation: 25;
		axisEdgeWeight: 0.5;
		addMorph: (LabelMorph contents: 'Client ID:');
		addMorph: clientIdTextBoxMorph.
		
	^ clientIdRowLayoutMorph! !
!LoginWindow methodsFor: 'GUI building' stamp: 'JPF 6/28/2021 19:38:51' prior: 50953630!
buildPasswordRow

	| passwordRowLayoutMorph |
	
	clientIdTextBoxMorph := TextModelMorph
		textProvider: self model
		textGetter: #clientId
		textSetter: #clientId:.
		
	clientIdTextBoxMorph textMorph 
		setProperty: #keyStroke: 
		toValue: [ :key | clientIdTextBoxMorph textMorph acceptContents ].
		
	clientIdTextBoxMorph 
		borderWidth: 1; 
		borderColor: Color skyBlue; 
		morphWidth: 300.
		
	passwordRowLayoutMorph := LayoutMorph newRow.
	passwordRowLayoutMorph
		separation: 25;
		axisEdgeWeight: 0.5;
		addMorph: (LabelMorph contents: 'Client ID:');
		addMorph: clientIdTextBoxMorph.
		
	^ passwordRowLayoutMorph! !

!classDefinition: #LoginWindow category: #'TusLibros-Client' stamp: 'JPF 6/28/2021 19:40:34'!
Panel subclass: #LoginWindow
	instanceVariableNames: 'clientIdTextBoxMorph passwordTextBoxMorph'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Client'!
!LoginWindow methodsFor: 'GUI building' stamp: 'JPF 6/28/2021 19:40:32' prior: 50953653!
buildPasswordRow

	| passwordRowLayoutMorph |
	
	passwordTextBoxMorph := TextModelMorph
		textProvider: self model
		textGetter: #password
		textSetter: #password:.
		
	passwordTextBoxMorph textMorph 
		setProperty: #keyStroke: 
		toValue: [ :key | passwordTextBoxMorph textMorph acceptContents ].
		
	passwordTextBoxMorph 
		borderWidth: 1; 
		borderColor: Color skyBlue; 
		morphWidth: 300.
		
	passwordRowLayoutMorph := LayoutMorph newRow.
	passwordRowLayoutMorph
		separation: 25;
		axisEdgeWeight: 0.5;
		addMorph: (LabelMorph contents: 'Password:');
		addMorph: passwordTextBoxMorph.
		
	^ passwordRowLayoutMorph! !
!LoginWindow methodsFor: 'GUI building' stamp: 'JPF 6/28/2021 19:41:04' prior: 50953513 overrides: 50941419!
buildMorphicWindow

	self 
		layoutMorph beColumn;
		separation: 15;
		axisEdgeWeight: 0.5;
		addMorph: self buildClientIdRow;
		addMorph: self buildPasswordRow.";
		addMorph: self buildSubmitButton."! !

loginWindow := LoginWindow open.!

!classDefinition: #LoginModel category: #'TusLibros-Client' stamp: 'JPF 6/28/2021 19:41:38'!
Object subclass: #LoginModel
	instanceVariableNames: 'clientId password'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Client'!
!LoginModel methodsFor: 'password' stamp: 'JPF 6/28/2021 19:41:36'!
password

	^ password! !
!LoginModel methodsFor: 'password' stamp: 'JPF 6/28/2021 19:41:55'!
password: value

	password := value! !
!LoginModel methodsFor: 'initialization' stamp: 'JPF 6/28/2021 19:42:09' prior: 50953538 overrides: 16896425!
initialize

	clientId := ''.
	password := ''! !

loginWindow := LoginWindow open.!
!LoginWindow methodsFor: 'GUI building' stamp: 'JPF 6/28/2021 19:44:09' prior: 50953432!
buildSubmitButton

	| submitButtonMorph |
	submitButtonMorph := PluggableButtonMorph model: self model stateGetter: nil action: #sendWordsFromSentenceRequest  label: 'Send Request To Server'.
	
	^ submitButtonMorph! !
!LoginWindow methodsFor: 'GUI building' stamp: 'JPF 6/28/2021 19:45:19' prior: 50953739!
buildSubmitButton

	| submitButtonMorph |
	
	submitButtonMorph := PluggableButtonMorph
		model: self model
		stateGetter: nil 
		action: #sendLoginRequest 
		label: 'Login'.
	
	^ submitButtonMorph! !
!LoginModel methodsFor: 'actions' stamp: 'JPF 6/28/2021 19:46:49'!
sendLoginRequest! !
!LoginWindow methodsFor: 'GUI building' stamp: 'JPF 6/28/2021 19:47:19' prior: 50953707 overrides: 50941419!
buildMorphicWindow

	self 
		layoutMorph beColumn;
		separation: 15;
		axisEdgeWeight: 0.5;
		addMorph: self buildClientIdRow;
		addMorph: self buildPasswordRow;
		addMorph: self buildSubmitButton.! !

loginWindow := LoginWindow open.!
!LoginWindow methodsFor: 'GUI building' stamp: 'JPF 6/28/2021 19:48:05' prior: 50953763 overrides: 50941419!
buildMorphicWindow

	self 
		layoutMorph beColumn;
		separation: 5;
		axisEdgeWeight: 0.5;
		addMorph: self buildClientIdRow;
		addMorph: self buildPasswordRow;
		addMorph: self buildSubmitButton.! !

loginWindow := LoginWindow open.!
!LoginWindow methodsFor: 'GUI building' stamp: 'JPF 6/28/2021 19:51:42' prior: 50953774 overrides: 50941419!
buildMorphicWindow

	self 
		layoutMorph beColumn;
		"separation: 5;
		axisEdgeWeight: 0.5;"
		addMorph: self buildClientIdRow;
		addMorph: self buildPasswordRow;
		addMorph: self buildSubmitButton.! !

loginWindow := LoginWindow open.!
!LoginWindow methodsFor: 'GUI building' stamp: 'JPF 6/28/2021 19:53:06' prior: 50953785 overrides: 50941419!
buildMorphicWindow

	self 
		layoutMorph beColumn;
		separation: 30;
		axisEdgeWeight: 0.5;
		addMorph: self buildClientIdRow;
		addMorph: self buildPasswordRow;
		addMorph: self buildSubmitButton.! !

loginWindow := LoginWindow open.!
!LoginWindow methodsFor: 'GUI building' stamp: 'JPF 6/28/2021 19:53:59' prior: 50953796 overrides: 50941419!
buildMorphicWindow

	self 
		layoutMorph beColumn;
		separation: 20;
		axisEdgeWeight: 0.5;
		addMorph: self buildClientIdRow;
		addMorph: self buildPasswordRow;
		addMorph: self buildSubmitButton.! !

loginWindow := LoginWindow open.!
!LoginWindow methodsFor: 'GUI building' stamp: 'JPF 6/28/2021 19:54:16' prior: 50953807 overrides: 50941419!
buildMorphicWindow

	self 
		layoutMorph beColumn;
		separation: 15;
		axisEdgeWeight: 0.5;
		addMorph: self buildClientIdRow;
		addMorph: self buildPasswordRow;
		addMorph: self buildSubmitButton.! !

loginWindow := LoginWindow open.!
!LoginWindow methodsFor: 'GUI building' stamp: 'JPF 6/28/2021 19:54:33' prior: 50953818 overrides: 50941419!
buildMorphicWindow

	self 
		layoutMorph beColumn;
		separation: 0;
		axisEdgeWeight: 0.5;
		addMorph: self buildClientIdRow;
		addMorph: self buildPasswordRow;
		addMorph: self buildSubmitButton.! !

loginWindow := LoginWindow open.!
!LoginWindow methodsFor: 'GUI building' stamp: 'JPF 6/28/2021 19:55:03' prior: 50953829 overrides: 50941419!
buildMorphicWindow

	self 
		layoutMorph beColumn;
		separation: 10;
		axisEdgeWeight: 0.5;
		addMorph: self buildClientIdRow;
		addMorph: self buildPasswordRow;
		addMorph: self buildSubmitButton.! !

loginWindow := LoginWindow open.!
!LoginWindow methodsFor: 'GUI building' stamp: 'JPF 6/28/2021 19:55:23' prior: 50953840 overrides: 50941419!
buildMorphicWindow

	self 
		layoutMorph beColumn;
		separation: 20;
		axisEdgeWeight: 0.5;
		addMorph: self buildClientIdRow;
		addMorph: self buildPasswordRow;
		addMorph: self buildSubmitButton.! !

loginWindow := LoginWindow open.!
!LoginWindow methodsFor: 'GUI building' stamp: 'JPF 6/28/2021 19:55:49' prior: 50953851 overrides: 50941419!
buildMorphicWindow

	self 
		layoutMorph beColumn;
		separation: 15;
		axisEdgeWeight: 0.5;
		addMorph: self buildClientIdRow;
		addMorph: self buildPasswordRow;
		addMorph: self buildSubmitButton.! !

loginWindow := LoginWindow open.!

Object subclass: #RestInterface
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Client'!

!classDefinition: #RestInterface category: #'TusLibros-Client' stamp: 'JPF 6/28/2021 20:01:10'!
Object subclass: #RestInterface
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Client'!

!classDefinition: #RestInterface category: #'TusLibros-Client' stamp: 'JPF 6/28/2021 20:02:19'!
Object subclass: #RestInterface
	instanceVariableNames: 'port'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Client'!
!RestInterface methodsFor: 'initialization' stamp: 'JPF 6/28/2021 20:02:15' overrides: 16896425!
initialize

	port := 8080! !

!classDefinition: #RestInterface category: #'TusLibros-Client' stamp: 'JPF 6/28/2021 20:02:45'!
Object subclass: #RestInterface
	instanceVariableNames: 'port url'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Client'!
!RestInterface methodsFor: 'initialization' stamp: 'JPF 6/28/2021 20:02:43' prior: 50953892 overrides: 16896425!
initialize

	port := 8080.
	url := ''.! !
!RestInterface methodsFor: 'initialization' stamp: 'JPF 6/28/2021 20:03:29' prior: 50953904 overrides: 16896425!
initialize

	port := 8080.! !
!RestInterface methodsFor: 'accessing' stamp: 'JPF 6/28/2021 20:03:49'!
url
	
	^'http://localhost:', self port asString! !
!RestInterface methodsFor: 'accessing' stamp: 'JPF 6/28/2021 20:04:05'!
port

	^ port! !

Object subclass: #RestInterface
	instanceVariableNames: 'port'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Client'!

!classDefinition: #RestInterface category: #'TusLibros-Client' stamp: 'JPF 6/28/2021 20:04:22'!
Object subclass: #RestInterface
	instanceVariableNames: 'port'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Client'!
!RestInterface methodsFor: 'requests' stamp: 'JPF 6/28/2021 20:04:45'!
sendLoginRequest! !
!RestInterface methodsFor: 'requests' stamp: 'JPF 6/28/2021 20:06:07'!
sendLoginRequestFor: aClientId authenticatingWith: aPassword! !
!RestInterface methodsFor: 'requests' stamp: 'JPF 6/28/2021 20:08:10'!
sendCreateCartRequestFor: aClientId authenticatingWith: aPassword! !

!methodRemoval: RestInterface #sendLoginRequestFor:authenticatingWith: stamp: 'JPF 6/28/2021 20:08:10'!
sendLoginRequestFor: aClientId authenticatingWith: aPassword!
!RestInterface methodsFor: 'requests' stamp: 'JPF 6/28/2021 20:08:31'!
sendCreateCartRequestFor: aClientId authenticatedWith: aPassword! !

!methodRemoval: RestInterface #sendCreateCartRequestFor:authenticatingWith: stamp: 'JPF 6/28/2021 20:08:31'!
sendCreateCartRequestFor: aClientId authenticatingWith: aPassword!

!methodRemoval: RestInterface #sendLoginRequest stamp: 'JPF 6/28/2021 20:08:41'!
sendLoginRequest!
!RestInterface methodsFor: 'requests' stamp: 'JPF 6/28/2021 20:12:01' prior: 50953950!
sendCreateCartRequestFor: aClientId authenticatedWith: aPassword

	| fieldDict resp urlEncodedClientId |

	urlEncodedClientId := WebUtils urlEncode: aClientId.	
	fieldDict := Dictionary with: ('clientId'->urlEncodedClientId).
	
	resp:= WebClient htmlSubmit: (self url,'/words') fields: fieldDict.
	
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream)) asOrderedCollection .] 
		ifFalse:[^self error: resp content].! !
!RestInterface methodsFor: 'requests' stamp: 'JPF 6/28/2021 20:12:49' prior: 50953964!
sendCreateCartRequestFor: aClientId authenticatedWith: aPassword

	| fieldDict resp urlEncodedClientId urlEncodedPassword |

	urlEncodedClientId := WebUtils urlEncode: aClientId.	
	urlEncodedPassword := WebUtils urlEncode: aPassword.
	fieldDict := Dictionary 
		with: ('clientId'->urlEncodedClientId)
		with: ('clientId'->urlEncodedClientId).
	
	resp:= WebClient htmlSubmit: (self url,'/words') fields: fieldDict.
	
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream)) asOrderedCollection .] 
		ifFalse:[^self error: resp content].! !
!RestInterface methodsFor: 'requests' stamp: 'JPF 6/28/2021 20:13:04' prior: 50953981!
sendCreateCartRequestFor: aClientId authenticatedWith: aPassword

	| fieldDict resp urlEncodedClientId urlEncodedPassword |

	urlEncodedClientId := WebUtils urlEncode: aClientId.	
	urlEncodedPassword := WebUtils urlEncode: aPassword.
	fieldDict := Dictionary 
		with: ('clientId'->urlEncodedClientId)
		with: ('clientId'->urlEncodedPassword).
	
	resp:= WebClient htmlSubmit: (self url,'/words') fields: fieldDict.
	
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream)) asOrderedCollection .] 
		ifFalse:[^self error: resp content].! !
!RestInterface methodsFor: 'requests' stamp: 'JPF 6/28/2021 20:13:24' prior: 50954002!
sendCreateCartRequestFor: aClientId authenticatedWith: aPassword

	| fieldDict resp urlEncodedClientId urlEncodedPassword |

	urlEncodedClientId := WebUtils urlEncode: aClientId.	
	urlEncodedPassword := WebUtils urlEncode: aPassword.
	fieldDict := Dictionary 
		with: ('clientId'->urlEncodedClientId)
		with: ('clientId'->urlEncodedPassword).
	
	resp:= WebClient htmlSubmit: (self url,'/createCart') fields: fieldDict.
	
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream)) asOrderedCollection .] 
		ifFalse:[^self error: resp content].! !
!RestInterface methodsFor: 'requests' stamp: 'JPF 6/28/2021 20:14:54' prior: 50954023!
sendCreateCartRequestFor: aClientId authenticatedWith: aPassword

	| fieldDict resp urlEncodedClientId urlEncodedPassword |

	urlEncodedClientId := WebUtils urlEncode: aClientId.	
	urlEncodedPassword := WebUtils urlEncode: aPassword.
	fieldDict := Dictionary 
		with: ('clientId'->urlEncodedClientId)
		with: ('clientId'->urlEncodedPassword).
	
	resp:= WebClient htmlSubmit: (self url,'/createCart') fields: fieldDict.
	
	resp isSuccess 
		ifTrue:[ ^WebUtils jsonDecode: ((resp content) readStream). ] 
		ifFalse:[ ^self error: resp content ].! !
!RestInterface methodsFor: 'requests' stamp: 'JPF 6/28/2021 20:15:26' prior: 50954044!
sendCreateCartRequestFor: aClientId authenticatedWith: aPassword

	| fieldDict response urlEncodedClientId urlEncodedPassword |

	urlEncodedClientId := WebUtils urlEncode: aClientId.	
	urlEncodedPassword := WebUtils urlEncode: aPassword.
	fieldDict := Dictionary 
		with: ('clientId'->urlEncodedClientId)
		with: ('clientId'->urlEncodedPassword).
	
	response:= WebClient htmlSubmit: (self url,'/createCart') fields: fieldDict.
	
	response isSuccess 
		ifTrue:[ ^WebUtils jsonDecode: ((response content) readStream). ] 
		ifFalse:[ ^self error: response content ].! !
!RestInterface methodsFor: 'requests' stamp: 'JPF 6/28/2021 20:15:29' prior: 50954064!
sendCreateCartRequestFor: aClientId authenticatedWith: aPassword

	| fieldDict response urlEncodedClientId urlEncodedPassword |

	urlEncodedClientId := WebUtils urlEncode: aClientId.	
	urlEncodedPassword := WebUtils urlEncode: aPassword.
	fieldDict := Dictionary 
		with: ('clientId'->urlEncodedClientId)
		with: ('clientId'->urlEncodedPassword).
	
	response := WebClient htmlSubmit: (self url,'/createCart') fields: fieldDict.
	
	response isSuccess 
		ifTrue:[ ^WebUtils jsonDecode: ((response content) readStream). ] 
		ifFalse:[ ^self error: response content ].! !

!classDefinition: #LoginModel category: #'TusLibros-Client' stamp: 'JPF 6/28/2021 20:16:41'!
Object subclass: #LoginModel
	instanceVariableNames: 'clientId password restInterface'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Client'!
!LoginModel methodsFor: 'actions' stamp: 'JPF 6/28/2021 20:16:35' prior: 50953758!
sendLoginRequest

	| cartId |
	cartId := restInterface! !
!LoginModel methodsFor: 'actions' stamp: 'JPF 6/28/2021 20:16:48' prior: 50954114!
sendLoginRequest

	| cartId |
	
	cartId := restInterface! !
!LoginModel methodsFor: 'actions' stamp: 'JPF 6/28/2021 20:17:28' prior: 50954119!
sendLoginRequest

	| cartId |
	
	cartId := restInterface 
		sendCreateCartRequestFor: clientId 
		authenticatedWith: password! !
!LoginModel methodsFor: 'actions' stamp: 'JPF 6/28/2021 20:17:49' prior: 50954124!
sendLoginRequest

	| cartId |
	
	cartId := restInterface 
		sendCreateCartRequestFor: clientId 
		authenticatedWith: password.
		
	! !
!LoginModel methodsFor: 'actions' stamp: 'JPF 6/28/2021 20:19:03' prior: 50954131!
sendLoginRequest

	| cartId |
	
	cartId := restInterface 
		sendCreateCartRequestFor: clientId 
		authenticatedWith: password.
		
	self triggerEvent: #newCartCreated with: self.
		
	! !

!classDefinition: #LoginModel category: #'TusLibros-Client' stamp: 'JPF 6/28/2021 20:19:34'!
Object subclass: #LoginModel
	instanceVariableNames: 'clientId password restInterface cartdId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Client'!
!LoginModel methodsFor: 'actions' stamp: 'JPF 6/28/2021 20:19:31' prior: 50954138!
sendLoginRequest

	cartdId := restInterface 
		sendCreateCartRequestFor: clientId 
		authenticatedWith: password.
		
	self triggerEvent: #newCartCreated with: self.
		
	! !

!classDefinition: #LoginModel category: #'TusLibros-Client' stamp: 'JPF 6/28/2021 20:19:41'!
Object subclass: #LoginModel
	instanceVariableNames: 'clientId password restInterface cartId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Client'!
!LoginModel methodsFor: 'as yet unclassified' stamp: 'JPF 6/28/2021 20:19:41' prior: 50954155!
sendLoginRequest

	cartId := restInterface 
		sendCreateCartRequestFor: clientId 
		authenticatedWith: password.
		
	self triggerEvent: #newCartCreated with: self.
		
	! !

Panel subclass: #MarketWindow
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Client'!

!classDefinition: #MarketWindow category: #'TusLibros-Client' stamp: 'JPF 6/28/2021 20:21:11'!
Panel subclass: #MarketWindow
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Client'!
!MarketWindow methodsFor: 'initialization' stamp: 'JPF 6/28/2021 20:21:56' overrides: 50941505!
defaultExtent

	^ 1080@1080! !

!classDefinition: #MarketModel category: #'TusLibros-Client' stamp: 'JPF 6/28/2021 20:22:35'!
Object subclass: #MarketModel
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Client'!
!MarketWindow methodsFor: 'initialization' stamp: 'JPF 6/28/2021 20:22:30'!
initializeWith: aTitle

	self titleMorph showButtonsNamed: #( close collapse ).
	self setLabel: aTitle.
	self model: (MarketModel new).
	self morphExtent: (self defaultExtent).
	self buildMorphicWindow.
	self openInWorld.! !
!MarketWindow methodsFor: 'initialization' stamp: 'JPF 6/28/2021 20:23:06' prior: 50954203!
initializeWith: aTitle

	self titleMorph showButtonsNamed: #( close collapse ).
	self setLabel: aTitle.
	self model: (MarketModel new).
	self morphExtent: (self defaultExtent).
	self buildMorphicWindow.
	self openInWorld.! !
!LoginWindow methodsFor: 'initialization' stamp: 'JPF 6/28/2021 20:26:37' prior: 50953383!
initializeWith: aTitle

	self titleMorph showButtonsNamed: #( close collapse ).
	self setLabel: aTitle.
	self model: (LoginModel new).
	self morphExtent: (self defaultExtent).
	self buildMorphicWindow.
	self openInWorld.
			
	self model when: #successfulLogin send: #refreshListOfWords to: self.! !
!LoginWindow methodsFor: 'initialization' stamp: 'JPF 6/28/2021 20:27:07' prior: 50954223!
initializeWith: aTitle

	self titleMorph showButtonsNamed: #( close collapse ).
	self setLabel: aTitle.
	self model: (LoginModel new).
	self morphExtent: (self defaultExtent).
	self buildMorphicWindow.
	self openInWorld.
			
	self model when: #successfulLogin send: #refreshListOfWords to: self.! !
!LoginWindow methodsFor: 'initialization' stamp: 'JPF 6/28/2021 20:27:13' prior: 50954236!
initializeWith: aTitle

	self titleMorph showButtonsNamed: #( close collapse ).
	self setLabel: aTitle.
	self model: (LoginModel new).
	self morphExtent: (self defaultExtent).
	self buildMorphicWindow.
	self openInWorld.
			
	"self model when: #successfulLogin send: #refreshListOfWords to: self."! !

loginWindow := LoginWindow open.!
!LoginWindow methodsFor: 'initialization' stamp: 'JPF 6/28/2021 20:29:39' prior: 50954249!
initializeWith: aTitle

	self titleMorph showButtonsNamed: #( close collapse ).
	self setLabel: aTitle.
	self model: (LoginModel new).
	self morphExtent: (self defaultExtent).
	self buildMorphicWindow.
	self openInWorld.

			
	self model when: #successfulLogin send: #delete to: self.! !
!LoginModel methodsFor: 'actions' stamp: 'JPF 6/28/2021 20:30:06' prior: 50954172!
sendLoginRequest

	cartId := restInterface 
		sendCreateCartRequestFor: clientId 
		authenticatedWith: password.
		
	self triggerEvent: #successfulLogin with: self.
		
	! !
!MarketWindow methodsFor: 'initialization' stamp: 'JPF 6/28/2021 20:31:22' prior: 50954213!
initializeWith: aTitle

	self titleMorph showButtonsNamed: #( close collapse ).
	self setLabel: aTitle.
	self model: (MarketModel new).
	self morphExtent: (self defaultExtent).
	self buildMorphicWindow.
		
	self model when: #successfulLogin send: #openInWorld to: self.! !

server destroy.!

server := TusLibrosRestInterface listeningOn: 8080.!

loginWindow := LoginWindow open.!
!LoginModel methodsFor: 'initialization' stamp: 'JPF 6/28/2021 20:33:59' prior: 50953733 overrides: 16896425!
initialize

	clientId := ''.
	password := ''.
	restInterface := RestInterface new.! !

loginWindow := LoginWindow open.!
!RestInterface methodsFor: 'encoding' stamp: 'JPF 6/28/2021 20:36:38'!
correctlyEncodeSpacesForUrlRequestParameter: aParameter
	
	^ aParameter copyReplaceAll: ' ' with: '%20'. ! !
!RestInterface methodsFor: 'requests' stamp: 'JPF 6/28/2021 20:37:12' prior: 50954085!
sendCreateCartRequestFor: aClientId authenticatedWith: aPassword

	| fieldDict response urlEncodedClientId urlEncodedPassword |

	urlEncodedClientId := WebUtils 
		correctlyEncodeSpacesForUrlRequestParameter: aClientId.	
	urlEncodedPassword := WebUtils 
		correctlyEncodeSpacesForUrlRequestParameter: aPassword.
	fieldDict := Dictionary 
		with: ('clientId'->urlEncodedClientId)
		with: ('clientId'->urlEncodedPassword).
	
	response := WebClient htmlSubmit: (self url,'/createCart') fields: fieldDict.
	
	response isSuccess 
		ifTrue:[ ^WebUtils jsonDecode: ((response content) readStream). ] 
		ifFalse:[ ^self error: response content ].! !

loginWindow := LoginWindow open.!
!RestInterface methodsFor: 'requests' stamp: 'JPF 6/28/2021 20:37:51' prior: 50954313!
sendCreateCartRequestFor: aClientId authenticatedWith: aPassword

	| fieldDict response urlEncodedClientId urlEncodedPassword |

	urlEncodedClientId := self 
		correctlyEncodeSpacesForUrlRequestParameter: aClientId.	
	urlEncodedPassword := self
		correctlyEncodeSpacesForUrlRequestParameter: aPassword.
	fieldDict := Dictionary 
		with: ('clientId'->urlEncodedClientId)
		with: ('clientId'->urlEncodedPassword).
	
	response := WebClient htmlSubmit: (self url,'/createCart') fields: fieldDict.
	
	response isSuccess 
		ifTrue:[ ^WebUtils jsonDecode: ((response content) readStream). ] 
		ifFalse:[ ^self error: response content ].! !

loginWindow := LoginWindow open.!
!TusLibrosRestInterface methodsFor: 'handlers' stamp: 'JPF 6/28/2021 20:39:31' prior: 50930599!
handleCreateCart: request

	self handle: request with: [	 | cartId clientId password |
	
		self halt.
		clientId := request fields at: 'clientId'.
		password := request fields at: 'password'.

		cartId := tusLibrosSystemFacade createCartFor: clientId authenticatedWith: password.

		request send200Response: cartId asString
	]! !
!TusLibrosRestInterface methodsFor: 'handlers' stamp: 'JPF 6/28/2021 20:40:58' prior: 50954361!
handleCreateCart: request

	self handle: request with: [	 | cartId clientId password |
	
		clientId := request fields at: 'clientId'.
		password := request fields at: 'password'.

		cartId := tusLibrosSystemFacade createCartFor: clientId authenticatedWith: password.

		request send200Response: cartId asString
	]! !

----SNAPSHOT----(28 June 2021 20:41:02) Interfaz.image priorSource: 19319542!
!RestInterface methodsFor: 'requests' stamp: 'JPF 6/28/2021 20:41:29' prior: 50954337!
sendCreateCartRequestFor: aClientId authenticatedWith: aPassword

	| fieldDict response urlEncodedClientId urlEncodedPassword |

	urlEncodedClientId := self 
		correctlyEncodeSpacesForUrlRequestParameter: aClientId.	
	urlEncodedPassword := self
		correctlyEncodeSpacesForUrlRequestParameter: aPassword.
	fieldDict := Dictionary 
		with: ('clientId'->urlEncodedClientId)
		with: ('password'->urlEncodedPassword).
	
	response := WebClient htmlSubmit: (self url,'/createCart') fields: fieldDict.
	
	response isSuccess 
		ifTrue:[ ^WebUtils jsonDecode: ((response content) readStream). ] 
		ifFalse:[ ^self error: response content ].! !
!TusLibrosRestInterface methodsFor: 'handlers' stamp: 'JPF 6/28/2021 20:44:18' prior: 50954375!
handleCreateCart: request

	self handle: request with: [	 | cartId clientId password |
	
		clientId := self getParameter: 'clientId' from: request.
		password := request fields at: 'password'.

		cartId := tusLibrosSystemFacade createCartFor: clientId authenticatedWith: password.

		request send200Response: cartId asString
	]! !
!TusLibrosRestInterface methodsFor: 'private - parameters handling' stamp: 'JPF 6/28/2021 20:47:58'!
getParameter: aParameter from: aRequest

	^ aRequest fields at: aParameter ifAbsent: [ self signalMissingParameterError: aParameter ]! !
!TusLibrosRestInterface methodsFor: 'error signaling' stamp: 'JPF 6/28/2021 20:50:07'!
signalMissingParameterError: missingParameter

	^ missingParameter, ' parameter must be sended in the request'! !
!TusLibrosRestInterface methodsFor: 'handlers' stamp: 'JPF 6/28/2021 20:52:02' prior: 50930678!
handleAddToCart: request

	self handle: request with: [	 | book quantity cartId |	
		
		cartId := self getParameter: 'cartId' from: request.
		book := self getParameter:  'book' from: request.
		quantity := self getParameter: 'quantity' from: request. 
		
		tusLibrosSystemFacade
			add: quantity asNumber
			of: book
			toCartIdentifiedAs: cartId asNumber.
		
		request send200Response: 'OK'
	]! !
!TusLibrosRestInterface methodsFor: 'handlers' stamp: 'JPF 6/28/2021 20:52:49' prior: 50931956!
handleCheckOutCart: request

	self handle: request with: [	 | cartId ticket response |	
		
		cartId := self getParameter: 'cartId' from: request.
		
		ticket := tusLibrosSystemFacade
			checkOutCartIdentifiedAs: cartId asNumber
			withCreditCardNumbered: '1111222211112222'
			ownedBy: 'Juan Ferrino'
			expiringOn: (Month month: 11 year: 2026).
			
		response := Mapper mapTicketToResponse: ticket.
		
		request send200Response: (WebUtils jsonEncode: response).
	]! !
!TusLibrosRestInterface methodsFor: 'handlers' stamp: 'JPF 6/28/2021 20:53:24' prior: 50954414!
handleCreateCart: request

	self handle: request with: [	 | cartId clientId password |
	
		clientId := self getParameter: 'clientId' from: request.
		password := self getParameter: 'password' from: request.

		cartId := tusLibrosSystemFacade createCartFor: clientId authenticatedWith: password.

		request send200Response: cartId asString
	]! !
!TusLibrosRestInterface methodsFor: 'handlers' stamp: 'JPF 6/28/2021 20:53:57' prior: 50931716!
handleListCart: request

	self handle: request with: [	 | cartId cart |	
		
		cartId := self getParameter: 'cartId' from: request.
		
		cart := tusLibrosSystemFacade listCartIdentifiedAs: cartId asNumber.
		
		request send200Response: (WebUtils jsonEncode: cart contents).
	]! !
!TusLibrosRestInterface methodsFor: 'handlers' stamp: 'JPF 6/28/2021 20:54:38' prior: 50934195!
handleListPurchases: request

	self handle: request with: [	 | clientId password purchases response |	
		
		clientId := self getParameter: 'clientId' from: request.
		password := self getParameter: 'password' from: request.
		
		purchases := tusLibrosSystemFacade listPurchasesOf: clientId authenticatingWith: password.
		
		response := Mapper mapPurchasesDetailToResponse: purchases.
		
		request send200Response: (WebUtils jsonEncode: response).
	]! !
!TusLibrosRestInterface methodsFor: 'handlers' stamp: 'JPF 6/28/2021 20:55:25' prior: 50935340!
handleRemoveFromCart: request

	self handle: request with: [	 | book cartId |	
		
		cartId := self getParameter: 'cartId' from: request.
		book := self getParameter: 'book' from: request.
		
		tusLibrosSystemFacade
			remove: book
			fromCartIdentifiedAs: cartId asNumber.
		
		request send200Response: 'OK'
	]! !

loginWindow := LoginWindow open.!
!LoginWindow methodsFor: 'initialization' stamp: 'JPF 6/28/2021 20:57:36' prior: 50954263!
initializeWith: aTitle

	self titleMorph showButtonsNamed: #( close collapse ).
	self setLabel: aTitle.
	self model: (LoginModel new).
	self morphExtent: (self defaultExtent).
	self buildMorphicWindow.
	self openInWorld.

			
	self when: #successfulLogin send: #delete to: self.! !
!MarketWindow methodsFor: 'initialization' stamp: 'JPF 6/28/2021 20:57:58' prior: 50954284!
initializeWith: aTitle

	self titleMorph showButtonsNamed: #( close collapse ).
	self setLabel: aTitle.
	self model: (MarketModel new).
	self morphExtent: (self defaultExtent).
	self buildMorphicWindow.
		
	self when: #successfulLogin send: #openInWorld to: self.! !

loginWindow := LoginWindow open.!
!MarketWindow methodsFor: 'initialization' stamp: 'JPF 6/28/2021 21:05:28' prior: 50954546!
initializeWith: aTitle

	self titleMorph showButtonsNamed: #( close collapse ).
	self setLabel: aTitle.
	self model: (MarketModel new).
	self morphExtent: (self defaultExtent).
	self buildMorphicWindow.
	self openInWorld.
		
	self model when: #successfulLogin send: #openInWorld to: self.! !
!MarketWindow methodsFor: 'initialization' stamp: 'JPF 6/28/2021 21:05:34' prior: 50954559!
initializeWith: aTitle

	self titleMorph showButtonsNamed: #( close collapse ).
	self setLabel: aTitle.
	self model: (MarketModel new).
	self morphExtent: (self defaultExtent).
	self buildMorphicWindow.
	self openInWorld.
		
	"self model when: #successfulLogin send: #openInWorld to: self."! !
!LoginWindow methodsFor: 'initialization' stamp: 'JPF 6/28/2021 21:06:20' prior: 50954534!
initializeWith: aTitle

	self titleMorph showButtonsNamed: #( close collapse ).
	self setLabel: aTitle.
	self model: (LoginModel new).
	self morphExtent: (self defaultExtent).
	self buildMorphicWindow.
	self openInWorld.

			
	self when: #successfulLogin send: #openMarketWindow to: self.! !
!LoginWindow methodsFor: 'windows management' stamp: 'JPF 6/28/2021 21:07:44'!
openMarketWindow
	
	MarketWindow open.! !
!LoginWindow methodsFor: 'windows management' stamp: 'JPF 6/28/2021 21:07:51' prior: 50954596!
openMarketWindow
	
	MarketWindow open.
	self delete.! !
!MarketWindow class methodsFor: 'instance creation' stamp: 'JPF 6/28/2021 21:08:32'!
open

	^ self new initializeWith: 'Tus Libros Market'! !

loginWindow := LoginWindow open.!
!LoginWindow methodsFor: 'initialization' stamp: 'JPF 6/28/2021 21:09:35' prior: 50954584!
initializeWith: aTitle

	self titleMorph showButtonsNamed: #( close collapse ).
	self setLabel: aTitle.
	self model: (LoginModel new).
	self morphExtent: (self defaultExtent).
	self buildMorphicWindow.
	self openInWorld.

			
	self model when: #successfulLogin send: #openMarketWindow to: self.! !

loginWindow := LoginWindow open.!
!MarketWindow methodsFor: 'GUI building' stamp: 'JPF 6/28/2021 21:10:34' overrides: 50941419!
buildMorphicWindow
	self shouldBeImplemented.! !
!MarketWindow methodsFor: 'GUI building' stamp: 'JPF 6/28/2021 21:10:40' prior: 50954626 overrides: 50941419!
buildMorphicWindow! !
!MarketWindow methodsFor: 'initialization' stamp: 'JPF 6/28/2021 21:11:25' prior: 50954192 overrides: 50941505!
defaultExtent

	^ 1000@700! !

loginWindow := LoginWindow open.!
!MarketWindow methodsFor: 'GUI building' stamp: 'JPF 6/28/2021 21:15:10' prior: 50954631 overrides: 50941419!
buildMorphicWindow

	self layoutMorph beRow;
	separation: 15;
	axisEdgeWeight: 0;
	addMorph: self buildCatalogColumn;
	addMorph: self buildCartColumn.! !
!MarketWindow methodsFor: 'GUI building' stamp: 'JPF 6/28/2021 21:15:22'!
buildCatalogColumn! !
!MarketWindow methodsFor: 'GUI building' stamp: 'JPF 6/28/2021 21:15:32'!
buildCartColumn! !
!MarketWindow methodsFor: 'GUI building' stamp: 'JPF 6/28/2021 21:16:02' prior: 50954642 overrides: 50941419!
buildMorphicWindow

	self layoutMorph beRow;
	separation: 15;
	axisEdgeWeight: 0;
	addMorph: self buildCatalogColumn".;
	addMorph: self buildCartColumn."! !
!MarketWindow methodsFor: 'GUI building' stamp: 'JPF 6/28/2021 21:18:53'!
buildProductSelectionColumn! !
!MarketWindow methodsFor: 'as yet unclassified' stamp: 'JPF 6/28/2021 21:18:53' prior: 50954658 overrides: 50941419!
buildMorphicWindow

	self layoutMorph beRow;
	separation: 15;
	axisEdgeWeight: 0;
	addMorph: self buildProductSelectionColumn".;
	addMorph: self buildCartColumn."! !

!methodRemoval: MarketWindow #buildCatalogColumn stamp: 'JPF 6/28/2021 21:18:53'!
buildCatalogColumn!
!MarketWindow methodsFor: 'GUI building' stamp: 'JPF 6/28/2021 21:19:50' prior: 50954666!
buildProductSelectionColumn

	| productSelectionLayoutMorph |! !

!classDefinition: #MarketWindow category: #'TusLibros-Client' stamp: 'JPF 6/28/2021 21:21:02'!
Panel subclass: #MarketWindow
	instanceVariableNames: 'catalogListMorph'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Client'!
!MarketWindow methodsFor: 'GUI building' stamp: 'JPF 6/28/2021 21:21:00' prior: 50954683!
buildProductSelectionColumn

	| productSelectionLayoutMorph |
	
	catalogListMorph := PluggableListMorph 
		model: self model 
		listGetter: #words 
		indexGetter: #wordsListIndex 
		indexSetter: #wordsListIndex:.
	catalogListMorph 
		borderColor: Color skyBlue; 
		borderWidth: 1; 
		morphWidth:300.! !
!MarketWindow methodsFor: 'GUI building' stamp: 'JPF 6/28/2021 21:21:39' prior: 50954696!
buildProductSelectionColumn

	| productSelectionLayoutMorph |
	
	catalogListMorph := PluggableListMorph 
		model: self model 
		listGetter: #catalog
		indexGetter: #catalogListIndex 
		indexSetter: #catalogListIndex:.
	catalogListMorph 
		borderColor: Color skyBlue; 
		borderWidth: 1; 
		morphWidth:300.! !
!MarketWindow methodsFor: 'GUI building' stamp: 'JPF 6/28/2021 21:29:25' prior: 50954709!
buildProductSelectionColumn

	| productSelectionLayoutMorph |
	
	catalogListMorph := PluggableListMorph 
		model: self model 
		listGetter: #catalog
		indexGetter: #catalogListIndex 
		indexSetter: #catalogListIndex:.
	catalogListMorph 
		borderColor: Color skyBlue; 
		borderWidth: 1; 
		morphWidth:300.
		
	productSelectionLayoutMorph := LayoutMorph newColumn.
	productSelectionLayoutMorph 
		separation: 10;
		addMorph: catalogListMorph;
		addMorph: self buildQuantitySelectionRow.! !
!MarketWindow methodsFor: 'GUI building' stamp: 'JPF 6/28/2021 21:29:49'!
buildAddProductColumn

	| productSelectionLayoutMorph |
	
	catalogListMorph := PluggableListMorph 
		model: self model 
		listGetter: #catalog
		indexGetter: #catalogListIndex 
		indexSetter: #catalogListIndex:.
	catalogListMorph 
		borderColor: Color skyBlue; 
		borderWidth: 1; 
		morphWidth:300.
		
	productSelectionLayoutMorph := LayoutMorph newColumn.
	productSelectionLayoutMorph 
		separation: 10;
		addMorph: catalogListMorph;
		addMorph: self buildQuantitySelectionRow.! !
!MarketWindow methodsFor: 'as yet unclassified' stamp: 'JPF 6/28/2021 21:29:49' prior: 50954671 overrides: 50941419!
buildMorphicWindow

	self layoutMorph beRow;
	separation: 15;
	axisEdgeWeight: 0;
	addMorph: self buildAddProductColumn".;
	addMorph: self buildCartColumn."! !

!methodRemoval: MarketWindow #buildProductSelectionColumn stamp: 'JPF 6/28/2021 21:29:49'!
buildProductSelectionColumn

	| productSelectionLayoutMorph |
	
	catalogListMorph := PluggableListMorph 
		model: self model 
		listGetter: #catalog
		indexGetter: #catalogListIndex 
		indexSetter: #catalogListIndex:.
	catalogListMorph 
		borderColor: Color skyBlue; 
		borderWidth: 1; 
		morphWidth:300.
		
	productSelectionLayoutMorph := LayoutMorph newColumn.
	productSelectionLayoutMorph 
		separation: 10;
		addMorph: catalogListMorph;
		addMorph: self buildQuantitySelectionRow.!
!MarketWindow methodsFor: 'GUI building' stamp: 'JPF 6/28/2021 21:31:06'!
buildQuantitySelectionRow

	! !
!MarketWindow methodsFor: 'GUI building' stamp: 'JPF 6/28/2021 21:33:10' prior: 50954785!
buildQuantitySelectionRow

	| quantitySelectionRowLayout |
	quantitySelectionRowLayout := LayoutMorph newRow.
! !
!MarketWindow methodsFor: 'GUI building' stamp: 'JPF 6/28/2021 21:35:01' prior: 50954789!
buildQuantitySelectionRow

	| quantitySelectionRowLayout |
	
	quantitySelectionRowLayout := LayoutMorph newColumn.
	quantitySelectionRowLayout 
	
	
! !
!MarketWindow methodsFor: 'GUI building' stamp: 'JPF 6/28/2021 21:35:17' prior: 50954796!
buildQuantitySelectionRow

	| quantitySelectionColumnLayout |
	
	quantitySelectionColumnLayout := LayoutMorph newColumn.
	quantitySelectionColumnLayout 
	
	
! !

!classDefinition: #MarketWindow category: #'TusLibros-Client' stamp: 'JPF 6/28/2021 21:36:02'!
Panel subclass: #MarketWindow
	instanceVariableNames: 'catalogListMorph sentenceTextBoxMorph'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Client'!
!MarketWindow methodsFor: 'GUI building' stamp: 'JPF 6/28/2021 21:35:58' prior: 50954804!
buildQuantitySelectionRow

	| quantitySelectionColumnLayout |
	
	sentenceTextBoxMorph := TextModelMorph textProvider: self model textGetter: #sentenceText textSetter: #sentenceText:. 
	sentenceTextBoxMorph textMorph setProperty: #keyStroke: toValue: [ :key | sentenceTextBoxMorph textMorph acceptContents ] .
	sentenceTextBoxMorph  borderWidth: 1; borderColor: Color skyBlue; morphWidth: 300.
	
	quantitySelectionColumnLayout := LayoutMorph newColumn.
	quantitySelectionColumnLayout 
	
	
! !

!classDefinition: #MarketWindow category: #'TusLibros-Client' stamp: 'JPF 6/28/2021 21:36:15'!
Panel subclass: #MarketWindow
	instanceVariableNames: 'catalogListMorph quantityToAddTextBoxMorph'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Client'!
!MarketWindow methodsFor: 'as yet unclassified' stamp: 'JPF 6/28/2021 21:36:15' prior: 50954821!
buildQuantitySelectionRow

	| quantitySelectionColumnLayout |
	
	quantityToAddTextBoxMorph := TextModelMorph textProvider: self model textGetter: #sentenceText textSetter: #sentenceText:. 
	quantityToAddTextBoxMorph textMorph setProperty: #keyStroke: toValue: [ :key | quantityToAddTextBoxMorph textMorph acceptContents ] .
	quantityToAddTextBoxMorph  borderWidth: 1; borderColor: Color skyBlue; morphWidth: 300.
	
	quantitySelectionColumnLayout := LayoutMorph newColumn.
	quantitySelectionColumnLayout 
	
	
! !
!MarketWindow methodsFor: 'GUI building' stamp: 'JPF 6/28/2021 21:36:49' prior: 50954848!
buildQuantitySelectionRow

	| quantitySelectionColumnLayout |
	
	quantityToAddTextBoxMorph := TextModelMorph 
		textProvider: self model 
		textGetter: #quantityToAdd 
		textSetter: #quantityToAdd:. 
	quantityToAddTextBoxMorph textMorph setProperty: #keyStroke: toValue: [ :key | quantityToAddTextBoxMorph textMorph acceptContents ] .
	quantityToAddTextBoxMorph  borderWidth: 1; borderColor: Color skyBlue; morphWidth: 300.
	
	quantitySelectionColumnLayout := LayoutMorph newColumn.
	quantitySelectionColumnLayout 
	
	
! !
!MarketWindow methodsFor: 'GUI building' stamp: 'JPF 6/28/2021 21:38:31' prior: 50954867!
buildQuantitySelectionRow

	| quantitySelectionColumnLayout |
	
	quantityToAddTextBoxMorph := TextModelMorph 
		textProvider: self model 
		textGetter: #quantityToAdd 
		textSetter: #quantityToAdd:. 
	quantityToAddTextBoxMorph textMorph
		setProperty: #keyStroke:
		toValue: [ :key | quantityToAddTextBoxMorph textMorph acceptContents ].
	quantityToAddTextBoxMorph 
		borderWidth: 1;
		borderColor: Color skyBlue;
		morphWidth: 300.
	
	quantitySelectionColumnLayout := LayoutMorph newColumn.
	quantitySelectionColumnLayout 
		addMorph: (LabelMorph contents: 'Quantity');
		addMorph: quantityToAddTextBoxMorph.
	
	
! !
!MarketWindow methodsFor: 'GUI building' stamp: 'JPF 6/28/2021 21:40:25' prior: 50954887!
buildQuantitySelectionRow

	| quantitySelectionColumnLayout addProductButtonMorph |
	
	quantityToAddTextBoxMorph := TextModelMorph 
		textProvider: self model 
		textGetter: #quantityToAdd 
		textSetter: #quantityToAdd:. 
	quantityToAddTextBoxMorph textMorph
		setProperty: #keyStroke:
		toValue: [ :key | quantityToAddTextBoxMorph textMorph acceptContents ].
	quantityToAddTextBoxMorph 
		borderWidth: 1;
		borderColor: Color skyBlue;
		morphWidth: 300.
	
	quantitySelectionColumnLayout := LayoutMorph newColumn.
	quantitySelectionColumnLayout 
		addMorph: (LabelMorph contents: 'Quantity');
		addMorph: quantityToAddTextBoxMorph.
	
	addProductButtonMorph := PluggableButtonMorph 
		model: self model 
		stateGetter: nil 
		action: #sendWordsFromSentenceRequest  
		label: 'Send Request To Server'.	
	
	
	
! !
!MarketWindow methodsFor: 'GUI building' stamp: 'JPF 6/28/2021 21:41:29' prior: 50954910!
buildQuantitySelectionRow

	| quantitySelectionColumnLayout addProductButtonMorph |
	
	quantityToAddTextBoxMorph := TextModelMorph 
		textProvider: self model 
		textGetter: #quantityToAdd 
		textSetter: #quantityToAdd:. 
	quantityToAddTextBoxMorph textMorph
		setProperty: #keyStroke:
		toValue: [ :key | quantityToAddTextBoxMorph textMorph acceptContents ].
	quantityToAddTextBoxMorph 
		borderWidth: 1;
		borderColor: Color skyBlue;
		morphWidth: 300.
	
	quantitySelectionColumnLayout := LayoutMorph newColumn.
	quantitySelectionColumnLayout 
		addMorph: (LabelMorph contents: 'Quantity');
		addMorph: quantityToAddTextBoxMorph.
	
	addProductButtonMorph := PluggableButtonMorph 
		model: self model 
		stateGetter: nil 
		action: #sendAddToCartRequest  
		label: 'Add to cart'.	
	
	
	
! !
!MarketWindow methodsFor: 'GUI building' stamp: 'JPF 6/28/2021 21:42:38' prior: 50954939!
buildQuantitySelectionRow

	| quantitySelectionColumnLayout addProductButtonMorph quantitySelectionRowLayout |
	
	quantityToAddTextBoxMorph := TextModelMorph 
		textProvider: self model 
		textGetter: #quantityToAdd 
		textSetter: #quantityToAdd:. 
	quantityToAddTextBoxMorph textMorph
		setProperty: #keyStroke:
		toValue: [ :key | quantityToAddTextBoxMorph textMorph acceptContents ].
	quantityToAddTextBoxMorph 
		borderWidth: 1;
		borderColor: Color skyBlue;
		morphWidth: 300.
	
	quantitySelectionColumnLayout := LayoutMorph newColumn.
	quantitySelectionColumnLayout 
		addMorph: (LabelMorph contents: 'Quantity');
		addMorph: quantityToAddTextBoxMorph.
	
	addProductButtonMorph := PluggableButtonMorph 
		model: self model 
		stateGetter: nil 
		action: #sendAddToCartRequest  
		label: 'Add to cart'.	
		
	quantitySelectionRowLayout := LayoutMorph newRow.
		
	
	
	
! !
!MarketWindow methodsFor: 'GUI building' stamp: 'JPF 6/28/2021 21:43:50' prior: 50954967!
buildQuantitySelectionRow

	| quantitySelectionColumnLayout addProductButtonMorph quantitySelectionRowLayout |
	
	quantityToAddTextBoxMorph := TextModelMorph 
		textProvider: self model 
		textGetter: #quantityToAdd 
		textSetter: #quantityToAdd:. 
	quantityToAddTextBoxMorph textMorph
		setProperty: #keyStroke:
		toValue: [ :key | quantityToAddTextBoxMorph textMorph acceptContents ].
	quantityToAddTextBoxMorph 
		borderWidth: 1;
		borderColor: Color skyBlue;
		morphWidth: 300.
	
	quantitySelectionColumnLayout := LayoutMorph newColumn.
	quantitySelectionColumnLayout 
		addMorph: (LabelMorph contents: 'Quantity');
		addMorph: quantityToAddTextBoxMorph.
	
	addProductButtonMorph := PluggableButtonMorph 
		model: self model 
		stateGetter: nil 
		action: #sendAddToCartRequest  
		label: 'Add to cart'.	
		
	quantitySelectionRowLayout := LayoutMorph newRow.
	quantitySelectionRowLayout
		addMorph: quantitySelectionColumnLayout;
		addMorph: addProductButtonMorph.
		
	^ quantitySelectionRowLayout.
		
	
	
	
! !

loginWindow := LoginWindow open.!

!classDefinition: #MarketModel category: #'TusLibros-Client' stamp: 'JPF 6/28/2021 21:45:53'!
Object subclass: #MarketModel
	instanceVariableNames: 'quantityToAdd'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Client'!
!MarketModel methodsFor: 'product selection' stamp: 'JPF 6/28/2021 21:45:51'!
quantityToAdd
	
	^ quantityToAdd! !
!MarketModel methodsFor: 'product selection' stamp: 'JPF 6/28/2021 21:46:07'!
quantityToAdd: value
	
	quantityToAdd := value! !

!classDefinition: #MarketModel category: #'TusLibros-Client' stamp: 'JPF 6/28/2021 21:46:42'!
Object subclass: #MarketModel
	instanceVariableNames: 'quantityToAdd catalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Client'!
!MarketModel methodsFor: 'product selection' stamp: 'JPF 6/28/2021 21:46:40'!
catalog

	^ catalog! !

!classDefinition: #MarketModel category: #'TusLibros-Client' stamp: 'JPF 6/28/2021 21:47:07'!
Object subclass: #MarketModel
	instanceVariableNames: 'quantityToAdd catalog catalogListIndex'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Client'!
!MarketModel methodsFor: 'product selection' stamp: 'JPF 6/28/2021 21:47:06'!
catalogListIndex

	^ catalogListIndex! !
!MarketModel methodsFor: 'product selection' stamp: 'JPF 6/28/2021 21:47:18'!
catalogListIndex: value

	catalogListIndex := value! !
!MarketModel methodsFor: 'actions' stamp: 'JPF 6/28/2021 21:48:03'!
sendAddToCartRequest! !

marketWindow := MarketWindow new.!

marketWindow := MarketWindow open.
!
!MarketModel methodsFor: 'initialization' stamp: 'JPF 6/28/2021 21:50:10' overrides: 16896425!
initialize

	quantityToAdd := 1.
	

	! !
!MarketModel methodsFor: 'initialization' stamp: 'JPF 6/28/2021 21:50:40' prior: 50955084 overrides: 16896425!
initialize

	quantityToAdd := 1.
	catalog := {}.
	

	! !
!MarketModel methodsFor: 'initialization' stamp: 'JPF 6/28/2021 21:50:56' prior: 50955089 overrides: 16896425!
initialize

	quantityToAdd := 1.
	catalog := {}.
	catalogListIndex := 0.
	

	! !
!MarketModel methodsFor: 'initialization' stamp: 'JPF 6/28/2021 21:51:43' prior: 50955095 overrides: 16896425!
initialize

	quantityToAdd := 1.
	catalog := OrderedCollection new.
	catalogListIndex := 0.
	

	! !

marketWindow := MarketWindow open.!
!MarketModel methodsFor: 'product selection' stamp: 'JPF 6/28/2021 21:53:28' prior: 50955041!
quantityToAdd
	
	^ quantityToAdd asString.! !
!MarketModel methodsFor: 'product selection' stamp: 'JPF 6/28/2021 21:53:38' prior: 50955045!
quantityToAdd: value
	
	quantityToAdd := value asNumber.! !

marketWindow := MarketWindow open.!
!MarketModel methodsFor: 'product selection' stamp: 'JPF 6/28/2021 21:53:56' prior: 50955114!
quantityToAdd: value
	
	quantityToAdd := value.! !
!MarketModel methodsFor: 'product selection' stamp: 'JPF 6/28/2021 21:54:06' prior: 50955109!
quantityToAdd
	
	^ quantityToAdd.! !
!MarketModel methodsFor: 'initialization' stamp: 'JPF 6/28/2021 21:54:17' prior: 50955101 overrides: 16896425!
initialize

	quantityToAdd := '1'.
	catalog := OrderedCollection new.
	catalogListIndex := 0.
	

	! !

marketWindow := MarketWindow open.!

marketWindow := MarketWindow open.!

----SNAPSHOT----(28 June 2021 22:30:04) Interfaz.image priorSource: 19927580!

----QUIT----(28 June 2021 22:32:16) Interfaz.image priorSource: 19951599!

----STARTUP---- (29 June 2021 20:13:29) as /Users/juan.ferrino/CuisUniversity/Interfaz.image!


server destroy.!

server := TusLibrosRestInterface listeningOn: 8080.!
!TusLibrosRestInterface methodsFor: 'private - request handling' stamp: 'JPF 6/29/2021 20:28:42' prior: 50930448!
handle: request with: aBlock
		
	| responseFor200 |
	
	[aBlock value: responseFor200.
	request send200Response: responseFor200 ]
	on: Error
	do: [ :anError |
		request send400Response: (anError messageText) ]! !
!TusLibrosRestInterface methodsFor: 'handlers' stamp: 'JPF 6/29/2021 20:29:47' prior: 50954476!
handleCreateCart: request

	self handle: request with: [	 :responseFor200 || cartId clientId password |
	
		clientId := self getParameter: 'clientId' from: request.
		password := self getParameter: 'password' from: request.

		cartId := tusLibrosSystemFacade createCartFor: clientId authenticatedWith: password.

		request send200Response: cartId asString
	]! !
!TusLibrosRestInterface methodsFor: 'handlers' stamp: 'JPF 6/29/2021 20:32:03' prior: 50955160!
handleCreateCart: request

	self handle: request with: [	 :responseFor200 || cartId clientId password |
	
		clientId := self getParameter: 'clientId' from: request.
		password := self getParameter: 'password' from: request.

		cartId := tusLibrosSystemFacade createCartFor: clientId authenticatedWith: password.

		request send200Response: cartId asString
		
	]! !
!TusLibrosRestInterface methodsFor: 'private - request handling' stamp: 'JPF 6/29/2021 20:32:43' prior: 50955150!
handle: request with: aBlock
		
	
	
	[aBlock value]
	on: Error
	do: [ :anError |
		request send400Response: (anError messageText) ]! !
!TusLibrosRestInterface methodsFor: 'private - request handling' stamp: 'JPF 6/29/2021 20:32:50' prior: 50955190!
handle: request with: aBlock
		
	[aBlock value]
	on: Error
	do: [ :anError |
		request send400Response: (anError messageText) ]! !
!MarketWindow methodsFor: 'GUI building' stamp: 'JPF 6/29/2021 20:37:54' prior: 50954740!
buildAddProductColumn

	| productSelectionLayoutMorph |
	
	catalogListMorph := PluggableListMorph 
		model: self model 
		listGetter: #catalog
		indexGetter: #catalogListIndex 
		indexSetter: #catalogListIndex:.
	catalogListMorph 
		borderColor: Color skyBlue; 
		borderWidth: 1; 
		morphWidth:300.
		
	productSelectionLayoutMorph := LayoutMorph newColumn.
	productSelectionLayoutMorph 
		separation: 10;
		addMorph: catalogListMorph.";
		addMorph: self buildQuantitySelectionRow."! !

marketWindow := MarketWindow open.!
!MarketWindow methodsFor: 'GUI building' stamp: 'JPF 6/29/2021 20:38:48' prior: 50955205!
buildAddProductColumn

	| productSelectionLayoutMorph |
	
	catalogListMorph := PluggableListMorph 
		model: self model 
		listGetter: #catalog
		indexGetter: #catalogListIndex 
		indexSetter: #catalogListIndex:.
	catalogListMorph 
		borderColor: Color skyBlue; 
		borderWidth: 1; 
		morphWidth:300.
		
	productSelectionLayoutMorph := LayoutMorph newColumn.
	productSelectionLayoutMorph 
		separation: 10;
		axisEdgeWeight: 0;
		addMorph: catalogListMorph.";
		addMorph: self buildQuantitySelectionRow."! !

marketWindow := MarketWindow open.!
!MarketWindow methodsFor: 'GUI building' stamp: 'JPF 6/29/2021 20:39:32' prior: 50955225!
buildAddProductColumn

	| productSelectionLayoutMorph |
	
	catalogListMorph := PluggableListMorph 
		model: self model 
		listGetter: #catalog
		indexGetter: #catalogListIndex 
		indexSetter: #catalogListIndex:.
	catalogListMorph 
		borderColor: Color skyBlue; 
		borderWidth: 1; 
		morphWidth:300.
		
	productSelectionLayoutMorph := LayoutMorph newColumn.
	productSelectionLayoutMorph 
		separation: 10;
		axisEdgeWeight: 0";
		addMorph: catalogListMorph.;
		addMorph: self buildQuantitySelectionRow."! !

marketWindow := MarketWindow open.!
!MarketWindow methodsFor: 'GUI building' stamp: 'JPF 6/29/2021 20:39:55' prior: 50955245!
buildAddProductColumn

	| productSelectionLayoutMorph |
	
	"catalogListMorph := PluggableListMorph 
		model: self model 
		listGetter: #catalog
		indexGetter: #catalogListIndex 
		indexSetter: #catalogListIndex:.
	catalogListMorph 
		borderColor: Color skyBlue; 
		borderWidth: 1; 
		morphWidth:300.
		
	productSelectionLayoutMorph := LayoutMorph newColumn.
	productSelectionLayoutMorph 
		separation: 10;
		axisEdgeWeight: 0;
		addMorph: catalogListMorph.;
		addMorph: self buildQuantitySelectionRow."! !
!MarketWindow methodsFor: 'GUI building' stamp: 'JPF 6/29/2021 20:40:41' prior: 50955265!
buildAddProductColumn

	| productSelectionLayoutMorph |
	
	"catalogListMorph := PluggableListMorph 
		model: self model 
		listGetter: #catalog
		indexGetter: #catalogListIndex 
		indexSetter: #catalogListIndex:.
	catalogListMorph 
		borderColor: Color skyBlue; 
		borderWidth: 1; 
		morphWidth:300."
		
	productSelectionLayoutMorph := LayoutMorph newColumn.
	"productSelectionLayoutMorph 
		separation: 10;
		axisEdgeWeight: 0;
		addMorph: catalogListMorph;
		addMorph: self buildQuantitySelectionRow."! !
!MarketWindow methodsFor: 'GUI building' stamp: 'JPF 6/29/2021 20:42:23' prior: 50955284!
buildAddProductColumn

	| productSelectionLayoutMorph |
	
	catalogListMorph := PluggableListMorph 
		model: self model 
		listGetter: #catalog
		indexGetter: #catalogListIndex 
		indexSetter: #catalogListIndex:.
	catalogListMorph 
		borderColor: Color skyBlue; 
		borderWidth: 1; 
		morphWidth:300.
		
	productSelectionLayoutMorph := LayoutMorph newColumn.
	productSelectionLayoutMorph 
		separation: 10;
		axisEdgeWeight: 0;
		addMorph: catalogListMorph;
		addMorph: self buildQuantitySelectionRow.
		
	^ productSelectionLayoutMorph ! !

marketWindow := MarketWindow open.!

----QUIT----(29 June 2021 20:49:29) Interfaz.image priorSource: 19951678!

----STARTUP---- (1 July 2021 17:03:20) as /Users/juan.ferrino/CuisUniversity/Interfaz.image!

!MarketWindow methodsFor: 'GUI building' stamp: 'JPF 7/1/2021 17:18:32' prior: 50954759 overrides: 50941419!
buildMorphicWindow

	self layoutMorph beRow;
	separation: 15;
	axisEdgeWeight: 0;
	addMorph: self buildAddProductColumn;
	addMorph: self buildCartColumn.! !

server destroy.!

!classDefinition: #MarketWindow category: #'TusLibros-Client' stamp: 'JPF 7/1/2021 17:21:44'!
Panel subclass: #MarketWindow
	instanceVariableNames: 'catalogListMorph quantityToAddTextBoxMorph cartListMorph'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Client'!
!MarketWindow methodsFor: 'GUI building' stamp: 'JPF 7/1/2021 17:21:41' prior: 50954653!
buildCartColumn

	cartListMorph := PluggableListMorph 
		model: self model 
		listGetter: #cart
		indexGetter: #cartListIndex 
		indexSetter: #cartListIndex:.
	cartListMorph 
		borderColor: Color skyBlue; 
		borderWidth: 1; 
		morphWidth:300.! !
!MarketWindow methodsFor: 'GUI building' stamp: 'JPF 7/1/2021 17:24:26' prior: 50955348!
buildCartColumn

	| removeFromCartButtonMorph |
	cartListMorph := PluggableListMorph 
		model: self model 
		listGetter: #cart
		indexGetter: #cartListIndex 
		indexSetter: #cartListIndex:.
	cartListMorph 
		borderColor: Color skyBlue; 
		borderWidth: 1; 
		morphWidth:300.
		
	removeFromCartButtonMorph := PluggableButtonMorph 
		model: self model 
		stateGetter: nil 
		action: #sendRemoveFromCartRequest  
		label: 'Remove from cart'.	! !
!MarketWindow methodsFor: 'GUI building' stamp: 'JPF 7/1/2021 17:28:35' prior: 50955359!
buildCartColumn

	| removeFromCartButtonMorph checkoutButtonMorph |
	cartListMorph := PluggableListMorph 
		model: self model 
		listGetter: #cart
		indexGetter: #cartListIndex 
		indexSetter: #cartListIndex:.
	cartListMorph 
		borderColor: Color skyBlue; 
		borderWidth: 1; 
		morphWidth:300.
		
	removeFromCartButtonMorph := PluggableButtonMorph 
		model: self model 
		stateGetter: nil 
		action: #sendRemoveFromCartRequest  
		label: 'Remove from cart'.	
		
	checkoutButtonMorph := PluggableButtonMorph 
		model: self model 
		stateGetter: nil 
		action: #sendCheckOutRequest  
		label: 'Check out'.	! !
!MarketWindow methodsFor: 'GUI building' stamp: 'JPF 7/1/2021 17:30:35' prior: 50955376!
buildCartColumn

	| removeFromCartButtonMorph checkoutButtonMorph listPurchasesButtonMorph |
	
	cartListMorph := PluggableListMorph 
		model: self model 
		listGetter: #cart
		indexGetter: #cartListIndex 
		indexSetter: #cartListIndex:.
	cartListMorph 
		borderColor: Color skyBlue; 
		borderWidth: 1; 
		morphWidth:300.
		
	removeFromCartButtonMorph := PluggableButtonMorph 
		model: self model 
		stateGetter: nil 
		action: #sendRemoveFromCartRequest  
		label: 'Remove from cart'.	
		
	checkoutButtonMorph := PluggableButtonMorph 
		model: self model 
		stateGetter: nil 
		action: #sendCheckOutRequest  
		label: 'Check out'.	
		
	listPurchasesButtonMorph := PluggableButtonMorph 
		model: self model 
		stateGetter: nil 
		action: #sendPurchasesRequest  
		label: 'List purchases'.	! !

!classDefinition: #MarketWindow category: #'TusLibros-Client' stamp: 'JPF 7/1/2021 17:33:57'!
Panel subclass: #MarketWindow
	instanceVariableNames: 'catalogListMorph quantityToAddTextBoxMorph cartListMorph cartColumnLayout'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Client'!
!MarketWindow methodsFor: 'GUI building' stamp: 'JPF 7/1/2021 17:33:54' prior: 50955398!
buildCartColumn

	| removeFromCartButtonMorph checkoutButtonMorph listPurchasesButtonMorph |
	
	cartListMorph := PluggableListMorph 
		model: self model 
		listGetter: #cart
		indexGetter: #cartListIndex 
		indexSetter: #cartListIndex:.
	cartListMorph 
		borderColor: Color skyBlue; 
		borderWidth: 1; 
		morphWidth:300.
		
	removeFromCartButtonMorph := PluggableButtonMorph 
		model: self model 
		stateGetter: nil 
		action: #sendRemoveFromCartRequest  
		label: 'Remove from cart'.	
		
	checkoutButtonMorph := PluggableButtonMorph 
		model: self model 
		stateGetter: nil 
		action: #sendCheckOutRequest  
		label: 'Check out'.	
		
	listPurchasesButtonMorph := PluggableButtonMorph 
		model: self model 
		stateGetter: nil 
		action: #sendPurchasesRequest  
		label: 'List purchases'.	
		
	cartColumnLayout := LayoutMorph newColumn.
	cartColumnLayout 
		addMorph: (LabelMorph contents: 'Cart');
		addMorph: cartListMorph;
		addMorph: removeFromCartButtonMorph;
		addMorph: checkoutButtonMorph;
		addMorph: listPurchasesButtonMorph.! !
!MarketWindow methodsFor: 'GUI building' stamp: 'JPF 7/1/2021 17:34:11' prior: 50955435!
buildCartColumn

	| removeFromCartButtonMorph checkoutButtonMorph listPurchasesButtonMorph |
	
	cartListMorph := PluggableListMorph 
		model: self model 
		listGetter: #cart
		indexGetter: #cartListIndex 
		indexSetter: #cartListIndex:.
	cartListMorph 
		borderColor: Color skyBlue; 
		borderWidth: 1; 
		morphWidth:300.
		
	removeFromCartButtonMorph := PluggableButtonMorph 
		model: self model 
		stateGetter: nil 
		action: #sendRemoveFromCartRequest  
		label: 'Remove from cart'.	
		
	checkoutButtonMorph := PluggableButtonMorph 
		model: self model 
		stateGetter: nil 
		action: #sendCheckOutRequest  
		label: 'Check out'.	
		
	listPurchasesButtonMorph := PluggableButtonMorph 
		model: self model 
		stateGetter: nil 
		action: #sendPurchasesRequest  
		label: 'List purchases'.	
		
	cartColumnLayout := LayoutMorph newColumn.
	cartColumnLayout 
		addMorph: (LabelMorph contents: 'Cart');
		addMorph: cartListMorph;
		addMorph: removeFromCartButtonMorph;
		addMorph: checkoutButtonMorph;
		addMorph: listPurchasesButtonMorph.
		
	^ cartColumnLayout! !

Panel subclass: #MarketWindow
	instanceVariableNames: 'catalogListMorph quantityToAddTextBoxMorph cartListMorph'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Client'!

!classDefinition: #MarketWindow category: #'TusLibros-Client' stamp: 'JPF 7/1/2021 17:34:30'!
Panel subclass: #MarketWindow
	instanceVariableNames: 'catalogListMorph quantityToAddTextBoxMorph cartListMorph'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Client'!
!MarketWindow methodsFor: 'GUI building' stamp: 'JPF 7/1/2021 17:35:00' prior: 50955471!
buildCartColumn

	| removeFromCartButtonMorph checkoutButtonMorph listPurchasesButtonMorph 
		cartColumnLayout |
	
	cartListMorph := PluggableListMorph 
		model: self model 
		listGetter: #cart
		indexGetter: #cartListIndex 
		indexSetter: #cartListIndex:.
	cartListMorph 
		borderColor: Color skyBlue; 
		borderWidth: 1; 
		morphWidth:300.
		
	removeFromCartButtonMorph := PluggableButtonMorph 
		model: self model 
		stateGetter: nil 
		action: #sendRemoveFromCartRequest  
		label: 'Remove from cart'.	
		
	checkoutButtonMorph := PluggableButtonMorph 
		model: self model 
		stateGetter: nil 
		action: #sendCheckOutRequest  
		label: 'Check out'.	
		
	listPurchasesButtonMorph := PluggableButtonMorph 
		model: self model 
		stateGetter: nil 
		action: #sendPurchasesRequest  
		label: 'List purchases'.	
		
	cartColumnLayout := LayoutMorph newColumn.
	cartColumnLayout 
		addMorph: (LabelMorph contents: 'Cart');
		addMorph: cartListMorph;
		addMorph: removeFromCartButtonMorph;
		addMorph: checkoutButtonMorph;
		addMorph: listPurchasesButtonMorph.
		
	^ cartColumnLayout! !
!MarketModel methodsFor: 'actions' stamp: 'JPF 7/1/2021 17:35:34'!
sendRemoveFromCartRequest! !
!MarketModel methodsFor: 'actions' stamp: 'JPF 7/1/2021 17:35:46'!
sendCheckOutRequest! !
!MarketModel methodsFor: 'actions' stamp: 'JPF 7/1/2021 17:35:56'!
sendPurchasesRequest! !
!MarketModel methodsFor: 'cart' stamp: 'JPF 7/1/2021 17:36:30'!
cart! !
!MarketWindow methodsFor: 'GUI building' stamp: 'JPF 7/1/2021 17:36:52' prior: 50955522!
buildCartColumn

	| removeFromCartButtonMorph checkoutButtonMorph listPurchasesButtonMorph 
		cartColumnLayout |
	
	cartListMorph := PluggableListMorph 
		model: self model 
		listGetter: #cartList
		indexGetter: #cartListIndex 
		indexSetter: #cartListIndex:.
	cartListMorph 
		borderColor: Color skyBlue; 
		borderWidth: 1; 
		morphWidth:300.
		
	removeFromCartButtonMorph := PluggableButtonMorph 
		model: self model 
		stateGetter: nil 
		action: #sendRemoveFromCartRequest  
		label: 'Remove from cart'.	
		
	checkoutButtonMorph := PluggableButtonMorph 
		model: self model 
		stateGetter: nil 
		action: #sendCheckOutRequest  
		label: 'Check out'.	
		
	listPurchasesButtonMorph := PluggableButtonMorph 
		model: self model 
		stateGetter: nil 
		action: #sendPurchasesRequest  
		label: 'List purchases'.	
		
	cartColumnLayout := LayoutMorph newColumn.
	cartColumnLayout 
		addMorph: (LabelMorph contents: 'Cart');
		addMorph: cartListMorph;
		addMorph: removeFromCartButtonMorph;
		addMorph: checkoutButtonMorph;
		addMorph: listPurchasesButtonMorph.
		
	^ cartColumnLayout! !
!MarketModel methodsFor: 'cart' stamp: 'JPF 7/1/2021 17:36:58'!
cartList! !

!methodRemoval: MarketModel #cart stamp: 'JPF 7/1/2021 17:36:58'!
cart!
!MarketModel methodsFor: 'cart' stamp: 'JPF 7/1/2021 17:37:09'!
cartListIndex! !
!MarketModel methodsFor: 'cart' stamp: 'JPF 7/1/2021 17:37:30'!
cartListIndex: newIndex! !

!classDefinition: #MarketModel category: #'TusLibros-Client' stamp: 'JPF 7/1/2021 17:37:46'!
Object subclass: #MarketModel
	instanceVariableNames: 'quantityToAdd catalog catalogListIndex cartListIndex'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Client'!
!MarketModel methodsFor: 'cart' stamp: 'JPF 7/1/2021 17:37:44' prior: 50955615!
cartListIndex: newIndex

	cartListIndex := newIndex! !
!MarketModel methodsFor: 'cart' stamp: 'JPF 7/1/2021 17:37:58' prior: 50955612!
cartListIndex

	^ cartListIndex! !

!classDefinition: #MarketModel category: #'TusLibros-Client' stamp: 'JPF 7/1/2021 17:38:11'!
Object subclass: #MarketModel
	instanceVariableNames: 'quantityToAdd catalog catalogListIndex cartListIndex cartList'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Client'!
!MarketModel methodsFor: 'cart' stamp: 'JPF 7/1/2021 17:38:08' prior: 50955607!
cartList

	cartList! !
!MarketModel methodsFor: 'cart' stamp: 'JPF 7/1/2021 17:38:14' prior: 50955646!
cartList

	^ cartList! !
!MarketModel methodsFor: 'product selection' stamp: 'JPF 7/1/2021 17:38:38' prior: 50955073!
catalogListIndex: newIndex

	catalogListIndex := newIndex! !
!MarketModel methodsFor: 'product selection' stamp: 'JPF 7/1/2021 17:38:53' prior: 50955120!
quantityToAdd: newQuantity
	
	quantityToAdd := newQuantity.! !
!MarketModel methodsFor: 'initialization' stamp: 'JPF 7/1/2021 17:39:18' prior: 50955130 overrides: 16896425!
initialize

	quantityToAdd := '1'.
	catalog := OrderedCollection new.
	catalogListIndex := 0.
	cartList := OrderedCollection new.
	

	! !
!MarketModel methodsFor: 'initialization' stamp: 'JPF 7/1/2021 17:39:31' prior: 50955665 overrides: 16896425!
initialize

	quantityToAdd := '1'.
	catalog := OrderedCollection new.
	catalogListIndex := 0.
	cartList := OrderedCollection new.
	cartListIndex := 0.
	

	! !

marketWindow := MarketWindow open.!
!MarketWindow methodsFor: 'GUI building' stamp: 'JPF 7/1/2021 17:41:22' prior: 50955571!
buildCartColumn

	| removeFromCartButtonMorph checkoutButtonMorph listPurchasesButtonMorph 
		cartColumnLayout |
	
	cartListMorph := PluggableListMorph 
		model: self model 
		listGetter: #cartList
		indexGetter: #cartListIndex 
		indexSetter: #cartListIndex:.
	cartListMorph 
		borderColor: Color skyBlue; 
		borderWidth: 1; 
		morphWidth:300.
		
	removeFromCartButtonMorph := PluggableButtonMorph 
		model: self model 
		stateGetter: nil 
		action: #sendRemoveFromCartRequest  
		label: 'Remove from cart'.	
		
	checkoutButtonMorph := PluggableButtonMorph 
		model: self model 
		stateGetter: nil 
		action: #sendCheckOutRequest  
		label: 'Check out'.	
		
	listPurchasesButtonMorph := PluggableButtonMorph 
		model: self model 
		stateGetter: nil 
		action: #sendPurchasesRequest  
		label: 'List historic purchases'.	
		
	cartColumnLayout := LayoutMorph newColumn.
	cartColumnLayout 
		addMorph: (LabelMorph contents: 'Cart');
		addMorph: cartListMorph;
		addMorph: removeFromCartButtonMorph;
		addMorph: checkoutButtonMorph;
		addMorph: listPurchasesButtonMorph.
		
	^ cartColumnLayout! !
!MarketWindow methodsFor: 'GUI building' stamp: 'JPF 7/1/2021 17:41:43'!
buildCatalogColumn

	| productSelectionLayoutMorph |
	
	catalogListMorph := PluggableListMorph 
		model: self model 
		listGetter: #catalog
		indexGetter: #catalogListIndex 
		indexSetter: #catalogListIndex:.
	catalogListMorph 
		borderColor: Color skyBlue; 
		borderWidth: 1; 
		morphWidth:300.
		
	productSelectionLayoutMorph := LayoutMorph newColumn.
	productSelectionLayoutMorph 
		separation: 10;
		axisEdgeWeight: 0;
		addMorph: catalogListMorph;
		addMorph: self buildQuantitySelectionRow.
		
	^ productSelectionLayoutMorph ! !
!MarketWindow methodsFor: 'as yet unclassified' stamp: 'JPF 7/1/2021 17:41:43' prior: 50955330 overrides: 50941419!
buildMorphicWindow

	self layoutMorph beRow;
	separation: 15;
	axisEdgeWeight: 0;
	addMorph: self buildCatalogColumn;
	addMorph: self buildCartColumn.! !

!methodRemoval: MarketWindow #buildAddProductColumn stamp: 'JPF 7/1/2021 17:41:43'!
buildAddProductColumn

	| productSelectionLayoutMorph |
	
	catalogListMorph := PluggableListMorph 
		model: self model 
		listGetter: #catalog
		indexGetter: #catalogListIndex 
		indexSetter: #catalogListIndex:.
	catalogListMorph 
		borderColor: Color skyBlue; 
		borderWidth: 1; 
		morphWidth:300.
		
	productSelectionLayoutMorph := LayoutMorph newColumn.
	productSelectionLayoutMorph 
		separation: 10;
		axisEdgeWeight: 0;
		addMorph: catalogListMorph;
		addMorph: self buildQuantitySelectionRow.
		
	^ productSelectionLayoutMorph !
!MarketWindow methodsFor: 'GUI building' stamp: 'JPF 7/1/2021 17:42:18' prior: 50955719!
buildCatalogColumn

	| productSelectionLayoutMorph |
	
	catalogListMorph := PluggableListMorph 
		model: self model 
		listGetter: #catalog
		indexGetter: #catalogListIndex 
		indexSetter: #catalogListIndex:.
	catalogListMorph 
		borderColor: Color skyBlue; 
		borderWidth: 1; 
		morphWidth:300.
		
	productSelectionLayoutMorph := LayoutMorph newColumn.
	productSelectionLayoutMorph 
		separation: 10;
		axisEdgeWeight: 0;
		addMorph: (LabelMorph contents: 'Catalog');
		addMorph: catalogListMorph;
		addMorph: self buildQuantitySelectionRow.
		
	^ productSelectionLayoutMorph ! !
!MarketWindow methodsFor: 'GUI building' stamp: 'JPF 7/1/2021 17:43:47' prior: 50954998!
buildQuantitySelectionRow

	| quantitySelectionColumnLayout addProductButtonMorph quantitySelectionRowLayout |
	
	quantityToAddTextBoxMorph := TextModelMorph 
		textProvider: self model 
		textGetter: #quantityToAdd 
		textSetter: #quantityToAdd:. 
	quantityToAddTextBoxMorph textMorph
		setProperty: #keyStroke:
		toValue: [ :key | quantityToAddTextBoxMorph textMorph acceptContents ].
	quantityToAddTextBoxMorph 
		borderWidth: 1;
		borderColor: Color skyBlue.
	
	quantitySelectionColumnLayout := LayoutMorph newColumn.
	quantitySelectionColumnLayout 
		addMorph: (LabelMorph contents: 'Quantity');
		addMorph: quantityToAddTextBoxMorph.
	
	addProductButtonMorph := PluggableButtonMorph 
		model: self model 
		stateGetter: nil 
		action: #sendAddToCartRequest  
		label: 'Add to cart'.	
		
	quantitySelectionRowLayout := LayoutMorph newRow.
	quantitySelectionRowLayout
		addMorph: quantitySelectionColumnLayout;
		addMorph: addProductButtonMorph.
		
	^ quantitySelectionRowLayout.
		
	
	
	
! !
!MarketWindow methodsFor: 'GUI building' stamp: 'JPF 7/1/2021 17:46:01' prior: 50955788!
buildQuantitySelectionRow

	| quantitySelectionColumnLayout addProductButtonMorph quantitySelectionRowLayout |
	
	quantityToAddTextBoxMorph := TextModelMorph 
		textProvider: self model 
		textGetter: #quantityToAdd 
		textSetter: #quantityToAdd:. 
	quantityToAddTextBoxMorph textMorph
		setProperty: #keyStroke:
		toValue: [ :key | quantityToAddTextBoxMorph textMorph acceptContents ].
	quantityToAddTextBoxMorph 
		borderWidth: 1;
		borderColor: Color skyBlue.
	
	quantitySelectionColumnLayout := LayoutMorph newColumn.
	quantitySelectionColumnLayout 
		addMorph: (LabelMorph contents: 'Quantity');
		addMorph: quantityToAddTextBoxMorph.
	
	addProductButtonMorph := PluggableButtonMorph 
		model: self model 
		stateGetter: nil 
		action: #sendAddToCartRequest  
		label: 'Add to cart'.	
		
	quantitySelectionRowLayout := LayoutMorph newRow.
	quantitySelectionRowLayout
		addMorph: (LabelMorph contents: 'Quantity');
		addMorph: quantityToAddTextBoxMorph;
		addMorph: addProductButtonMorph.
		
	^ quantitySelectionRowLayout.
		
	
	
	
! !
!MarketWindow methodsFor: 'GUI building' stamp: 'JPF 7/1/2021 17:46:16' prior: 50955822!
buildQuantitySelectionRow

	| addProductButtonMorph quantitySelectionRowLayout |
	
	quantityToAddTextBoxMorph := TextModelMorph 
		textProvider: self model 
		textGetter: #quantityToAdd 
		textSetter: #quantityToAdd:. 
	quantityToAddTextBoxMorph textMorph
		setProperty: #keyStroke:
		toValue: [ :key | quantityToAddTextBoxMorph textMorph acceptContents ].
	quantityToAddTextBoxMorph 
		borderWidth: 1;
		borderColor: Color skyBlue.
	
	addProductButtonMorph := PluggableButtonMorph 
		model: self model 
		stateGetter: nil 
		action: #sendAddToCartRequest  
		label: 'Add to cart'.	
		
	quantitySelectionRowLayout := LayoutMorph newRow.
	quantitySelectionRowLayout
		addMorph: (LabelMorph contents: 'Quantity');
		addMorph: quantityToAddTextBoxMorph;
		addMorph: addProductButtonMorph.
		
	^ quantitySelectionRowLayout.
		
	
	
	
! !

marketWindow := MarketWindow open.!
!MarketWindow methodsFor: 'GUI building' stamp: 'JPF 7/1/2021 17:49:14' prior: 50955682!
buildCartColumn

	| removeFromCartButtonMorph checkoutButtonMorph listPurchasesButtonMorph 
		cartColumnLayout |
	
	cartListMorph := PluggableListMorph 
		model: self model 
		listGetter: #cartList
		indexGetter: #cartListIndex 
		indexSetter: #cartListIndex:.
	cartListMorph 
		borderColor: Color skyBlue; 
		borderWidth: 1; 
		morphWidth:300.
		
	removeFromCartButtonMorph := PluggableButtonMorph 
		model: self model 
		stateGetter: nil 
		action: #sendRemoveFromCartRequest  
		label: 'Remove from cart'.	
		
	checkoutButtonMorph := PluggableButtonMorph 
		model: self model 
		stateGetter: nil 
		action: #sendCheckOutRequest  
		label: 'Check out'.	
		
	listPurchasesButtonMorph := PluggableButtonMorph 
		model: self model 
		stateGetter: nil 
		action: #sendPurchasesRequest  
		label: 'Purchase history'.	
		
	cartColumnLayout := LayoutMorph newColumn.
	cartColumnLayout 
		addMorph: (LabelMorph contents: 'Cart');
		addMorph: cartListMorph;
		addMorph: removeFromCartButtonMorph;
		addMorph: checkoutButtonMorph;
		addMorph: listPurchasesButtonMorph.
		
	^ cartColumnLayout! !

!classDefinition: #MarketModel category: #'TusLibros-Client' stamp: 'JPF 7/1/2021 17:52:17'!
Object subclass: #MarketModel
	instanceVariableNames: 'quantityToAdd catalog catalogListIndex cartListIndex cartList cartId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Client'!

!classDefinition: #MarketModel category: #'TusLibros-Client' stamp: 'JPF 7/1/2021 17:52:18'!
Object subclass: #MarketModel
	instanceVariableNames: 'quantityToAdd catalog catalogListIndex cartListIndex cartList cartId restInterface'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Client'!

!classDefinition: #MarketModel category: #'TusLibros-Client' stamp: 'JPF 7/1/2021 17:52:26'!
Object subclass: #MarketModel
	instanceVariableNames: 'quantityToAdd catalog catalogListIndex cartListIndex cartList cartId restInterface clientId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Client'!

!classDefinition: #MarketModel category: #'TusLibros-Client' stamp: 'JPF 7/1/2021 17:52:28'!
Object subclass: #MarketModel
	instanceVariableNames: 'quantityToAdd catalog catalogListIndex cartListIndex cartList cartId restInterface clientId password'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Client'!
!MarketModel methodsFor: 'actions' stamp: 'JPF 7/1/2021 17:52:12'!
sendLoginRequest

	cartId := restInterface 
		sendCreateCartRequestFor: clientId 
		authenticatedWith: password.
		
	self triggerEvent: #successfulLogin with: self.! !
!MarketModel methodsFor: 'client' stamp: 'JPF 7/1/2021 17:53:03'!
clientId

	^ clientId! !
!MarketModel methodsFor: 'client' stamp: 'JPF 7/1/2021 17:53:23'!
clientId: newClientId

	clientId := newClientId! !
!MarketModel methodsFor: 'client' stamp: 'JPF 7/1/2021 17:53:43'!
password

	^ password! !
!MarketModel methodsFor: 'client' stamp: 'JPF 7/1/2021 17:54:03'!
password: newPassword

	password := newPassword! !
!MarketModel methodsFor: 'initialization' stamp: 'JPF 7/1/2021 17:55:26' prior: 50955673 overrides: 16896425!
initialize

	clientId := ''.
	password := ''.
	restInterface := RestInterface new.
	quantityToAdd := '1'.
	catalog := OrderedCollection new.
	catalogListIndex := 0.
	cartList := OrderedCollection new.
	cartListIndex := 0.
	

	! !
!LoginWindow methodsFor: 'initialization' stamp: 'JPF 7/1/2021 17:56:31' prior: 50954612!
initializeWith: aTitle

	self titleMorph showButtonsNamed: #( close collapse ).
	self setLabel: aTitle.
	self model: (MarketModel new).
	self morphExtent: (self defaultExtent).
	self buildMorphicWindow.
	self openInWorld.

			
	self model when: #successfulLogin send: #openMarketWindow to: self.! !

!classRemoval: #LoginModel stamp: 'JPF 7/1/2021 17:56:41'!
Object subclass: #LoginModel
	instanceVariableNames: 'clientId password restInterface cartId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Client'!
!MarketModel methodsFor: 'actions' stamp: 'JPF 7/1/2021 17:59:09' prior: 50955964!
sendLoginRequest

	cartId := restInterface 
		sendCreateCartRequestFor: clientId 
		authenticatedWith: password.
		
	catalog := restInterface
		sendListCatalogRequest.
		
	self triggerEvent: #successfulLogin with: self.! !
!MarketModel methodsFor: 'actions' stamp: 'JPF 7/1/2021 17:59:16' prior: 50956018!
sendLoginRequest

	cartId := restInterface 
		sendCreateCartRequestFor: clientId 
		authenticatedWith: password.
		
	catalog := restInterface sendListCatalogRequest.
		
	self triggerEvent: #successfulLogin with: self.! !
!RestInterface methodsFor: 'requests' stamp: 'JPF 7/1/2021 18:00:49'!
sendListCatalogRequest

	| fieldDict response |
	
	response := WebClient htmlSubmit: (self url,'/listCatalog') fields: fieldDict.
	
	response isSuccess 
		ifTrue:[ ^WebUtils jsonDecode: ((response content) readStream). ] 
		ifFalse:[ ^self error: response content ].! !
!RestInterface methodsFor: 'requests' stamp: 'JPF 7/1/2021 18:01:18' prior: 50956038!
sendListCatalogRequest

	| response |
	
	response := WebClient htmlSubmit: (self url,'/listCatalog') fields: Dictionary new.
	
	response isSuccess 
		ifTrue:[ ^WebUtils jsonDecode: ((response content) readStream). ] 
		ifFalse:[ ^self error: response content ].! !

server := TusLibrosRestInterface listeningOn: 8080.!

loginWindow := LoginWindow open.!
!TusLibrosRestInterface methodsFor: 'handlers' stamp: 'JPF 7/1/2021 18:05:56' prior: 50955175!
handleCreateCart: request

	self handle: request with: [	 :responseFor200 || cartId clientId password |
	
		clientId := self getParameter: 'clientId' from: request.
		password := self getParameter: 'password' from: request.

		cartId := tusLibrosSystemFacade createCartFor: clientId authenticatedWith: password.

		request send200Response: cartId asString
		]! !
!TusLibrosRestInterface methodsFor: 'handlers' stamp: 'JPF 7/1/2021 18:07:09' prior: 50956065!
handleCreateCart: request

	self halt.

	self handle: request with: [	 :responseFor200 || cartId clientId password |
	
		clientId := self getParameter: 'clientId' from: request.
		password := self getParameter: 'password' from: request.

		cartId := tusLibrosSystemFacade createCartFor: clientId authenticatedWith: password.

		request send200Response: cartId asString
		]! !
!TusLibrosRestInterface methodsFor: 'handlers' stamp: 'JPF 7/1/2021 18:09:28' prior: 50956080!
handleCreateCart: request

	self handle: request with: [	 :responseFor200 || cartId clientId password |
	
		clientId := self getParameter: 'clientId' from: request.
		password := self getParameter: 'password' from: request.

		cartId := tusLibrosSystemFacade createCartFor: clientId authenticatedWith: password.

		request send200Response: cartId asString
		]! !
!TusLibrosRestInterface methodsFor: 'handlers' stamp: 'JPF 7/1/2021 18:10:34' prior: 50956095!
handleCreateCart: request

	self handle: request with: [	 | cartId clientId password |
	
		clientId := self getParameter: 'clientId' from: request.
		password := self getParameter: 'password' from: request.

		cartId := tusLibrosSystemFacade createCartFor: clientId authenticatedWith: password.

		request send200Response: cartId asString
		]! !
!MarketModel methodsFor: 'actions' stamp: 'JPF 7/1/2021 18:12:05' prior: 50956028!
sendLoginRequest

	self halt.
	cartId := restInterface 
		sendCreateCartRequestFor: clientId 
		authenticatedWith: password.
		
	catalog := restInterface sendListCatalogRequest.
		
	self triggerEvent: #successfulLogin with: self.! !

----SNAPSHOT----(1 July 2021 18:12:11) Interfaz.image priorSource: 19957534!

loginWindow := LoginWindow open.!
!MarketModel methodsFor: 'actions' stamp: 'JPF 7/1/2021 18:15:22' prior: 50956124!
sendLoginRequest

	cartId := restInterface 
		sendCreateCartRequestFor: clientId 
		authenticatedWith: password.
		
	catalog := restInterface sendListCatalogRequest.
		
	self triggerEvent: #successfulLogin with: self.! !

Object subclass: #MarketResponseMapper
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Client'!

!classDefinition: #MarketResponseMapper category: #'TusLibros-Client' stamp: 'JPF 7/1/2021 18:17:16'!
Object subclass: #MarketResponseMapper
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Client'!
!MarketResponseMapper class methodsFor: 'catalog' stamp: 'JPF 7/1/2021 18:18:00'!
mapResponseToCatalogList: catalogDictionary! !
!MarketResponseMapper class methodsFor: 'catalog' stamp: 'JPF 7/1/2021 18:18:50' prior: 50956160!
mapResponseToCatalogList: catalogDictionary

	catalogDictionary keysAndValuesDo: []! !
!MarketResponseMapper class methodsFor: 'catalog' stamp: 'JPF 7/1/2021 18:21:33' prior: 50956165!
mapResponseToCatalogList: catalogDictionary

	catalogDictionary keysAndValuesDo: [ :productName :productPrice |]! !
!MarketResponseMapper class methodsFor: 'catalog' stamp: 'JPF 7/1/2021 18:22:29' prior: 50956171!
mapResponseToCatalogList: catalogDictionary

	| catalogList |
	catalogList := OrderedCollection new.
	catalogDictionary keysAndValuesDo: [ :productName :productPrice |]! !
!MarketResponseMapper class methodsFor: 'catalog' stamp: 'JPF 7/1/2021 18:24:20' prior: 50956178!
mapResponseToCatalogList: catalogDictionary

	| catalogList |
	
	catalogList := OrderedCollection new.
	catalogDictionary keysAndValuesDo: [ :productName :productPrice |
		catalogList add: (productName , '    ', productPrice asString)
		]! !
!MarketResponseMapper class methodsFor: 'catalog' stamp: 'JPF 7/1/2021 18:24:31' prior: 50956187!
mapResponseToCatalogList: catalogDictionary

	| catalogList |
	
	catalogList := OrderedCollection new.
	catalogDictionary keysAndValuesDo: [ :productName :productPrice |
		catalogList add: (productName , '    ', productPrice asString)
		].
	
	^ catalogList! !
!MarketModel methodsFor: 'actions' stamp: 'JPF 7/1/2021 18:25:37' prior: 50956138!
sendLoginRequest

	cartId := restInterface 
		sendCreateCartRequestFor: clientId 
		authenticatedWith: password.
		
	catalog := MarketResponseMapper 
		mapResponseToCatalogList: (restInterface sendListCatalogRequest).
		
	self triggerEvent: #successfulLogin with: self.! !

loginWindow := LoginWindow open.!
!MarketModel methodsFor: 'actions' stamp: 'JPF 7/1/2021 18:26:29' prior: 50956209!
sendLoginRequest

	self halt.

	cartId := restInterface 
		sendCreateCartRequestFor: clientId 
		authenticatedWith: password.
		
	catalog := MarketResponseMapper 
		mapResponseToCatalogList: (restInterface sendListCatalogRequest).
		
	self triggerEvent: #successfulLogin with: self.! !

loginWindow := LoginWindow open.!
!MarketWindow methodsFor: 'initialization' stamp: 'JPF 7/1/2021 18:31:07' prior: 50954571!
initializeWith: aTitle

	self titleMorph showButtonsNamed: #( close collapse ).
	self setLabel: aTitle.
	self model: (MarketModel new).
	self morphExtent: (self defaultExtent).
	self buildMorphicWindow.
	
	catalogListMorph updateList.
	catalogListMorph setSelectionIndex: 0.
	
	self openInWorld.! !
!MarketModel methodsFor: 'product selection' stamp: 'JPF 7/1/2021 18:34:03' prior: 50955057!
catalog
	
	self halt.

	^ catalog! !

loginWindow := LoginWindow open.!
!MarketModel methodsFor: 'actions' stamp: 'JPF 7/1/2021 18:34:46' prior: 50956222!
sendLoginRequest

	cartId := restInterface 
		sendCreateCartRequestFor: clientId 
		authenticatedWith: password.
		
	catalog := MarketResponseMapper 
		mapResponseToCatalogList: (restInterface sendListCatalogRequest).
		
	self triggerEvent: #successfulLogin with: self.! !
!MarketModel methodsFor: 'actions' stamp: 'JPF 7/1/2021 18:36:36' prior: 50956253!
sendLoginRequest

	cartId := restInterface 
		sendCreateCartRequestFor: clientId 
		authenticatedWith: password.
		
	self catalog: (MarketResponseMapper 
		mapResponseToCatalogList: (restInterface sendListCatalogRequest)).
		
	self triggerEvent: #successfulLogin with: self.! !
!MarketModel methodsFor: 'actions' stamp: 'JPF 7/1/2021 18:37:25' prior: 50956265!
sendLoginRequest

	cartId := restInterface 
		sendCreateCartRequestFor: clientId 
		authenticatedWith: password.
		
	catalog := MarketResponseMapper 
		mapResponseToCatalogList: (restInterface sendListCatalogRequest).
		
	self triggerEvent: #successfulLogin with: self.! !
!MarketModel methodsFor: 'actions' stamp: 'JPF 7/1/2021 18:37:39' prior: 50956277!
sendLoginRequest

	cartId := restInterface 
		sendCreateCartRequestFor: clientId 
		authenticatedWith: password.
		
	catalog := MarketResponseMapper 
		mapResponseToCatalogList: (restInterface sendListCatalogRequest).
		
	self triggerEvent: #successfulLogin with: self.! !
!MarketWindow methodsFor: 'initialization' stamp: 'JPF 7/1/2021 18:40:22'!
initializeTitled: aTitle withModel: aModel

	self titleMorph showButtonsNamed: #( close collapse ).
	self setLabel: aTitle.
	self model: (MarketModel new).
	self morphExtent: (self defaultExtent).
	self buildMorphicWindow.
	
	catalogListMorph updateList.
	catalogListMorph setSelectionIndex: 0.
	
	self openInWorld.! !
!MarketWindow methodsFor: 'initialization' stamp: 'JPF 7/1/2021 18:40:28' prior: 50956300!
initializeTitled: aTitle withModel: aModel

	self titleMorph showButtonsNamed: #( close collapse ).
	self setLabel: aTitle.
	self model: aModel.
	self morphExtent: (self defaultExtent).
	self buildMorphicWindow.
	
	catalogListMorph updateList.
	catalogListMorph setSelectionIndex: 0.
	
	self openInWorld.! !

!methodRemoval: MarketWindow #initializeWith: stamp: 'JPF 7/1/2021 18:40:46'!
initializeWith: aTitle

	self titleMorph showButtonsNamed: #( close collapse ).
	self setLabel: aTitle.
	self model: (MarketModel new).
	self morphExtent: (self defaultExtent).
	self buildMorphicWindow.
	
	catalogListMorph updateList.
	catalogListMorph setSelectionIndex: 0.
	
	self openInWorld.!
!MarketWindow class methodsFor: 'instance creation' stamp: 'JPF 7/1/2021 18:41:43'!
openWith: aModel

	^ self new initializeTitled: 'Tus Libros Market' withModel: aModel.! !

!methodRemoval: MarketWindow class #open stamp: 'JPF 7/1/2021 18:41:50'!
open

	^ self new initializeWith: 'Tus Libros Market'!
!LoginWindow methodsFor: 'windows management' stamp: 'JPF 7/1/2021 18:42:17' prior: 50954601!
openMarketWindow
	
	MarketWindow openWith: self model.
	self delete.! !

loginWindow := LoginWindow open.!
!MarketModel methodsFor: 'product selection' stamp: 'JPF 7/1/2021 18:42:49' prior: 50956248!
catalog
	
	^ catalog! !
!MarketResponseMapper class methodsFor: 'catalog' stamp: 'JPF 7/1/2021 18:43:26' prior: 50956198!
mapResponseToCatalogList: catalogDictionary

	| catalogList |
	
	catalogList := OrderedCollection new.
	catalogDictionary keysAndValuesDo: [ :productName :productPrice |
		catalogList add: (productName , '    $', productPrice asString)
		].
	
	^ catalogList! !
!MarketWindow methodsFor: 'GUI building' stamp: 'JPF 7/1/2021 18:46:50' prior: 50955767!
buildCatalogColumn

	| productSelectionLayoutMorph |
	
	catalogListMorph := PluggableListMorph 
		model: self model 
		listGetter: #catalog
		indexGetter: #catalogListIndex 
		indexSetter: #catalogListIndex:.
	catalogListMorph 
		borderColor: Color skyBlue; 
		borderWidth: 1;
		proportionalWidth: 100;
		proportionalHeight: 100.
		
	productSelectionLayoutMorph := LayoutMorph newColumn.
	productSelectionLayoutMorph 
		separation: 10;
		axisEdgeWeight: 0;
		addMorph: (LabelMorph contents: 'Catalog');
		addMorph: catalogListMorph;
		addMorph: self buildQuantitySelectionRow.
		
	^ productSelectionLayoutMorph ! !

loginWindow := LoginWindow open.!
!MarketWindow methodsFor: 'GUI building' stamp: 'JPF 7/1/2021 18:48:24' prior: 50956369!
buildCatalogColumn

	| productSelectionLayoutMorph |
	
	catalogListMorph := PluggableListMorph 
		model: self model 
		listGetter: #catalog
		indexGetter: #catalogListIndex 
		indexSetter: #catalogListIndex:.
	catalogListMorph 
		borderColor: Color skyBlue; 
		borderWidth: 1;
		proportionalWidth: 100;
		proportionalHeight: 100.
		
	productSelectionLayoutMorph := LayoutMorph newColumn.
	productSelectionLayoutMorph 
		separation: 10;
		axisEdgeWeight: 0;
		addMorph: (LabelMorph contents: 'Catalog');
		addMorph: catalogListMorph;
		addMorph: self buildQuantitySelectionRow.
		
	^ productSelectionLayoutMorph ! !
!MarketWindow methodsFor: 'GUI building' stamp: 'JPF 7/1/2021 18:49:04' prior: 50956393!
buildCatalogColumn

	| productSelectionLayoutMorph |
	
	catalogListMorph := PluggableListMorph 
		model: self model 
		listGetter: #catalog
		indexGetter: #catalogListIndex 
		indexSetter: #catalogListIndex:.
	catalogListMorph 
		borderColor: Color skyBlue; 
		borderWidth: 1.
	catalogListMorph layoutSpec 
		proportionalWidth: 100;
		proportionalHeight: 100.
		
	productSelectionLayoutMorph := LayoutMorph newColumn.
	productSelectionLayoutMorph 
		separation: 10;
		axisEdgeWeight: 0;
		addMorph: (LabelMorph contents: 'Catalog');
		addMorph: catalogListMorph;
		addMorph: self buildQuantitySelectionRow.
		
	^ productSelectionLayoutMorph ! !

loginWindow := LoginWindow open.!
!MarketWindow methodsFor: 'GUI building' stamp: 'JPF 7/1/2021 18:50:36' prior: 50955888!
buildCartColumn

	| removeFromCartButtonMorph checkoutButtonMorph listPurchasesButtonMorph 
		cartColumnLayout |
	
	cartListMorph := PluggableListMorph 
		model: self model 
		listGetter: #cartList
		indexGetter: #cartListIndex 
		indexSetter: #cartListIndex:.
	cartListMorph 
		borderColor: Color skyBlue; 
		borderWidth: 1.
	cartListMorph layoutSpec 
		proportionalWidth: 100;
		proportionalHeight: 100.
		
	removeFromCartButtonMorph := PluggableButtonMorph 
		model: self model 
		stateGetter: nil 
		action: #sendRemoveFromCartRequest  
		label: 'Remove from cart'.	
		
	checkoutButtonMorph := PluggableButtonMorph 
		model: self model 
		stateGetter: nil 
		action: #sendCheckOutRequest  
		label: 'Check out'.	
		
	listPurchasesButtonMorph := PluggableButtonMorph 
		model: self model 
		stateGetter: nil 
		action: #sendPurchasesRequest  
		label: 'Purchase history'.	
		
	cartColumnLayout := LayoutMorph newColumn.
	cartColumnLayout 
		addMorph: (LabelMorph contents: 'Cart');
		addMorph: cartListMorph;
		addMorph: removeFromCartButtonMorph;
		addMorph: checkoutButtonMorph;
		addMorph: listPurchasesButtonMorph.
		
	^ cartColumnLayout! !

!classRenamed: #RestInterface as: #MarketRestInterface stamp: 'JPF 7/1/2021 18:54:01'!
Smalltalk renameClassNamed: #RestInterface as: #MarketRestInterface!
!MarketModel methodsFor: 'as yet unclassified' stamp: 'JPF 7/1/2021 18:54:01' prior: 50955988 overrides: 16896425!
initialize

	clientId := ''.
	password := ''.
	restInterface := MarketRestInterface new.
	quantityToAdd := '1'.
	catalog := OrderedCollection new.
	catalogListIndex := 0.
	cartList := OrderedCollection new.
	cartListIndex := 0.
	

	! !
!MarketRestInterface methodsFor: 'requests' stamp: 'JPF 7/1/2021 18:55:33'!
sendAddToCartRequestFor: aClientId authenticatedWith: aPassword

	| fieldDict response urlEncodedClientId urlEncodedPassword |

	urlEncodedClientId := self 
		correctlyEncodeSpacesForUrlRequestParameter: aClientId.	
	urlEncodedPassword := self
		correctlyEncodeSpacesForUrlRequestParameter: aPassword.
	fieldDict := Dictionary 
		with: ('clientId'->urlEncodedClientId)
		with: ('password'->urlEncodedPassword).
	
	response := WebClient htmlSubmit: (self url,'/createCart') fields: fieldDict.
	
	response isSuccess 
		ifTrue:[ ^WebUtils jsonDecode: ((response content) readStream). ] 
		ifFalse:[ ^self error: response content ].! !
!MarketRestInterface methodsFor: 'requests' stamp: 'JPF 7/1/2021 18:55:39'!
sendAddToCartRequestFor: aClientId of: aPassword

	| fieldDict response urlEncodedClientId urlEncodedPassword |

	urlEncodedClientId := self 
		correctlyEncodeSpacesForUrlRequestParameter: aClientId.	
	urlEncodedPassword := self
		correctlyEncodeSpacesForUrlRequestParameter: aPassword.
	fieldDict := Dictionary 
		with: ('clientId'->urlEncodedClientId)
		with: ('password'->urlEncodedPassword).
	
	response := WebClient htmlSubmit: (self url,'/createCart') fields: fieldDict.
	
	response isSuccess 
		ifTrue:[ ^WebUtils jsonDecode: ((response content) readStream). ] 
		ifFalse:[ ^self error: response content ].! !
!MarketRestInterface methodsFor: 'requests' stamp: 'JPF 7/1/2021 18:55:51' prior: 50956518!
sendAddToCartRequestFor: aQuantity of: aPassword

	| fieldDict response urlEncodedClientId urlEncodedPassword |

	urlEncodedClientId := self 
		correctlyEncodeSpacesForUrlRequestParameter: aQuantity.	
	urlEncodedPassword := self
		correctlyEncodeSpacesForUrlRequestParameter: aPassword.
	fieldDict := Dictionary 
		with: ('clientId'->urlEncodedClientId)
		with: ('password'->urlEncodedPassword).
	
	response := WebClient htmlSubmit: (self url,'/createCart') fields: fieldDict.
	
	response isSuccess 
		ifTrue:[ ^WebUtils jsonDecode: ((response content) readStream). ] 
		ifFalse:[ ^self error: response content ].! !
!MarketRestInterface methodsFor: 'requests' stamp: 'JPF 7/1/2021 18:56:04' prior: 50956541!
sendAddToCartRequestFor: aQuantity of: aProduct

	| fieldDict response urlEncodedClientId urlEncodedPassword |

	urlEncodedClientId := self 
		correctlyEncodeSpacesForUrlRequestParameter: aQuantity.	
	urlEncodedPassword := self
		correctlyEncodeSpacesForUrlRequestParameter: aProduct.
	fieldDict := Dictionary 
		with: ('clientId'->urlEncodedClientId)
		with: ('password'->urlEncodedPassword).
	
	response := WebClient htmlSubmit: (self url,'/createCart') fields: fieldDict.
	
	response isSuccess 
		ifTrue:[ ^WebUtils jsonDecode: ((response content) readStream). ] 
		ifFalse:[ ^self error: response content ].! !
!MarketRestInterface methodsFor: 'requests' stamp: 'JPF 7/1/2021 18:56:30' prior: 50956564!
sendAddToCartRequestFor: aQuantity of: aProduct

	| fieldDict response urlEncodedQuantity urlEncodedPassword |

	urlEncodedQuantity := self 
		correctlyEncodeSpacesForUrlRequestParameter: aQuantity.	
	urlEncodedPassword := self
		correctlyEncodeSpacesForUrlRequestParameter: aProduct.
	fieldDict := Dictionary 
		with: ('clientId'->urlEncodedQuantity)
		with: ('password'->urlEncodedPassword).
	
	response := WebClient htmlSubmit: (self url,'/createCart') fields: fieldDict.
	
	response isSuccess 
		ifTrue:[ ^WebUtils jsonDecode: ((response content) readStream). ] 
		ifFalse:[ ^self error: response content ].! !
!MarketRestInterface methodsFor: 'requests' stamp: 'JPF 7/1/2021 18:56:37' prior: 50956587!
sendAddToCartRequestFor: aQuantity of: aProduct

	| fieldDict response urlEncodedQuantity urlEncodedProduct |

	urlEncodedQuantity := self 
		correctlyEncodeSpacesForUrlRequestParameter: aQuantity.	
	urlEncodedProduct := self
		correctlyEncodeSpacesForUrlRequestParameter: aProduct.
	fieldDict := Dictionary 
		with: ('clientId'->urlEncodedQuantity)
		with: ('password'->urlEncodedProduct).
	
	response := WebClient htmlSubmit: (self url,'/createCart') fields: fieldDict.
	
	response isSuccess 
		ifTrue:[ ^WebUtils jsonDecode: ((response content) readStream). ] 
		ifFalse:[ ^self error: response content ].! !
!TusLibrosRestInterface methodsFor: 'handlers' stamp: 'JPF 7/1/2021 18:57:34' prior: 50954442!
handleAddToCart: request

	self handle: request with: [	 | product quantity cartId |	
		
		cartId := self getParameter: 'cartId' from: request.
		product := self getParameter:  'book' from: request.
		quantity := self getParameter: 'quantity' from: request. 
		
		tusLibrosSystemFacade
			add: quantity asNumber
			of: product
			toCartIdentifiedAs: cartId asNumber.
		
		request send200Response: 'OK'
	]! !
!TusLibrosRestInterface methodsFor: 'handlers' stamp: 'JPF 7/1/2021 18:57:42' prior: 50956633!
handleAddToCart: request

	self handle: request with: [	 | product quantity cartId |	
		
		cartId := self getParameter: 'cartId' from: request.
		product := self getParameter:  'product' from: request.
		quantity := self getParameter: 'quantity' from: request. 
		
		tusLibrosSystemFacade
			add: quantity asNumber
			of: product
			toCartIdentifiedAs: cartId asNumber.
		
		request send200Response: 'OK'
	]! !

----QUIT----(1 July 2021 21:58:33) Interfaz.image priorSource: 19983464!

----STARTUP---- (6 July 2021 18:38:21) as /Users/juan.ferrino/CuisUniversity/Interfaz.image!


server destroy.!

----SNAPSHOT----(6 July 2021 18:40:36) Interfaz.image priorSource: 20000442!

server := TusLibrosRestInterface listeningOn: 8080.!

loginWindow := LoginWindow open.
!
!MarketModel methodsFor: 'actions' stamp: 'JPF 7/6/2021 18:43:20' prior: 50955077!
sendAddToCartRequest

	restInterface ! !
!MarketRestInterface methodsFor: 'requests' stamp: 'JPF 7/6/2021 18:45:13'!
sendAddToCartRequestFor: aQuantity of: aProduct in: aCartId

	| fieldDict response urlEncodedQuantity urlEncodedProduct |

	urlEncodedQuantity := self 
		correctlyEncodeSpacesForUrlRequestParameter: aQuantity.	
	urlEncodedProduct := self
		correctlyEncodeSpacesForUrlRequestParameter: aProduct.
	fieldDict := Dictionary 
		with: ('clientId'->urlEncodedQuantity)
		with: ('password'->urlEncodedProduct).
	
	response := WebClient htmlSubmit: (self url,'/createCart') fields: fieldDict.
	
	response isSuccess 
		ifTrue:[ ^WebUtils jsonDecode: ((response content) readStream). ] 
		ifFalse:[ ^self error: response content ].! !
!MarketRestInterface methodsFor: 'requests' stamp: 'JPF 7/6/2021 18:45:45' prior: 50956680!
sendAddToCartRequestFor: aQuantity of: aProduct in: aCartId

	| fieldDict response urlEncodedQuantity urlEncodedProduct urlEncodedCartId |

	urlEncodedQuantity := self 
		correctlyEncodeSpacesForUrlRequestParameter: aQuantity.	
	urlEncodedProduct := self
		correctlyEncodeSpacesForUrlRequestParameter: aProduct.
	urlEncodedCartId := self
		correctlyEncodeSpacesForUrlRequestParameter: aCartId.
	fieldDict := Dictionary 
		with: ('clientId'->urlEncodedQuantity)
		with: ('password'->urlEncodedProduct).
	
	response := WebClient htmlSubmit: (self url,'/createCart') fields: fieldDict.
	
	response isSuccess 
		ifTrue:[ ^WebUtils jsonDecode: ((response content) readStream). ] 
		ifFalse:[ ^self error: response content ].! !
!MarketRestInterface methodsFor: 'requests' stamp: 'JPF 7/6/2021 18:46:18' prior: 50956703!
sendAddToCartRequestFor: aQuantity of: aProduct in: aCartId

	| fieldDict response urlEncodedQuantity urlEncodedProduct urlEncodedCartId |

	urlEncodedQuantity := self 
		correctlyEncodeSpacesForUrlRequestParameter: aQuantity.	
	urlEncodedProduct := self
		correctlyEncodeSpacesForUrlRequestParameter: aProduct.
	urlEncodedCartId := self
		correctlyEncodeSpacesForUrlRequestParameter: aCartId.
	fieldDict := Dictionary 
		with: ('clientId'->urlEncodedQuantity)
		with: ('password'->urlEncodedProduct)
		with: ('cartId'->urlEncodedCartId ).
	
	response := WebClient htmlSubmit: (self url,'/createCart') fields: fieldDict.
	
	response isSuccess 
		ifTrue:[ ^WebUtils jsonDecode: ((response content) readStream). ] 
		ifFalse:[ ^self error: response content ].! !

!methodRemoval: MarketRestInterface #sendAddToCartRequestFor:of: stamp: 'JPF 7/6/2021 18:46:27'!
sendAddToCartRequestFor: aQuantity of: aProduct

	| fieldDict response urlEncodedQuantity urlEncodedProduct |

	urlEncodedQuantity := self 
		correctlyEncodeSpacesForUrlRequestParameter: aQuantity.	
	urlEncodedProduct := self
		correctlyEncodeSpacesForUrlRequestParameter: aProduct.
	fieldDict := Dictionary 
		with: ('clientId'->urlEncodedQuantity)
		with: ('password'->urlEncodedProduct).
	
	response := WebClient htmlSubmit: (self url,'/createCart') fields: fieldDict.
	
	response isSuccess 
		ifTrue:[ ^WebUtils jsonDecode: ((response content) readStream). ] 
		ifFalse:[ ^self error: response content ].!

!methodRemoval: MarketRestInterface #sendAddToCartRequestFor:authenticatedWith: stamp: 'JPF 7/6/2021 18:46:32'!
sendAddToCartRequestFor: aClientId authenticatedWith: aPassword

	| fieldDict response urlEncodedClientId urlEncodedPassword |

	urlEncodedClientId := self 
		correctlyEncodeSpacesForUrlRequestParameter: aClientId.	
	urlEncodedPassword := self
		correctlyEncodeSpacesForUrlRequestParameter: aPassword.
	fieldDict := Dictionary 
		with: ('clientId'->urlEncodedClientId)
		with: ('password'->urlEncodedPassword).
	
	response := WebClient htmlSubmit: (self url,'/createCart') fields: fieldDict.
	
	response isSuccess 
		ifTrue:[ ^WebUtils jsonDecode: ((response content) readStream). ] 
		ifFalse:[ ^self error: response content ].!
!MarketRestInterface methodsFor: 'requests' stamp: 'JPF 7/6/2021 18:46:45' prior: 50956729!
sendAddToCartRequestFor: aQuantity of: aProduct in: aCartId

	| fieldDict response urlEncodedQuantity urlEncodedProduct urlEncodedCartId |

	urlEncodedQuantity := self 
		correctlyEncodeSpacesForUrlRequestParameter: aQuantity.	
	urlEncodedProduct := self
		correctlyEncodeSpacesForUrlRequestParameter: aProduct.
	urlEncodedCartId := self
		correctlyEncodeSpacesForUrlRequestParameter: aCartId.
	fieldDict := Dictionary 
		with: ('clientId'->urlEncodedQuantity)
		with: ('password'->urlEncodedProduct)
		with: ('cartId'->urlEncodedCartId ).
	
	response := WebClient htmlSubmit: (self url,'/addToCart') fields: fieldDict.
	
	response isSuccess 
		ifTrue:[ ^WebUtils jsonDecode: ((response content) readStream). ] 
		ifFalse:[ ^self error: response content ].! !
!MarketModel methodsFor: 'actions' stamp: 'JPF 7/6/2021 18:48:07' prior: 50956676!
sendAddToCartRequest

	| aCartId aProduct aQuantity |
	
	aCartId := self cartId.
	
	restInterface sendAddToCartRequestFor: aQuantity of: aProduct in: aCartId
! !
!MarketModel methodsFor: 'actions' stamp: 'JPF 7/6/2021 18:48:46' prior: 50956828!
sendAddToCartRequest

	| aCartId aProduct aQuantity |
	
	aCartId := self cartId.
	aProduct 
	
	restInterface sendAddToCartRequestFor: aQuantity of: aProduct in: aCartId
! !
!MarketModel methodsFor: 'actions' stamp: 'JPF 7/6/2021 18:50:30' prior: 50956836!
sendAddToCartRequest

	| aCartId aProduct aQuantity |
	
	aCartId := cartId.
	aProduct := catalog at: catalogListIndex.
	
	restInterface sendAddToCartRequestFor: aQuantity of: aProduct in: aCartId
! !
!MarketModel methodsFor: 'actions' stamp: 'JPF 7/6/2021 18:51:34' prior: 50956844!
sendAddToCartRequest

	| aCartId aProduct aQuantity |
	
	aCartId := cartId.
	aProduct := catalog at: catalogListIndex.
	aQuantity := quantityToAdd.
	
	restInterface sendAddToCartRequestFor: aQuantity of: aProduct in: aCartId
! !
!MarketModel methodsFor: 'actions' stamp: 'JPF 7/6/2021 18:53:05'!
selectedProduct

	^ catalog at: catalogListIndex! !
!MarketModel methodsFor: 'actions' stamp: 'JPF 7/6/2021 18:53:05' prior: 50956853!
sendAddToCartRequest

	| aCartId aProduct aQuantity |
	
	aCartId := cartId.
	aProduct := self selectedProduct.
	aQuantity := quantityToAdd.
	
	restInterface sendAddToCartRequestFor: aQuantity of: aProduct in: aCartId
! !
!MarketModel methodsFor: 'actions' stamp: 'JPF 7/6/2021 18:54:09' prior: 50956868!
sendAddToCartRequest

	| aCartId aProduct aQuantity |
	
	aCartId := cartId.
	aProduct := self selectedProduct.
	aQuantity := quantityToAdd.
	
	restInterface sendAddToCartRequestFor: aQuantity of: aProduct in: aCartId.
	
	restInterface sendListCartRequestFor: aCartId.
! !
!MarketModel methodsFor: 'actions' stamp: 'JPF 7/6/2021 18:54:48' prior: 50956878!
sendAddToCartRequest

	| aProduct  |
	
	aProduct := self selectedProduct.

	restInterface sendAddToCartRequestFor: quantityToAdd of: aProduct in: cartId.
	
	restInterface sendListCartRequestFor: cartId.
! !
!MarketRestInterface methodsFor: 'requests' stamp: 'JPF 7/6/2021 18:55:35'!
sendListCartRequestFor: aCartId

	| fieldDict response urlEncodedClientId urlEncodedPassword |

	fieldDict := Dictionary 
		with: ('clientId'->urlEncodedClientId)
		with: ('password'->urlEncodedPassword).
	
	response := WebClient htmlSubmit: (self url,'/createCart') fields: fieldDict.
	
	response isSuccess 
		ifTrue:[ ^WebUtils jsonDecode: ((response content) readStream). ] 
		ifFalse:[ ^self error: response content ].! !
!MarketRestInterface methodsFor: 'requests' stamp: 'JPF 7/6/2021 18:56:17' prior: 50956899!
sendListCartRequestFor: aCartId

	| fieldDict response urlEncodedCartId |


	urlEncodedCartId := self
		correctlyEncodeSpacesForUrlRequestParameter: aCartId.
	fieldDict := Dictionary with: ('cartId'->urlEncodedCartId ).

	response := WebClient htmlSubmit: (self url,'/createCart') fields: fieldDict.
	
	response isSuccess 
		ifTrue:[ ^WebUtils jsonDecode: ((response content) readStream). ] 
		ifFalse:[ ^self error: response content ].! !
!MarketRestInterface methodsFor: 'requests' stamp: 'JPF 7/6/2021 18:56:30' prior: 50956916!
sendListCartRequestFor: aCartId

	| fieldDict response urlEncodedCartId |

	urlEncodedCartId := self
		correctlyEncodeSpacesForUrlRequestParameter: aCartId.
	fieldDict := Dictionary with: ('cartId'->urlEncodedCartId ).

	response := WebClient htmlSubmit: (self url,'/createCart') fields: fieldDict.
	
	response isSuccess 
		ifTrue:[ ^WebUtils jsonDecode: ((response content) readStream). ] 
		ifFalse:[ ^self error: response content ].! !
!MarketRestInterface methodsFor: 'requests' stamp: 'JPF 7/6/2021 18:56:39' prior: 50956933!
sendListCartRequestFor: aCartId

	| fieldDict response urlEncodedCartId |

	urlEncodedCartId := self
		correctlyEncodeSpacesForUrlRequestParameter: aCartId.
	fieldDict := Dictionary with: ('cartId'->urlEncodedCartId ).

	response := WebClient htmlSubmit: (self url,'/listCart') fields: fieldDict.
	
	response isSuccess 
		ifTrue:[ ^WebUtils jsonDecode: ((response content) readStream). ] 
		ifFalse:[ ^self error: response content ].! !
!MarketRestInterface methodsFor: 'requests' stamp: 'JPF 7/6/2021 18:58:17' prior: 50956801!
sendAddToCartRequestFor: aQuantity of: aProduct in: aCartId

	| fieldDict response urlEncodedQuantity urlEncodedProduct urlEncodedCartId |

	urlEncodedQuantity := self 
		correctlyEncodeSpacesForUrlRequestParameter: aQuantity.	
	urlEncodedProduct := self
		correctlyEncodeSpacesForUrlRequestParameter: aProduct.
	urlEncodedCartId := self
		correctlyEncodeSpacesForUrlRequestParameter: aCartId.
	fieldDict := Dictionary 
		with: ('clientId'->urlEncodedQuantity)
		with: ('password'->urlEncodedProduct)
		with: ('cartId'->urlEncodedCartId ).
	
	response := WebClient htmlSubmit: (self url,'/addToCart') fields: fieldDict method: 'POST'.
	
	response isSuccess 
		ifTrue:[ ^WebUtils jsonDecode: ((response content) readStream). ] 
		ifFalse:[ ^self error: response content ].! !
!MarketRestInterface methodsFor: 'requests' stamp: 'JPF 7/6/2021 18:58:29' prior: 50954391!
sendCreateCartRequestFor: aClientId authenticatedWith: aPassword

	| fieldDict response urlEncodedClientId urlEncodedPassword |

	urlEncodedClientId := self 
		correctlyEncodeSpacesForUrlRequestParameter: aClientId.	
	urlEncodedPassword := self
		correctlyEncodeSpacesForUrlRequestParameter: aPassword.
	fieldDict := Dictionary 
		with: ('clientId'->urlEncodedClientId)
		with: ('password'->urlEncodedPassword).
	
	response := WebClient htmlSubmit: (self url,'/createCart') fields: fieldDict method: 'POST'.
	
	response isSuccess 
		ifTrue:[ ^WebUtils jsonDecode: ((response content) readStream). ] 
		ifFalse:[ ^self error: response content ].! !
!MarketModel methodsFor: 'actions' stamp: 'JPF 7/6/2021 19:00:55' prior: 50956890!
sendAddToCartRequest

	| aProduct  |
	
	aProduct := self selectedProduct.

	restInterface sendAddToCartRequestFor: quantityToAdd of: aProduct in: cartId.
	
	cartList := restInterface sendListCartRequestFor: cartId.
! !
!MarketModel methodsFor: 'actions' stamp: 'JPF 7/6/2021 19:01:09' prior: 50957018!
sendAddToCartRequest

	| aProduct  |
	
	aProduct := self selectedProduct.

	restInterface sendAddToCartRequestFor: quantityToAdd of: aProduct in: cartId.
	
	self halt.
	cartList := restInterface sendListCartRequestFor: cartId.
! !
!MarketRestInterface methodsFor: 'requests' stamp: 'JPF 7/6/2021 19:02:56' prior: 50956967!
sendAddToCartRequestFor: aQuantity of: aProduct in: aCartId

	| fieldDict response urlEncodedQuantity urlEncodedProduct urlEncodedCartId |

	urlEncodedQuantity := self 
		correctlyEncodeSpacesForUrlRequestParameter: aQuantity.	
	urlEncodedProduct := self
		correctlyEncodeSpacesForUrlRequestParameter: aProduct.
	urlEncodedCartId := aCartId.
	fieldDict := Dictionary 
		with: ('clientId'->urlEncodedQuantity)
		with: ('password'->urlEncodedProduct)
		with: ('cartId'->urlEncodedCartId ).
	
	response := WebClient htmlSubmit: (self url,'/addToCart') fields: fieldDict method: 'POST'.
	
	response isSuccess 
		ifTrue:[ ^WebUtils jsonDecode: ((response content) readStream). ] 
		ifFalse:[ ^self error: response content ].! !
!MarketRestInterface methodsFor: 'requests' stamp: 'JPF 7/6/2021 19:04:29' prior: 50957039!
sendAddToCartRequestFor: aQuantity of: aProduct in: aCartId

	| fieldDict response urlEncodedQuantity urlEncodedProduct urlEncodedCartId |
	self halt.

	urlEncodedQuantity := self 
		correctlyEncodeSpacesForUrlRequestParameter: aQuantity.	
	urlEncodedProduct := self
		correctlyEncodeSpacesForUrlRequestParameter: aProduct.
	urlEncodedCartId := aCartId.
	fieldDict := Dictionary 
		with: ('clientId'->urlEncodedQuantity)
		with: ('password'->urlEncodedProduct)
		with: ('cartId'->urlEncodedCartId ).
	
	response := WebClient htmlSubmit: (self url,'/addToCart') fields: fieldDict method: 'POST'.
	
	response isSuccess 
		ifTrue:[ ^WebUtils jsonDecode: ((response content) readStream). ] 
		ifFalse:[ ^self error: response content ].! !
!MarketRestInterface methodsFor: 'requests' stamp: 'JPF 7/6/2021 19:05:31' prior: 50957065!
sendAddToCartRequestFor: aQuantity of: aProduct in: aCartId

	| fieldDict response urlEncodedQuantity urlEncodedProduct urlEncodedCartId |
	self halt.

	urlEncodedQuantity := self 
		correctlyEncodeSpacesForUrlRequestParameter: aQuantity asString.	
	urlEncodedProduct := self
		correctlyEncodeSpacesForUrlRequestParameter: aProduct.
	urlEncodedCartId := aCartId asString .
	fieldDict := Dictionary 
		with: ('clientId'->urlEncodedQuantity)
		with: ('password'->urlEncodedProduct)
		with: ('cartId'->urlEncodedCartId ).
	
	response := WebClient htmlSubmit: (self url,'/addToCart') fields: fieldDict method: 'POST'.
	
	response isSuccess 
		ifTrue:[ ^WebUtils jsonDecode: ((response content) readStream). ] 
		ifFalse:[ ^self error: response content ].! !
!MarketRestInterface methodsFor: 'requests' stamp: 'JPF 7/6/2021 19:05:37' prior: 50957091!
sendAddToCartRequestFor: aQuantity of: aProduct in: aCartId

	| fieldDict response urlEncodedQuantity urlEncodedProduct urlEncodedCartId |

	urlEncodedQuantity := self 
		correctlyEncodeSpacesForUrlRequestParameter: aQuantity asString.	
	urlEncodedProduct := self
		correctlyEncodeSpacesForUrlRequestParameter: aProduct.
	urlEncodedCartId := aCartId asString .
	fieldDict := Dictionary 
		with: ('clientId'->urlEncodedQuantity)
		with: ('password'->urlEncodedProduct)
		with: ('cartId'->urlEncodedCartId ).
	
	response := WebClient htmlSubmit: (self url,'/addToCart') fields: fieldDict method: 'POST'.
	
	response isSuccess 
		ifTrue:[ ^WebUtils jsonDecode: ((response content) readStream). ] 
		ifFalse:[ ^self error: response content ].! !

server destroy.!

----SNAPSHOT----(6 July 2021 19:06:49) Interfaz.image priorSource: 20000629!

----STARTUP---- (6 July 2021 19:07:54) as /Users/juan.ferrino/CuisUniversity/Interfaz.image!

!MarketRestInterface methodsFor: 'requests' stamp: 'JPF 7/6/2021 19:12:27' prior: 50957118!
sendAddToCartRequestFor: aQuantity of: aProduct in: aCartId

	| fieldDict response urlEncodedQuantity urlEncodedProduct urlEncodedCartId |

	urlEncodedQuantity := self 
		correctlyEncodeSpacesForUrlRequestParameter: aQuantity asString.	
	urlEncodedProduct := self
		correctlyEncodeSpacesForUrlRequestParameter: aProduct.
	urlEncodedCartId := aCartId asString .
	fieldDict := Dictionary 
		with: ('quantity'->urlEncodedQuantity)
		with: ('product'->urlEncodedProduct)
		with: ('cartId'->urlEncodedCartId ).
	
	response := WebClient htmlSubmit: (self url,'/addToCart') fields: fieldDict method: 'POST'.
	
	response isSuccess 
		ifTrue:[ ^WebUtils jsonDecode: ((response content) readStream). ] 
		ifFalse:[ ^self error: response content ].! !

loginWindow := LoginWindow open.!
!MarketRestInterface methodsFor: 'requests' stamp: 'JPF 7/6/2021 19:14:28' prior: 50957151!
sendAddToCartRequestFor: aQuantity of: aProduct in: aCartId

	| fieldDict response urlEncodedQuantity urlEncodedProduct urlEncodedCartId |

	self halt.
	urlEncodedQuantity := self 
		correctlyEncodeSpacesForUrlRequestParameter: aQuantity asString.	
	urlEncodedProduct := self
		correctlyEncodeSpacesForUrlRequestParameter: aProduct.
	urlEncodedCartId := aCartId asString .
	fieldDict := Dictionary 
		with: ('quantity'->urlEncodedQuantity)
		with: ('product'->urlEncodedProduct)
		with: ('cartId'->urlEncodedCartId ).
	
	response := WebClient htmlSubmit: (self url,'/addToCart') fields: fieldDict method: 'POST'.
	
	response isSuccess 
		ifTrue:[ ^WebUtils jsonDecode: ((response content) readStream). ] 
		ifFalse:[ ^self error: response content ].! !
!MarketRestInterface methodsFor: 'requests' stamp: 'JPF 7/6/2021 19:15:28' prior: 50957179!
sendAddToCartRequestFor: aQuantity of: aProduct in: aCartId

	| fieldDict response urlEncodedQuantity urlEncodedProduct urlEncodedCartId |

	urlEncodedQuantity := self 
		correctlyEncodeSpacesForUrlRequestParameter: aQuantity asString.	
	urlEncodedProduct := self
		correctlyEncodeSpacesForUrlRequestParameter: aProduct.
	urlEncodedCartId := aCartId asString .
	fieldDict := Dictionary 
		with: ('quantity'->urlEncodedQuantity)
		with: ('product'->urlEncodedProduct)
		with: ('cartId'->urlEncodedCartId ).
	
	response := WebClient htmlSubmit: (self url,'/addToCart') fields: fieldDict method: 'POST'.
	
	response isSuccess 
		ifTrue:[ ^WebUtils jsonDecode: ((response content) readStream). ] 
		ifFalse:[ ^self error: response content ].! !
!MarketModel methodsFor: 'actions' stamp: 'JPF 7/6/2021 19:18:36' prior: 50956289!
sendLoginRequest

	| rawCatalogList |
	cartId := restInterface 
		sendCreateCartRequestFor: clientId 
		authenticatedWith: password.
		
	rawCatalogList := restInterface sendListCatalogRequest.
		
	catalog := MarketResponseMapper mapResponseToCatalogList: rawCatalogList.
		
	self triggerEvent: #successfulLogin with: self.! !
!MarketModel methodsFor: 'actions' stamp: 'JPF 7/6/2021 19:19:09' prior: 50957232!
sendLoginRequest

	| rawCatalogList |
	
	cartId := restInterface 
		sendCreateCartRequestFor: clientId 
		authenticatedWith: password.
		
	rawCatalogList := restInterface sendListCatalogRequest.
		
	catalog := MarketResponseMapper mapResponseToCatalogList: rawCatalogList.
		
	self triggerEvent: #successfulLogin with: self.! !
!MarketModel methodsFor: 'actions' stamp: 'JPF 7/6/2021 19:21:02' prior: 50957245!
sendLoginRequest

	| catalogDictionary |
	
	cartId := restInterface 
		sendCreateCartRequestFor: clientId 
		authenticatedWith: password.
		
	catalogDictionary := restInterface sendListCatalogRequest.
		
	catalog := MarketResponseMapper mapResponseToCatalogList: catalogDictionary.
		
	self triggerEvent: #successfulLogin with: self.! !

!classDefinition: #MarketModel category: #'TusLibros-Client' stamp: 'JPF 7/6/2021 19:21:21'!
Object subclass: #MarketModel
	instanceVariableNames: 'quantityToAdd catalogList catalogListIndex cartListIndex cartList cartId restInterface clientId password'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Client'!
!MarketModel methodsFor: 'as yet unclassified' stamp: 'JPF 7/6/2021 19:21:21' prior: 50956354!
catalog
	
	^ catalogList! !
!MarketModel methodsFor: 'as yet unclassified' stamp: 'JPF 7/6/2021 19:21:21' prior: 50956485 overrides: 16896425!
initialize

	clientId := ''.
	password := ''.
	restInterface := MarketRestInterface new.
	quantityToAdd := '1'.
	catalogList := OrderedCollection new.
	catalogListIndex := 0.
	cartList := OrderedCollection new.
	cartListIndex := 0.
	

	! !
!MarketModel methodsFor: 'as yet unclassified' stamp: 'JPF 7/6/2021 19:21:21' prior: 50956863!
selectedProduct

	^ catalogList at: catalogListIndex! !
!MarketModel methodsFor: 'as yet unclassified' stamp: 'JPF 7/6/2021 19:21:21' prior: 50957258!
sendLoginRequest

	| catalogDictionary |
	
	cartId := restInterface 
		sendCreateCartRequestFor: clientId 
		authenticatedWith: password.
		
	catalogDictionary := restInterface sendListCatalogRequest.
		
	catalogList := MarketResponseMapper mapResponseToCatalogList: catalogDictionary.
		
	self triggerEvent: #successfulLogin with: self.! !
!MarketModel methodsFor: 'actions' stamp: 'JPF 7/6/2021 19:21:52' prior: 50957303!
sendLoginRequest

	| catalogDictionary |
	
	cartId := restInterface 
		sendCreateCartRequestFor: clientId 
		authenticatedWith: password.
		
	catalogDictionary := restInterface sendListCatalogRequest.
		
	catalogList :=  catalogDictionary asOrderedCollection.
		
	self triggerEvent: #successfulLogin with: self.! !
!MarketModel methodsFor: 'actions' stamp: 'JPF 7/6/2021 19:28:05' prior: 50957317!
sendLoginRequest

	| catalogDictionary |
	
	cartId := restInterface 
		sendCreateCartRequestFor: clientId 
		authenticatedWith: password.
		
	catalogDictionary := restInterface sendListCatalogRequest.
		
	catalogDictionary keysAndValuesDo: [ :key :value | catalogList add: {key. value.}].
		
	self triggerEvent: #successfulLogin with: self.! !
!MarketModel methodsFor: 'actions' stamp: 'JPF 7/6/2021 19:28:34' prior: 50957330!
sendLoginRequest

	| catalogDictionary |
	
	cartId := restInterface 
		sendCreateCartRequestFor: clientId 
		authenticatedWith: password.
		
	catalogDictionary := restInterface sendListCatalogRequest.
	
	catalogList removeAll.	
	catalogDictionary keysAndValuesDo: [ :key :value | catalogList add: {key. value.}].
		
	self triggerEvent: #successfulLogin with: self.! !
!MarketModel methodsFor: 'product selection' stamp: 'JPF 7/6/2021 19:31:45' prior: 50957282!
catalog
	
	^ catalogList collect: [ :productAndPrice | (productAndPrice at: 1), '    $', productAndPrice at:2 ]! !
!MarketModel methodsFor: 'actions' stamp: 'JPF 7/6/2021 19:32:52' prior: 50957298!
selectedProduct

	^ (catalogList at: catalogListIndex) at: 1.! !

loginWindow := LoginWindow open.!
!MarketModel methodsFor: 'product selection' stamp: 'JPF 7/6/2021 19:34:34' prior: 50957359!
catalog
	
	^ catalogList collect: [ :productAndPrice | (productAndPrice at: 1), '    $', (productAndPrice at: 2) ]! !
!MarketModel methodsFor: 'product selection' stamp: 'JPF 7/6/2021 19:34:59' prior: 50957373!
catalog
	
	^ catalogList collect: [ :productAndPrice | (productAndPrice at: 1), '    $', (productAndPrice at: 2) asString ]! !
!MarketModel methodsFor: 'actions' stamp: 'JPF 7/6/2021 19:36:03' prior: 50957028!
sendAddToCartRequest

	| aProduct  |
	
	aProduct := self selectedProduct.
	
	self halt.

	restInterface sendAddToCartRequestFor: quantityToAdd of: aProduct in: cartId.
	
	self halt.
	cartList := restInterface sendListCartRequestFor: cartId.
! !
!MarketRestInterface methodsFor: 'requests' stamp: 'JPF 7/6/2021 19:37:22' prior: 50957206!
sendAddToCartRequestFor: aQuantity of: aProduct in: aCartId

	| fieldDict response urlEncodedQuantity urlEncodedProduct urlEncodedCartId |

	urlEncodedQuantity := self 
		correctlyEncodeSpacesForUrlRequestParameter: aQuantity asString.	
	urlEncodedProduct := self
		correctlyEncodeSpacesForUrlRequestParameter: aProduct.
	urlEncodedCartId := aCartId asString .
	fieldDict := Dictionary 
		with: ('quantity'->urlEncodedQuantity)
		with: ('product'->urlEncodedProduct)
		with: ('cartId'->urlEncodedCartId ).
	
	response := WebClient htmlSubmit: (self url,'/addToCart') fields: fieldDict method: 'POST'.
	
	response isSuccess 
		ifTrue:[ ^WebUtils jsonDecode: ((response content) readStream). ] 
		ifFalse:[ ^self error: response content ].! !
!MarketRestInterface methodsFor: 'requests' stamp: 'JPF 7/6/2021 19:39:40' prior: 50957398!
sendAddToCartRequestFor: aQuantity of: aProduct in: aCartId

	| fieldDict response urlEncodedQuantity urlEncodedProduct urlEncodedCartId |

	urlEncodedQuantity := self 
		correctlyEncodeSpacesForUrlRequestParameter: aQuantity asString.	
	urlEncodedProduct := self
		correctlyEncodeSpacesForUrlRequestParameter: aProduct.
	urlEncodedCartId := aCartId asString .
	fieldDict := Dictionary 
		with: ('quantity'->urlEncodedQuantity)
		with: ('product'->urlEncodedProduct)
		with: ('cartId'->urlEncodedCartId ).
	
	response := WebClient htmlSubmit: (self url,'/addToCart') fields: fieldDict method: 'POST'.
	
	response isSuccess 
		"ifTrue:[ ^WebUtils jsonDecode: ((response content) readStream). ]" 
		ifTrue:[ ^(response content) readStream. ] 
		ifFalse:[ ^self error: response content ].! !
!MarketRestInterface methodsFor: 'requests' stamp: 'JPF 7/6/2021 19:40:31' prior: 50956950!
sendListCartRequestFor: aCartId

	| fieldDict response urlEncodedCartId |

	urlEncodedCartId := aCartId.
	fieldDict := Dictionary with: ('cartId'->urlEncodedCartId ).

	response := WebClient htmlSubmit: (self url,'/listCart') fields: fieldDict.
	
	response isSuccess 
		ifTrue:[ ^WebUtils jsonDecode: ((response content) readStream). ] 
		ifFalse:[ ^self error: response content ].! !
!MarketModel methodsFor: 'actions' stamp: 'JPF 7/6/2021 19:40:54' prior: 50957387!
sendAddToCartRequest

	| aProduct  |
	
	aProduct := self selectedProduct.
	
	self halt.

	restInterface sendAddToCartRequestFor: quantityToAdd of: aProduct in: cartId.
	
	self halt.
	cartList := restInterface sendListCartRequestFor: cartId.
	
	self halt.
! !
!MarketModel methodsFor: 'actions' stamp: 'JPF 7/6/2021 19:47:48' prior: 50957468!
sendAddToCartRequest

	| aProduct  |
	
	aProduct := self selectedProduct.
	
	restInterface sendAddToCartRequestFor: quantityToAdd of: aProduct in: cartId.
	
	cartList := restInterface sendListCartRequestFor: cartId.

! !
!MarketModel methodsFor: 'actions' stamp: 'JPF 7/6/2021 19:49:04' prior: 50957479!
sendAddToCartRequest

	| aProduct  cartDictionary |
	
	aProduct := self selectedProduct.
	
	restInterface sendAddToCartRequestFor: quantityToAdd of: aProduct in: cartId.
	
	cartDictionary := restInterface sendListCartRequestFor: cartId.
	
	catalogList removeAll.	
	cartDictionary keysAndValuesDo: [ :key :value | cartList add: {key. value.}].
	
	

! !
!MarketModel methodsFor: 'cart' stamp: 'JPF 7/6/2021 19:49:57' prior: 50955650!
cartList

	^ cartList collect: [ :keyAnValue | keyAnValue]! !
!MarketModel methodsFor: 'cart' stamp: 'JPF 7/6/2021 19:50:06' prior: 50957503!
cartList

	^ cartList collect: [ :keyAndValue | keyAndValue]! !
!MarketModel methodsFor: 'cart' stamp: 'JPF 7/6/2021 19:51:29' prior: 50957508!
cartList

	^ cartList collect: [ :keyAndValue | (keyAndValue at: 1), '    ', (keyAndValue at: 2) asString ]! !
!MarketModel methodsFor: 'actions' stamp: 'JPF 7/6/2021 19:52:34' prior: 50957489!
sendAddToCartRequest

	| aProduct  cartDictionary |
	
	aProduct := self selectedProduct.
	
	restInterface sendAddToCartRequestFor: quantityToAdd of: aProduct in: cartId.
	
	cartDictionary := restInterface sendListCartRequestFor: cartId.
	
	cartList removeAll.	
	cartDictionary keysAndValuesDo: [ :key :value | cartList add: {key. value.}].
	
	

! !
!MarketModel methodsFor: 'actions' stamp: 'JPF 7/6/2021 19:54:19' prior: 50957520!
sendAddToCartRequest

	| aProduct  cartDictionary |
	
	aProduct := self selectedProduct.
	
	restInterface sendAddToCartRequestFor: quantityToAdd of: aProduct in: cartId.
	
	cartDictionary := restInterface sendListCartRequestFor: cartId.
	
	cartList removeAll.	
	cartDictionary keysAndValuesDo: [ :key :value | cartList add: {key. value}].
	
	

! !
!MarketModel methodsFor: 'actions' stamp: 'JPF 7/6/2021 19:54:26' prior: 50957344!
sendLoginRequest

	| catalogDictionary |
	
	cartId := restInterface 
		sendCreateCartRequestFor: clientId 
		authenticatedWith: password.
		
	catalogDictionary := restInterface sendListCatalogRequest.
	
	catalogList removeAll.	
	catalogDictionary keysAndValuesDo: [ :key :value | catalogList add: {key. value}].
		
	self triggerEvent: #successfulLogin with: self.! !

loginWindow := LoginWindow open.!
!MarketModel methodsFor: 'actions' stamp: 'JPF 7/6/2021 19:56:02' prior: 50957534!
sendAddToCartRequest

	| aProduct  cartDictionary |
	
	aProduct := self selectedProduct.
	
	restInterface sendAddToCartRequestFor: quantityToAdd of: aProduct in: cartId.
	
	cartDictionary := restInterface sendListCartRequestFor: cartId.
	
	cartList removeAll.	
	cartDictionary keysAndValuesDo: [ :key :value | cartList add: {key. value}].
	
	self triggerEvent: #productAddedToCart with: self.
	
	

! !
!MarketWindow methodsFor: 'initialization' stamp: 'JPF 7/6/2021 19:57:25' prior: 50956313!
initializeTitled: aTitle withModel: aModel

	self titleMorph showButtonsNamed: #( close collapse ).
	self setLabel: aTitle.
	self model: aModel.
	self morphExtent: (self defaultExtent).
	self buildMorphicWindow.
	
	catalogListMorph updateList.
	catalogListMorph setSelectionIndex: 0.
	
	self openInWorld.
	
	self model when: #productAddedToCart send: #refreshCart to: self.! !
!MarketWindow methodsFor: 'nil' stamp: 'JPF 7/6/2021 19:58:35'!
refreshCart
	
	cartListMorph updateList.
	catalogListMorph setSelectionIndex: 0.! !

loginWindow := LoginWindow open.!
!MarketModel methodsFor: 'actions' stamp: 'JPF 7/6/2021 20:03:28' prior: 50955558!
sendRemoveFromCartRequest

	restInterface sendRemoveFromCartRequestFor: self getSelectedProductFromCart in: cartId.! !
!MarketModel methodsFor: 'actions' stamp: 'JPF 7/6/2021 20:03:50'!
getSelectedProductFromCart

	^ (cartList at: cartListIndex) at: 1.! !
!MarketModel methodsFor: 'actions' stamp: 'JPF 7/6/2021 20:04:13'!
selectedProductFromCart

	^ (cartList at: cartListIndex) at: 1.! !
!MarketModel methodsFor: 'as yet unclassified' stamp: 'JPF 7/6/2021 20:04:13' prior: 50957601!
sendRemoveFromCartRequest

	restInterface sendRemoveFromCartRequestFor: self selectedProductFromCart in: cartId.! !

!methodRemoval: MarketModel #getSelectedProductFromCart stamp: 'JPF 7/6/2021 20:04:13'!
getSelectedProductFromCart

	^ (cartList at: cartListIndex) at: 1.!
!MarketModel methodsFor: 'actions' stamp: 'JPF 7/6/2021 20:04:28'!
selectedProductFromCatalog

	^ (catalogList at: catalogListIndex) at: 1.! !
!MarketModel methodsFor: 'as yet unclassified' stamp: 'JPF 7/6/2021 20:04:28' prior: 50957564!
sendAddToCartRequest

	| aProduct  cartDictionary |
	
	aProduct := self selectedProductFromCatalog.
	
	restInterface sendAddToCartRequestFor: quantityToAdd of: aProduct in: cartId.
	
	cartDictionary := restInterface sendListCartRequestFor: cartId.
	
	cartList removeAll.	
	cartDictionary keysAndValuesDo: [ :key :value | cartList add: {key. value}].
	
	self triggerEvent: #productAddedToCart with: self.
	
	

! !

!methodRemoval: MarketModel #selectedProduct stamp: 'JPF 7/6/2021 20:04:28'!
selectedProduct

	^ (catalogList at: catalogListIndex) at: 1.!
!MarketModel methodsFor: 'nil' stamp: 'JPF 7/6/2021 20:05:34'!
asdf! !

!methodRemoval: MarketModel #asdf stamp: 'JPF 7/6/2021 20:05:46'!
asdf!
!MarketRestInterface methodsFor: 'requests' stamp: 'JPF 7/6/2021 20:07:34'!
sendRemoveFromCartRequestFor: aProduct in: aCartId

	| fieldDict response urlEncodedQuantity urlEncodedProduct urlEncodedCartId |

	urlEncodedProduct := self
		correctlyEncodeSpacesForUrlRequestParameter: aProduct.
	urlEncodedCartId := aCartId asString.
	
	fieldDict := Dictionary 
		with: ('quantity'->urlEncodedQuantity)
		with: ('product'->urlEncodedProduct)
		with: ('cartId'->urlEncodedCartId ).
	
	response := WebClient htmlSubmit: (self url,'/addToCart') fields: fieldDict method: 'POST'.
	
	response isSuccess 
		"ifTrue:[ ^WebUtils jsonDecode: ((response content) readStream). ]" 
		ifTrue:[ ^(response content) readStream. ] 
		ifFalse:[ ^self error: response content ].! !
!MarketRestInterface methodsFor: 'requests' stamp: 'JPF 7/6/2021 20:07:51' prior: 50957660!
sendRemoveFromCartRequestFor: aProduct in: aCartId

	| fieldDict response urlEncodedProduct urlEncodedCartId |

	urlEncodedProduct := self
		correctlyEncodeSpacesForUrlRequestParameter: aProduct.
	urlEncodedCartId := aCartId asString.
	
	fieldDict := Dictionary 
		with: ('product'->urlEncodedProduct)
		with: ('cartId'->urlEncodedCartId).
	
	response := WebClient htmlSubmit: (self url,'/addToCart') fields: fieldDict method: 'POST'.
	
	response isSuccess 
		"ifTrue:[ ^WebUtils jsonDecode: ((response content) readStream). ]" 
		ifTrue:[ ^(response content) readStream. ] 
		ifFalse:[ ^self error: response content ].! !
!MarketRestInterface methodsFor: 'requests' stamp: 'JPF 7/6/2021 20:08:39' prior: 50957685!
sendRemoveFromCartRequestFor: aProduct in: aCartId

	| fieldDict response urlEncodedProduct urlEncodedCartId |

	urlEncodedProduct := self
		correctlyEncodeSpacesForUrlRequestParameter: aProduct.
	urlEncodedCartId := aCartId asString.
	
	fieldDict := Dictionary 
		with: ('product'->urlEncodedProduct)
		with: ('cartId'->urlEncodedCartId).
	
	response := WebClient htmlSubmit: (self url,'/removeFromCart') fields: fieldDict method: 'POST'.
	
	response isSuccess 
		"ifTrue:[ ^WebUtils jsonDecode: ((response content) readStream). ]" 
		ifTrue:[ ^(response content) readStream. ] 
		ifFalse:[ ^self error: response content ].! !
!MarketModel methodsFor: 'actions' stamp: 'JPF 7/6/2021 20:11:44'!
sendListCartCartRequest

	|  cartDictionary |
	
	cartDictionary := restInterface sendListCartRequestFor: cartId.
	
	cartList removeAll.	
	cartDictionary keysAndValuesDo: [ :key :value | cartList add: {key. value}].
	
	self triggerEvent: #productAddedToCart with: self.
	
	

! !
!MarketModel methodsFor: 'actions' stamp: 'JPF 7/6/2021 20:11:56' prior: 50957635!
sendAddToCartRequest

	| aProduct  |
	
	aProduct := self selectedProductFromCatalog.
	
	restInterface sendAddToCartRequestFor: quantityToAdd of: aProduct in: cartId.
	
	self sendListCartCartRequest.
	

! !
!MarketModel methodsFor: 'actions' stamp: 'JPF 7/6/2021 20:12:09' prior: 50957618!
sendRemoveFromCartRequest

	restInterface sendRemoveFromCartRequestFor: self selectedProductFromCart in: cartId.
	
	self sendListCartCartRequest.! !
!MarketModel methodsFor: 'actions' stamp: 'JPF 7/6/2021 20:12:39' prior: 50957730!
sendListCartCartRequest

	|  cartDictionary |
	
	cartDictionary := restInterface sendListCartRequestFor: cartId.
	
	cartList removeAll.	
	cartDictionary keysAndValuesDo: [ :key :value | cartList add: {key. value}].
	
	self triggerEvent: #cartHasChanged with: self.
	
	

! !
!MarketWindow methodsFor: 'initialization' stamp: 'JPF 7/6/2021 20:12:52' prior: 50957580!
initializeTitled: aTitle withModel: aModel

	self titleMorph showButtonsNamed: #( close collapse ).
	self setLabel: aTitle.
	self model: aModel.
	self morphExtent: (self defaultExtent).
	self buildMorphicWindow.
	
	catalogListMorph updateList.
	catalogListMorph setSelectionIndex: 0.
	
	self openInWorld.
	
	self model when: #cartHasChanged send: #refreshCart to: self.! !

loginWindow := LoginWindow open.!
!TusLibrosRestInterface methodsFor: 'handlers' stamp: 'JPF 7/6/2021 20:19:24' prior: 50954520!
handleRemoveFromCart: request

	self handle: request with: [	 | product cartId |	
		
		cartId := self getParameter: 'cartId' from: request.
		product := self getParameter: 'book' from: request.
		
		tusLibrosSystemFacade
			remove: product
			fromCartIdentifiedAs: cartId asNumber.
		
		request send200Response: 'OK'
	]! !
!TusLibrosRestInterface methodsFor: 'handlers' stamp: 'JPF 7/6/2021 20:19:39' prior: 50957788!
handleRemoveFromCart: request

	self handle: request with: [	 | product cartId |	
		
		cartId := self getParameter: 'cartId' from: request.
		product := self getParameter: 'product' from: request.
		
		tusLibrosSystemFacade
			remove: product
			fromCartIdentifiedAs: cartId asNumber.
		
		request send200Response: 'OK'
	]! !

Panel subclass: #PurchaseHistoryWindow
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Client'!

!classDefinition: #PurchaseHistoryWindow category: #'TusLibros-Client' stamp: 'JPF 7/6/2021 20:23:04'!
Panel subclass: #PurchaseHistoryWindow
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Client'!
!PurchaseHistoryWindow class methodsFor: 'instance creation' stamp: 'JPF 7/6/2021 20:24:04'!
openWith: aModel

	^ self new initializeTitled: 'Purchase History' withModel: aModel.! !
!PurchaseHistoryWindow methodsFor: 'initialization' stamp: 'JPF 7/6/2021 20:25:22'!
initializeTitled: aTitle withModel: aModel

	self titleMorph showButtonsNamed: #( close collapse ).
	self setLabel: aTitle.
	self model: aModel.
	self morphExtent: (self defaultExtent).
	self buildMorphicWindow.
	
	self openInWorld.
	
	self model when: #cartHasChanged send: #refreshCart to: self.! !
!MarketWindow methodsFor: 'initialization' stamp: 'JPF 7/6/2021 20:25:35' prior: 50957772!
initializeTitled: aTitle withModel: aModel

	self titleMorph showButtonsNamed: #( close collapse ).
	self setLabel: aTitle.
	self model: aModel.
	self morphExtent: (self defaultExtent).
	self buildMorphicWindow.
	
	self openInWorld.
	
	self model when: #cartHasChanged send: #refreshCart to: self.! !
!MarketWindow methodsFor: 'initialization' stamp: 'JPF 7/6/2021 20:25:56' prior: 50957847!
initializeTitled: aTitle withModel: aModel

	self titleMorph showButtonsNamed: #( close collapse ).
	self setLabel: aTitle.
	self model: aModel.
	self morphExtent: (self defaultExtent).
	self buildMorphicWindow.
	
	self openInWorld.! !
!MarketWindow methodsFor: 'initialization' stamp: 'JPF 7/6/2021 20:25:35' prior: 50957860!
initializeTitled: aTitle withModel: aModel

	self titleMorph showButtonsNamed: #( close collapse ).
	self setLabel: aTitle.
	self model: aModel.
	self morphExtent: (self defaultExtent).
	self buildMorphicWindow.
	
	self openInWorld.
	
	self model when: #cartHasChanged send: #refreshCart to: self.! !
!PurchaseHistoryWindow methodsFor: 'GUI building' stamp: 'JPF 7/6/2021 20:27:54' overrides: 50941419!
buildMorphicWindow

	| purchaseHistoryListMorph |
	self layoutMorph beRow;
	separation: 15;
	axisEdgeWeight: 0;
	addMorph: purchaseHistoryListMorph.! !
!PurchaseHistoryWindow methodsFor: 'GUI building' stamp: 'JPF 7/6/2021 20:28:02' prior: 50957884 overrides: 50941419!
buildMorphicWindow

	| purchaseHistoryListMorph |
	
	self layoutMorph beRow;
	separation: 15;
	axisEdgeWeight: 0;
	addMorph: purchaseHistoryListMorph.! !
!PurchaseHistoryWindow methodsFor: 'GUI building' stamp: 'JPF 7/6/2021 20:29:47' prior: 50957893 overrides: 50941419!
buildMorphicWindow

	| purchaseHistoryListMorph |
	
	purchaseHistoryListMorph := PluggableListMorph 
		model: self model 
		listGetter: #cartList
		indexGetter: #cartListIndex 
		indexSetter: #cartListIndex:.
	purchaseHistoryListMorph 
		borderColor: Color skyBlue; 
		borderWidth: 1.
	purchaseHistoryListMorph layoutSpec 
		proportionalWidth: 100;
		proportionalHeight: 100.
	
	self layoutMorph beRow;
	separation: 15;
	axisEdgeWeight: 0;
	addMorph: purchaseHistoryListMorph.! !
!PurchaseHistoryWindow methodsFor: 'GUI building' stamp: 'JPF 7/6/2021 20:29:53' prior: 50957902 overrides: 50941419!
buildMorphicWindow

	| purchaseHistoryListMorph |
	
	purchaseHistoryListMorph := PluggableListMorph 
		model: self model 
		listGetter: #cartList
		indexGetter: #cartListIndex 
		indexSetter: #cartListIndex:.
	purchaseHistoryListMorph 
		borderColor: Color skyBlue; 
		borderWidth: 1.
	purchaseHistoryListMorph layoutSpec 
		proportionalWidth: 100;
		proportionalHeight: 100.
	
	self layoutMorph beRow;
	separation: 15;
	axisEdgeWeight: 0;
	addMorph: purchaseHistoryListMorph.! !
!PurchaseHistoryWindow methodsFor: 'GUI building' stamp: 'JPF 7/6/2021 20:31:13' prior: 50957921 overrides: 50941419!
buildMorphicWindow

	| purchaseHistoryListMorph |
	
	purchaseHistoryListMorph := PluggableListMorph 
		model: self model 
		listGetter: #purchaseHistoryList
		indexGetter: #purchaseHistoryListIndex 
		indexSetter: #purchaseHistoryListIndex:.
	purchaseHistoryListMorph 
		borderColor: Color skyBlue; 
		borderWidth: 1.
	purchaseHistoryListMorph layoutSpec 
		proportionalWidth: 100;
		proportionalHeight: 100.
	
	self layoutMorph beRow;
	separation: 15;
	axisEdgeWeight: 0;
	addMorph: purchaseHistoryListMorph.! !

!classDefinition: #MarketModel category: #'TusLibros-Client' stamp: 'JPF 7/6/2021 20:32:29'!
Object subclass: #MarketModel
	instanceVariableNames: 'quantityToAdd catalogList catalogListIndex cartListIndex cartList cartId restInterface clientId password purchaseHistoryList'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Client'!
!MarketModel methodsFor: 'purchase history' stamp: 'JPF 7/6/2021 20:32:27'!
purchaseHistoryList

	^ purchaseHistoryList.! !
!MarketModel methodsFor: 'purchase history' stamp: 'JPF 7/6/2021 20:32:44'!
purchaseHistoryListIndex

	^ 0! !
!MarketModel methodsFor: 'purchase history' stamp: 'JPF 7/6/2021 20:32:56'!
purchaseHistoryListIndex: aNewIndex! !
!MarketModel methodsFor: 'initialization' stamp: 'JPF 7/6/2021 20:33:21' prior: 50957287 overrides: 16896425!
initialize

	clientId := ''.
	password := ''.
	restInterface := MarketRestInterface new.
	quantityToAdd := '1'.
	catalogList := OrderedCollection new.
	catalogListIndex := 0.
	cartList := OrderedCollection new.
	cartListIndex := 0.
	purchaseHistoryList := OrderedCollection new.
	

	! !
!MarketModel methodsFor: 'actions' stamp: 'JPF 7/6/2021 20:35:31' prior: 50955564!
sendPurchasesRequest

	| purchaseHistoryDictionary |
	purchaseHistoryList removeAll.
	
	purchaseHistoryDictionary := restInterface sendListPurchasesRequestFor: clientId authenticatedWith: password.! !
!MarketModel methodsFor: 'actions' stamp: 'JPF 7/6/2021 20:36:04' prior: 50957995!
sendPurchasesRequest

	| purchaseHistoryDictionary |
	
	purchaseHistoryList removeAll.
	
	purchaseHistoryDictionary := restInterface sendListPurchasesRequestFor: clientId authenticatedWith: password.! !
!MarketRestInterface methodsFor: 'requests' stamp: 'JPF 7/6/2021 20:36:58'!
sendListPurchasesRequestFor: aClientId authenticatedWith: aPassword

	| fieldDict response urlEncodedClientId urlEncodedPassword |

	urlEncodedClientId := self 
		correctlyEncodeSpacesForUrlRequestParameter: aClientId.	
	urlEncodedPassword := self
		correctlyEncodeSpacesForUrlRequestParameter: aPassword.
	fieldDict := Dictionary 
		with: ('clientId'->urlEncodedClientId)
		with: ('password'->urlEncodedPassword).
	
	response := WebClient htmlSubmit: (self url,'/listPurchases') fields: fieldDict method: 'POST'.
	
	response isSuccess 
		ifTrue:[ ^WebUtils jsonDecode: ((response content) readStream). ] 
		ifFalse:[ ^self error: response content ].! !
!MarketRestInterface methodsFor: 'requests' stamp: 'JPF 7/6/2021 20:37:09' prior: 50958013!
sendListPurchasesRequestFor: aClientId authenticatedWith: aPassword

	| fieldDict response urlEncodedClientId urlEncodedPassword |

	urlEncodedClientId := self 
		correctlyEncodeSpacesForUrlRequestParameter: aClientId.	
	urlEncodedPassword := self
		correctlyEncodeSpacesForUrlRequestParameter: aPassword.
	fieldDict := Dictionary 
		with: ('clientId'->urlEncodedClientId)
		with: ('password'->urlEncodedPassword).
	
	response := WebClient htmlSubmit: (self url,'/listPurchases') fields: fieldDict.
	
	response isSuccess 
		ifTrue:[ ^WebUtils jsonDecode: ((response content) readStream). ] 
		ifFalse:[ ^self error: response content ].! !
!MarketModel methodsFor: 'actions' stamp: 'JPF 7/6/2021 20:39:04' prior: 50958004!
sendPurchasesRequest

	| purchaseHistoryDictionary |
	
	purchaseHistoryList removeAll.
	
	purchaseHistoryDictionary := restInterface sendListPurchasesRequestFor: clientId authenticatedWith: password.
	
	self halt.! !

loginWindow := LoginWindow open.!
!MarketModel methodsFor: 'actions' stamp: 'JPF 7/6/2021 20:45:37' prior: 50958060!
sendPurchasesRequest

	| purchaseHistoryDictionary items total |
	
	purchaseHistoryList removeAll.
	
	purchaseHistoryDictionary := restInterface sendListPurchasesRequestFor: clientId authenticatedWith: password.
	
	self halt.
	
	items := purchaseHistoryDictionary at: 'items'.
	total := purchaseHistoryDictionary at: 'total'.
	
	! !
!MarketModel methodsFor: 'actions' stamp: 'JPF 7/6/2021 20:48:34' prior: 50958071!
sendPurchasesRequest

	| purchaseHistoryDictionary items total |
	
	purchaseHistoryList removeAll.
	
	purchaseHistoryDictionary := restInterface sendListPurchasesRequestFor: clientId authenticatedWith: password.
	
	self halt.
	
	items := purchaseHistoryDictionary at: 'items'.
	total := purchaseHistoryDictionary at: 'total'.
	
	items keysAndValuesDo: [ :key :value | purchaseHistoryList add: (key , '    ' , value asString) ].
	purchaseHistoryList add: ('Total: ' , total)
	
	! !
!MarketModel methodsFor: 'actions' stamp: 'JPF 7/6/2021 20:49:00' prior: 50958084!
sendPurchasesRequest

	| purchaseHistoryDictionary items total |
	
	purchaseHistoryList removeAll.
	
	purchaseHistoryDictionary := restInterface sendListPurchasesRequestFor: clientId authenticatedWith: password.
	
	self halt.
	
	items := purchaseHistoryDictionary at: 'items'.
	total := purchaseHistoryDictionary at: 'total'.
	
	items keysAndValuesDo: [ :key :value | purchaseHistoryList add: (key , '    ' , value asString) ].
	purchaseHistoryList add: ('Total: ' , total).
	
	PurchaseHistoryWindow openWith: self.
	
	! !

loginWindow := LoginWindow open.!
!MarketModel methodsFor: 'actions' stamp: 'JPF 7/6/2021 20:49:57' prior: 50958102!
sendPurchasesRequest

	| purchaseHistoryDictionary items total |
	
	purchaseHistoryList removeAll.
	
	purchaseHistoryDictionary := restInterface sendListPurchasesRequestFor: clientId authenticatedWith: password.
	
	items := purchaseHistoryDictionary at: 'items'.
	total := purchaseHistoryDictionary at: 'total'.
	
	items keysAndValuesDo: [ :key :value | purchaseHistoryList add: (key , '    ' , value asString) ].
	purchaseHistoryList add: ('Total: ' , total).
	
	PurchaseHistoryWindow openWith: self.
	
	! !
!MarketModel methodsFor: 'actions' stamp: 'JPF 7/6/2021 20:52:27' prior: 50958123!
sendPurchasesRequest

	| purchaseHistoryDictionary items total |
	
	purchaseHistoryList removeAll.
	
	purchaseHistoryDictionary := restInterface sendListPurchasesRequestFor: clientId authenticatedWith: password.
	
	items := purchaseHistoryDictionary at: 'items'.
	total := purchaseHistoryDictionary at: 'total'.
	
	items do: [ :itemAndQuantity | (itemAndQuantity at: 'item') , '    ' , (itemAndQuantity at: 'quantity') asString ].
	purchaseHistoryList add: ('Total: ' , total).
	
	PurchaseHistoryWindow openWith: self.
	
	! !
!MarketModel methodsFor: 'actions' stamp: 'JPF 7/6/2021 20:52:56' prior: 50958142!
sendPurchasesRequest

	| purchaseHistoryDictionary items total |
	
	purchaseHistoryList removeAll.
	
	purchaseHistoryDictionary := restInterface sendListPurchasesRequestFor: clientId authenticatedWith: password.
	
	items := purchaseHistoryDictionary at: 'items'.
	total := purchaseHistoryDictionary at: 'total'.
	
	items do: [ :itemAndQuantity | purchaseHistoryList add: (itemAndQuantity at: 'item') , '    ' , (itemAndQuantity at: 'quantity') asString ].
	purchaseHistoryList add: ('Total: ' , total).
	
	PurchaseHistoryWindow openWith: self.
	
	! !
!MarketModel methodsFor: 'actions' stamp: 'JPF 7/6/2021 20:53:15' prior: 50958162!
sendPurchasesRequest

	| purchaseHistoryDictionary items total |
	
	purchaseHistoryList removeAll.
	
	purchaseHistoryDictionary := restInterface sendListPurchasesRequestFor: clientId authenticatedWith: password.
	
	items := purchaseHistoryDictionary at: 'items'.
	total := purchaseHistoryDictionary at: 'total'.
	
	items do: [ :itemAndQuantity | purchaseHistoryList add: (itemAndQuantity at: 'item') , '    ' , (itemAndQuantity at: 'quantity') asString ].
	purchaseHistoryList add: ('Total: ' , total asString ).
	
	PurchaseHistoryWindow openWith: self.
	
	! !

----SNAPSHOT----(6 July 2021 21:08:46) Interfaz.image priorSource: 20015799!

----QUIT----(6 July 2021 21:08:49) Interfaz.image priorSource: 20049648!

----STARTUP---- (7 July 2021 18:18:08) as /Users/juan.ferrino/CuisUniversity/Interfaz.image!


server := TusLibrosRestInterface listeningOn: 8080.!

loginWindow := LoginWindow open.!
!PurchaseHistoryWindow methodsFor: 'initialization' stamp: 'JPF 7/7/2021 18:22:03' overrides: 50941505!
defaultExtent

	^ 700@400! !
!PurchaseHistoryWindow methodsFor: 'initialization' stamp: 'JPF 7/7/2021 18:22:23' prior: 50958214 overrides: 50941505!
defaultExtent

	^ 400@700! !
!PurchaseHistoryWindow methodsFor: 'initialization' stamp: 'JPF 7/7/2021 18:22:48' prior: 50958219 overrides: 50941505!
defaultExtent

	^ 500@700! !

Panel subclass: #TicketWindow
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Client'!

!classDefinition: #TicketWindow category: #'TusLibros-Client' stamp: 'JPF 7/7/2021 18:23:50'!
Panel subclass: #TicketWindow
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Client'!

TicketWindow class
	instanceVariableNames: ''!

!classDefinition: 'TicketWindow class' category: #'TusLibros-Client' stamp: 'JPF 7/7/2021 18:23:50'!
TicketWindow class
	instanceVariableNames: ''!
!TicketWindow methodsFor: 'GUI building' stamp: 'JPF 7/7/2021 18:23:50' overrides: 50941419!
buildMorphicWindow

	| purchaseHistoryListMorph |
	
	purchaseHistoryListMorph := PluggableListMorph 
		model: self model 
		listGetter: #purchaseHistoryList
		indexGetter: #purchaseHistoryListIndex 
		indexSetter: #purchaseHistoryListIndex:.
	purchaseHistoryListMorph 
		borderColor: Color skyBlue; 
		borderWidth: 1.
	purchaseHistoryListMorph layoutSpec 
		proportionalWidth: 100;
		proportionalHeight: 100.
	
	self layoutMorph beRow;
	separation: 15;
	axisEdgeWeight: 0;
	addMorph: purchaseHistoryListMorph.! !
!TicketWindow methodsFor: 'initialization' stamp: 'JPF 7/7/2021 18:23:50' overrides: 50941505!
defaultExtent

	^ 500@700! !
!TicketWindow methodsFor: 'initialization' stamp: 'JPF 7/7/2021 18:23:50'!
initializeTitled: aTitle withModel: aModel

	self titleMorph showButtonsNamed: #( close collapse ).
	self setLabel: aTitle.
	self model: aModel.
	self morphExtent: (self defaultExtent).
	self buildMorphicWindow.
	
	self openInWorld.
	
	self model when: #cartHasChanged send: #refreshCart to: self.! !
!TicketWindow class methodsFor: 'instance creation' stamp: 'JPF 7/7/2021 18:23:50'!
openWith: aModel

	^ self new initializeTitled: 'Purchase History' withModel: aModel.! !
!TicketWindow methodsFor: 'GUI building' stamp: 'JPF 7/7/2021 18:24:32' prior: 50958246 overrides: 50941419!
buildMorphicWindow

	| purchaseHistoryListMorph |
	
	purchaseHistoryListMorph := PluggableListMorph 
		model: self model 
		listGetter: #ticketList
		indexGetter: #ticketListIndex 
		indexSetter: #ticketListIndex:.
	purchaseHistoryListMorph 
		borderColor: Color skyBlue; 
		borderWidth: 1.
	purchaseHistoryListMorph layoutSpec 
		proportionalWidth: 100;
		proportionalHeight: 100.
	
	self layoutMorph beRow;
	separation: 15;
	axisEdgeWeight: 0;
	addMorph: purchaseHistoryListMorph.! !
!TicketWindow methodsFor: 'GUI building' stamp: 'JPF 7/7/2021 18:25:05' prior: 50958289 overrides: 50941419!
buildMorphicWindow

	| ticketListMorph |
	
	ticketListMorph := PluggableListMorph 
		model: self model 
		listGetter: #ticketList
		indexGetter: #ticketListIndex 
		indexSetter: #ticketListIndex:.
	ticketListMorph 
		borderColor: Color skyBlue; 
		borderWidth: 1.
	ticketListMorph layoutSpec 
		proportionalWidth: 100;
		proportionalHeight: 100.
	
	self layoutMorph beRow;
	separation: 15;
	axisEdgeWeight: 0;
	addMorph: ticketListMorph.! !
!TicketWindow methodsFor: 'GUI building' stamp: 'JPF 7/7/2021 18:32:40' prior: 50958308 overrides: 50941419!
buildMorphicWindow

	| ticketListMorph buttonsLayoutMorph logOutButtonMorph newShoppingCartButtonMorph |
	
	ticketListMorph := PluggableListMorph 
		model: self model 
		listGetter: #ticketList
		indexGetter: #ticketListIndex 
		indexSetter: #ticketListIndex:.
	ticketListMorph 
		borderColor: Color skyBlue; 
		borderWidth: 1.
	ticketListMorph layoutSpec 
		proportionalWidth: 100;
		proportionalHeight: 100.
		
	newShoppingCartButtonMorph := PluggableButtonMorph 
		model: self model 
		stateGetter: nil 
		action: #newCart  
		label: 'New shopping cart'.	
	
	logOutButtonMorph := PluggableButtonMorph 
		model: self model 
		stateGetter: nil 
		action: #logOut  
		label: 'Log out'.	
	
	buttonsLayoutMorph := LayoutMorph newRow;
	separation: 15;
	axisEdgeWeight: 0;
	addMorph: newShoppingCartButtonMorph;
	addMorph: logOutButtonMorph.
	
	self layoutMorph beColumn;
	separation: 15;
	axisEdgeWeight: 0;
	addMorph: ticketListMorph.! !
!TicketWindow methodsFor: 'GUI building' stamp: 'JPF 7/7/2021 18:34:38' prior: 50958326 overrides: 50941419!
buildMorphicWindow

	| ticketListMorph buttonsLayoutMorph logOutButtonMorph newShoppingCartButtonMorph |
	
	ticketListMorph := PluggableListMorph 
		model: self model 
		listGetter: #ticketList
		indexGetter: #ticketListIndex 
		indexSetter: #ticketListIndex:.
	ticketListMorph 
		borderColor: Color skyBlue; 
		borderWidth: 1.
	ticketListMorph layoutSpec 
		proportionalWidth: 100;
		proportionalHeight: 100.
		
	newShoppingCartButtonMorph := PluggableButtonMorph 
		model: self model 
		stateGetter: nil 
		action: #newCart  
		label: 'New shopping cart'.	
	
	logOutButtonMorph := PluggableButtonMorph 
		model: self model 
		stateGetter: nil 
		action: #logOut  
		label: 'Log out'.	
	
	buttonsLayoutMorph := LayoutMorph newRow;
	separation: 10;
	axisEdgeWeight: 0.5;
	addMorph: newShoppingCartButtonMorph;
	addMorph: logOutButtonMorph.
	
	self layoutMorph beColumn;
	separation: 15;
	axisEdgeWeight: 0;
	addMorph: buttonsLayoutMorph;
	addMorph: ticketListMorph.! !
!TicketWindow class methodsFor: 'instance creation' stamp: 'JPF 7/7/2021 18:35:22' prior: 50958282!
openWith: aModel

	^ self new initializeTitled: 'Purchase ticket' withModel: aModel.! !
!TicketWindow class methodsFor: 'instance creation' stamp: 'JPF 7/7/2021 18:35:58' prior: 50958393!
openWith: aModel

	^ self new initializeTitled: 'Purchase done' withModel: aModel.! !
!TicketWindow methodsFor: 'GUI building' stamp: 'JPF 7/7/2021 18:37:07' prior: 50958359 overrides: 50941419!
buildMorphicWindow

	| ticketListMorph buttonsLayoutMorph logOutButtonMorph newShoppingCartButtonMorph |
	
	ticketListMorph := PluggableListMorph 
		model: self model 
		listGetter: #ticketList
		indexGetter: #ticketListIndex 
		indexSetter: #ticketListIndex:.
	ticketListMorph 
		borderColor: Color skyBlue; 
		borderWidth: 1.
	ticketListMorph layoutSpec 
		proportionalWidth: 100;
		proportionalHeight: 100.
		
	newShoppingCartButtonMorph := PluggableButtonMorph 
		model: self model 
		stateGetter: nil 
		action: #newCart  
		label: 'New shopping cart'.	
	
	logOutButtonMorph := PluggableButtonMorph 
		model: self model 
		stateGetter: nil 
		action: #logOut  
		label: 'Log out'.	
	
	buttonsLayoutMorph := LayoutMorph newRow;
	separation: 10;
	axisEdgeWeight: 0.5;
	addMorph: newShoppingCartButtonMorph;
	addMorph: logOutButtonMorph.
	
	self layoutMorph beColumn;
	separation: 15;
	axisEdgeWeight: 0;
	addMorph: (LabelMorph contents: 'Catalog');
	addMorph: buttonsLayoutMorph;
	addMorph: ticketListMorph.! !
!TicketWindow methodsFor: 'GUI building' stamp: 'JPF 7/7/2021 18:37:16' prior: 50958406 overrides: 50941419!
buildMorphicWindow

	| ticketListMorph buttonsLayoutMorph logOutButtonMorph newShoppingCartButtonMorph |
	
	ticketListMorph := PluggableListMorph 
		model: self model 
		listGetter: #ticketList
		indexGetter: #ticketListIndex 
		indexSetter: #ticketListIndex:.
	ticketListMorph 
		borderColor: Color skyBlue; 
		borderWidth: 1.
	ticketListMorph layoutSpec 
		proportionalWidth: 100;
		proportionalHeight: 100.
		
	newShoppingCartButtonMorph := PluggableButtonMorph 
		model: self model 
		stateGetter: nil 
		action: #newCart  
		label: 'New shopping cart'.	
	
	logOutButtonMorph := PluggableButtonMorph 
		model: self model 
		stateGetter: nil 
		action: #logOut  
		label: 'Log out'.	
	
	buttonsLayoutMorph := LayoutMorph newRow;
	separation: 10;
	axisEdgeWeight: 0.5;
	addMorph: newShoppingCartButtonMorph;
	addMorph: logOutButtonMorph.
	
	self layoutMorph beColumn;
	separation: 15;
	axisEdgeWeight: 0;
	addMorph: (LabelMorph contents: 'Purchase detail');
	addMorph: buttonsLayoutMorph;
	addMorph: ticketListMorph.! !
!MarketModel methodsFor: 'ticket' stamp: 'JPF 7/7/2021 18:40:59'!
ticketList

	! !

!classDefinition: #MarketModel category: #'TusLibros-Client' stamp: 'JPF 7/7/2021 18:41:20'!
Object subclass: #MarketModel
	instanceVariableNames: 'quantityToAdd catalogList catalogListIndex cartListIndex cartList cartId restInterface clientId password purchaseHistoryList ticketList'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Client'!
!MarketModel methodsFor: 'ticket' stamp: 'JPF 7/7/2021 18:41:18' prior: 50958476!
ticketList

	^ ticketList

	! !
!MarketModel methodsFor: 'ticket' stamp: 'JPF 7/7/2021 18:41:45'!
ticketListIndex

	^ 0

	! !
!MarketModel methodsFor: 'ticket' stamp: 'JPF 7/7/2021 18:41:50'!
ticketListIndex: newIndex

	^ 0

	! !
!MarketModel methodsFor: 'ticket' stamp: 'JPF 7/7/2021 18:41:53' prior: 50958498!
ticketListIndex: newIndex

	! !
!MarketModel methodsFor: 'actions' stamp: 'JPF 7/7/2021 18:42:45'!
addToCart

	| aProduct  |
	
	aProduct := self selectedProductFromCatalog.
	
	restInterface sendAddToCartRequestFor: quantityToAdd of: aProduct in: cartId.
	
	self sendListCartCartRequest.
	

! !
!MarketWindow methodsFor: 'as yet unclassified' stamp: 'JPF 7/7/2021 18:42:45' prior: 50955858!
buildQuantitySelectionRow

	| addProductButtonMorph quantitySelectionRowLayout |
	
	quantityToAddTextBoxMorph := TextModelMorph 
		textProvider: self model 
		textGetter: #quantityToAdd 
		textSetter: #quantityToAdd:. 
	quantityToAddTextBoxMorph textMorph
		setProperty: #keyStroke:
		toValue: [ :key | quantityToAddTextBoxMorph textMorph acceptContents ].
	quantityToAddTextBoxMorph 
		borderWidth: 1;
		borderColor: Color skyBlue.
	
	addProductButtonMorph := PluggableButtonMorph 
		model: self model 
		stateGetter: nil 
		action: #addToCart  
		label: 'Add to cart'.	
		
	quantitySelectionRowLayout := LayoutMorph newRow.
	quantitySelectionRowLayout
		addMorph: (LabelMorph contents: 'Quantity');
		addMorph: quantityToAddTextBoxMorph;
		addMorph: addProductButtonMorph.
		
	^ quantitySelectionRowLayout.
		
	
	
	
! !

!methodRemoval: MarketModel #sendAddToCartRequest stamp: 'JPF 7/7/2021 18:42:45'!
sendAddToCartRequest

	| aProduct  |
	
	aProduct := self selectedProductFromCatalog.
	
	restInterface sendAddToCartRequestFor: quantityToAdd of: aProduct in: cartId.
	
	self sendListCartCartRequest.
	

!
!MarketModel methodsFor: 'actions' stamp: 'JPF 7/7/2021 18:43:01'!
checkOut! !
!MarketWindow methodsFor: 'as yet unclassified' stamp: 'JPF 7/7/2021 18:43:01' prior: 50956440!
buildCartColumn

	| removeFromCartButtonMorph checkoutButtonMorph listPurchasesButtonMorph 
		cartColumnLayout |
	
	cartListMorph := PluggableListMorph 
		model: self model 
		listGetter: #cartList
		indexGetter: #cartListIndex 
		indexSetter: #cartListIndex:.
	cartListMorph 
		borderColor: Color skyBlue; 
		borderWidth: 1.
	cartListMorph layoutSpec 
		proportionalWidth: 100;
		proportionalHeight: 100.
		
	removeFromCartButtonMorph := PluggableButtonMorph 
		model: self model 
		stateGetter: nil 
		action: #sendRemoveFromCartRequest  
		label: 'Remove from cart'.	
		
	checkoutButtonMorph := PluggableButtonMorph 
		model: self model 
		stateGetter: nil 
		action: #checkOut  
		label: 'Check out'.	
		
	listPurchasesButtonMorph := PluggableButtonMorph 
		model: self model 
		stateGetter: nil 
		action: #sendPurchasesRequest  
		label: 'Purchase history'.	
		
	cartColumnLayout := LayoutMorph newColumn.
	cartColumnLayout 
		addMorph: (LabelMorph contents: 'Cart');
		addMorph: cartListMorph;
		addMorph: removeFromCartButtonMorph;
		addMorph: checkoutButtonMorph;
		addMorph: listPurchasesButtonMorph.
		
	^ cartColumnLayout! !

!methodRemoval: MarketModel #sendCheckOutRequest stamp: 'JPF 7/7/2021 18:43:01'!
sendCheckOutRequest!
!MarketModel methodsFor: 'actions' stamp: 'JPF 7/7/2021 18:43:37'!
listCartCart

	|  cartDictionary |
	
	cartDictionary := restInterface sendListCartRequestFor: cartId.
	
	cartList removeAll.	
	cartDictionary keysAndValuesDo: [ :key :value | cartList add: {key. value}].
	
	self triggerEvent: #cartHasChanged with: self.
	
	

! !
!MarketModel methodsFor: 'as yet unclassified' stamp: 'JPF 7/7/2021 18:43:37' prior: 50958506!
addToCart

	| aProduct  |
	
	aProduct := self selectedProductFromCatalog.
	
	restInterface sendAddToCartRequestFor: quantityToAdd of: aProduct in: cartId.
	
	self listCartCart.
	

! !
!MarketModel methodsFor: 'as yet unclassified' stamp: 'JPF 7/7/2021 18:43:37' prior: 50957752!
sendRemoveFromCartRequest

	restInterface sendRemoveFromCartRequestFor: self selectedProductFromCart in: cartId.
	
	self listCartCart.! !

!methodRemoval: MarketModel #sendListCartCartRequest stamp: 'JPF 7/7/2021 18:43:37'!
sendListCartCartRequest

	|  cartDictionary |
	
	cartDictionary := restInterface sendListCartRequestFor: cartId.
	
	cartList removeAll.	
	cartDictionary keysAndValuesDo: [ :key :value | cartList add: {key. value}].
	
	self triggerEvent: #cartHasChanged with: self.
	
	

!
!MarketModel methodsFor: 'actions' stamp: 'JPF 7/7/2021 18:43:53'!
login

	| catalogDictionary |
	
	cartId := restInterface 
		sendCreateCartRequestFor: clientId 
		authenticatedWith: password.
		
	catalogDictionary := restInterface sendListCatalogRequest.
	
	catalogList removeAll.	
	catalogDictionary keysAndValuesDo: [ :key :value | catalogList add: {key. value}].
		
	self triggerEvent: #successfulLogin with: self.! !
!LoginWindow methodsFor: 'as yet unclassified' stamp: 'JPF 7/7/2021 18:43:53' prior: 50953749!
buildSubmitButton

	| submitButtonMorph |
	
	submitButtonMorph := PluggableButtonMorph
		model: self model
		stateGetter: nil 
		action: #login 
		label: 'Login'.
	
	^ submitButtonMorph! !

!methodRemoval: MarketModel #sendLoginRequest stamp: 'JPF 7/7/2021 18:43:53'!
sendLoginRequest

	| catalogDictionary |
	
	cartId := restInterface 
		sendCreateCartRequestFor: clientId 
		authenticatedWith: password.
		
	catalogDictionary := restInterface sendListCatalogRequest.
	
	catalogList removeAll.	
	catalogDictionary keysAndValuesDo: [ :key :value | catalogList add: {key. value}].
		
	self triggerEvent: #successfulLogin with: self.!
!MarketModel methodsFor: 'actions' stamp: 'JPF 7/7/2021 18:44:19'!
listPurchases

	| purchaseHistoryDictionary items total |
	
	purchaseHistoryList removeAll.
	
	purchaseHistoryDictionary := restInterface sendListPurchasesRequestFor: clientId authenticatedWith: password.
	
	items := purchaseHistoryDictionary at: 'items'.
	total := purchaseHistoryDictionary at: 'total'.
	
	items do: [ :itemAndQuantity | purchaseHistoryList add: (itemAndQuantity at: 'item') , '    ' , (itemAndQuantity at: 'quantity') asString ].
	purchaseHistoryList add: ('Total: ' , total asString ).
	
	PurchaseHistoryWindow openWith: self.
	
	! !
!MarketWindow methodsFor: 'as yet unclassified' stamp: 'JPF 7/7/2021 18:44:19' prior: 50958557!
buildCartColumn

	| removeFromCartButtonMorph checkoutButtonMorph listPurchasesButtonMorph 
		cartColumnLayout |
	
	cartListMorph := PluggableListMorph 
		model: self model 
		listGetter: #cartList
		indexGetter: #cartListIndex 
		indexSetter: #cartListIndex:.
	cartListMorph 
		borderColor: Color skyBlue; 
		borderWidth: 1.
	cartListMorph layoutSpec 
		proportionalWidth: 100;
		proportionalHeight: 100.
		
	removeFromCartButtonMorph := PluggableButtonMorph 
		model: self model 
		stateGetter: nil 
		action: #sendRemoveFromCartRequest  
		label: 'Remove from cart'.	
		
	checkoutButtonMorph := PluggableButtonMorph 
		model: self model 
		stateGetter: nil 
		action: #checkOut  
		label: 'Check out'.	
		
	listPurchasesButtonMorph := PluggableButtonMorph 
		model: self model 
		stateGetter: nil 
		action: #listPurchases  
		label: 'Purchase history'.	
		
	cartColumnLayout := LayoutMorph newColumn.
	cartColumnLayout 
		addMorph: (LabelMorph contents: 'Cart');
		addMorph: cartListMorph;
		addMorph: removeFromCartButtonMorph;
		addMorph: checkoutButtonMorph;
		addMorph: listPurchasesButtonMorph.
		
	^ cartColumnLayout! !

!methodRemoval: MarketModel #sendPurchasesRequest stamp: 'JPF 7/7/2021 18:44:19'!
sendPurchasesRequest

	| purchaseHistoryDictionary items total |
	
	purchaseHistoryList removeAll.
	
	purchaseHistoryDictionary := restInterface sendListPurchasesRequestFor: clientId authenticatedWith: password.
	
	items := purchaseHistoryDictionary at: 'items'.
	total := purchaseHistoryDictionary at: 'total'.
	
	items do: [ :itemAndQuantity | purchaseHistoryList add: (itemAndQuantity at: 'item') , '    ' , (itemAndQuantity at: 'quantity') asString ].
	purchaseHistoryList add: ('Total: ' , total asString ).
	
	PurchaseHistoryWindow openWith: self.
	
	!
!MarketModel methodsFor: 'actions' stamp: 'JPF 7/7/2021 18:44:35'!
removeFromCart

	restInterface sendRemoveFromCartRequestFor: self selectedProductFromCart in: cartId.
	
	self listCartCart.! !
!MarketWindow methodsFor: 'as yet unclassified' stamp: 'JPF 7/7/2021 18:44:35' prior: 50958695!
buildCartColumn

	| removeFromCartButtonMorph checkoutButtonMorph listPurchasesButtonMorph 
		cartColumnLayout |
	
	cartListMorph := PluggableListMorph 
		model: self model 
		listGetter: #cartList
		indexGetter: #cartListIndex 
		indexSetter: #cartListIndex:.
	cartListMorph 
		borderColor: Color skyBlue; 
		borderWidth: 1.
	cartListMorph layoutSpec 
		proportionalWidth: 100;
		proportionalHeight: 100.
		
	removeFromCartButtonMorph := PluggableButtonMorph 
		model: self model 
		stateGetter: nil 
		action: #removeFromCart  
		label: 'Remove from cart'.	
		
	checkoutButtonMorph := PluggableButtonMorph 
		model: self model 
		stateGetter: nil 
		action: #checkOut  
		label: 'Check out'.	
		
	listPurchasesButtonMorph := PluggableButtonMorph 
		model: self model 
		stateGetter: nil 
		action: #listPurchases  
		label: 'Purchase history'.	
		
	cartColumnLayout := LayoutMorph newColumn.
	cartColumnLayout 
		addMorph: (LabelMorph contents: 'Cart');
		addMorph: cartListMorph;
		addMorph: removeFromCartButtonMorph;
		addMorph: checkoutButtonMorph;
		addMorph: listPurchasesButtonMorph.
		
	^ cartColumnLayout! !

!methodRemoval: MarketModel #sendRemoveFromCartRequest stamp: 'JPF 7/7/2021 18:44:35'!
sendRemoveFromCartRequest

	restInterface sendRemoveFromCartRequestFor: self selectedProductFromCart in: cartId.
	
	self listCartCart.!
!MarketModel methodsFor: 'actions' stamp: 'JPF 7/7/2021 18:47:01' prior: 50958553!
checkOut

	| ticket |
	ticket := restInterface sendCheckOutRequestFor: cartId.
	self halt.! !
!MarketModel methodsFor: 'actions' stamp: 'JPF 7/7/2021 18:47:16' prior: 50958805!
checkOut

	| ticket |
	
	ticket := restInterface sendCheckOutRequestFor: cartId.
	self halt.! !
!MarketRestInterface methodsFor: 'requests' stamp: 'JPF 7/7/2021 18:48:01'!
sendCheckOutRequestFor: aCartId

	| fieldDict response urlEncodedCartId |

	urlEncodedCartId := aCartId.
	fieldDict := Dictionary with: ('cartId'->urlEncodedCartId ).

	response := WebClient htmlSubmit: (self url,'/checkOut') fields: fieldDict.
	
	response isSuccess 
		ifTrue:[ ^WebUtils jsonDecode: ((response content) readStream). ] 
		ifFalse:[ ^self error: response content ].! !
!MarketRestInterface methodsFor: 'requests' stamp: 'JPF 7/7/2021 18:48:29' prior: 50958817!
sendCheckOutRequestFor: aCartId

	| fieldDict response |

	fieldDict := Dictionary with: ('cartId'->aCartId ).

	response := WebClient htmlSubmit: (self url,'/checkOut') fields: fieldDict.
	
	response isSuccess 
		ifTrue:[ ^WebUtils jsonDecode: ((response content) readStream). ] 
		ifFalse:[ ^self error: response content ].! !

loginWindow := LoginWindow open.!
!MarketRestInterface methodsFor: 'requests' stamp: 'JPF 7/7/2021 18:51:59' prior: 50958832!
sendCheckOutRequestFor: aCartId

	| fieldDict response |

	fieldDict := Dictionary with: ('cartId'->aCartId ).

	response := WebClient htmlSubmit: (self url,'/checkOutCart') fields: fieldDict.
	
	response isSuccess 
		ifTrue:[ ^WebUtils jsonDecode: ((response content) readStream). ] 
		ifFalse:[ ^self error: response content ].! !
!MarketModel methodsFor: 'actions' stamp: 'JPF 7/7/2021 18:58:20' prior: 50958811!
checkOut

	| ticket ticketTotal |
	
	ticket := restInterface sendCheckOutRequestFor: cartId.
	self halt.
	
	ticketTotal := 0.
	
	ticket do: [ :itemAndTotal | | total | 
		total := itemAndTotal at: 'total'.
		ticketList add: (itemAndTotal at: 'item') , '    $' , total asString.
		ticketTotal := ticketTotal + total.
		].
	ticketList add: 'Total:    $' , ticketTotal asString.! !
!MarketModel methodsFor: 'actions' stamp: 'JPF 7/7/2021 18:59:04' prior: 50958860!
checkOut

	| ticket ticketTotal |
	
	ticket := restInterface sendCheckOutRequestFor: cartId.
	self halt.
	
	ticketTotal := 0.
	
	ticket do: [ :itemAndTotal | | total | 
		total := itemAndTotal at: 'total'.
		ticketList add: (itemAndTotal at: 'item') , '    $' , total asString.
		ticketTotal := ticketTotal + total.
		].
	ticketList add: 'Total:    $' , ticketTotal asString.
	
	
	! !
!MarketModel methodsFor: 'actions' stamp: 'JPF 7/7/2021 18:59:44' prior: 50958875!
checkOut

	| ticket ticketTotal |
	
	ticket := restInterface sendCheckOutRequestFor: cartId.
	self halt.
	
	ticketTotal := 0.
	
	ticket do: [ :itemAndTotal | | total | 
		total := itemAndTotal at: 'total'.
		ticketList add: (itemAndTotal at: 'item') , '    $' , total asString.
		ticketTotal := ticketTotal + total.
		].
	ticketList add: 'Total:    $' , ticketTotal asString.
	
	self triggerEvent: #purchaseDone with: self.
	
	
	! !
!MarketModel methodsFor: 'actions' stamp: 'JPF 7/7/2021 19:00:49' prior: 50958890!
checkOut

	| ticket ticketTotal |
	
	ticket := restInterface sendCheckOutRequestFor: cartId.
	self halt.
	
	ticketTotal := 0.
	
	ticket do: [ :itemAndTotal | | total | 
		total := itemAndTotal at: 'total'.
		ticketList add: (itemAndTotal at: 'item') , '    $' , total asString.
		ticketTotal := ticketTotal + total.
		].
	ticketList add: 'Total:    $' , ticketTotal asString.
	
	cartList removeAll.
	self cartListIndex: 0.
	
	self triggerEvent: #purchaseDone with: self.
	
	
	! !
!MarketModel methodsFor: 'actions' stamp: 'JPF 7/7/2021 19:01:00'!
cleanCart

	cartList removeAll.
	self cartListIndex: 0! !
!MarketModel methodsFor: 'actions' stamp: 'JPF 7/7/2021 19:01:00' prior: 50958907!
checkOut

	| ticket ticketTotal |
	
	ticket := restInterface sendCheckOutRequestFor: cartId.
	self halt.
	
	ticketTotal := 0.
	
	ticket do: [ :itemAndTotal | | total | 
		total := itemAndTotal at: 'total'.
		ticketList add: (itemAndTotal at: 'item') , '    $' , total asString.
		ticketTotal := ticketTotal + total.
		].
	ticketList add: 'Total:    $' , ticketTotal asString.
	
	self cleanCart.
	
	self triggerEvent: #purchaseDone with: self.
	
	
	! !
!MarketWindow methodsFor: 'initialization' stamp: 'JPF 7/7/2021 19:02:04' prior: 50957871!
initializeTitled: aTitle withModel: aModel

	self titleMorph showButtonsNamed: #( close collapse ).
	self setLabel: aTitle.
	self model: aModel.
	self morphExtent: (self defaultExtent).
	self buildMorphicWindow.
	
	self openInWorld.
	
	self model when: #cartHasChanged send: #refreshCart to: self.
	self model when: #purchaseDone send: #openTicketWindow to: self.! !
!MarketWindow methodsFor: 'as yet unclassified' stamp: 'JPF 7/7/2021 19:02:42'!
openTicketWindow

	TicketWindow open: model.! !
!MarketWindow methodsFor: 'as yet unclassified' stamp: 'JPF 7/7/2021 19:03:08' prior: 50958961!
openTicketWindow

	TicketWindow open: model.
	self delete.! !

loginWindow := LoginWindow open.!
!MarketModel methodsFor: 'actions' stamp: 'JPF 7/7/2021 19:04:18' prior: 50958930!
checkOut

	| ticket ticketTotal |
	
	ticket := restInterface sendCheckOutRequestFor: cartId.
	
	ticketTotal := 0.
	
	ticket do: [ :itemAndTotal | | total | 
		total := itemAndTotal at: 'total'.
		ticketList add: (itemAndTotal at: 'item') , '    $' , total asString.
		ticketTotal := ticketTotal + total.
		].
	ticketList add: 'Total:    $' , ticketTotal asString.
	
	self cleanCart.
	
	self triggerEvent: #purchaseDone with: self.
	
	
	! !
!MarketModel methodsFor: 'initialization' stamp: 'JPF 7/7/2021 19:04:48' prior: 50957983 overrides: 16896425!
initialize

	clientId := ''.
	password := ''.
	restInterface := MarketRestInterface new.
	quantityToAdd := '1'.
	catalogList := OrderedCollection new.
	catalogListIndex := 0.
	cartList := OrderedCollection new.
	cartListIndex := 0.
	purchaseHistoryList := OrderedCollection new.
	ticketList := OrderedCollection new.

	! !

loginWindow := LoginWindow open.!
!TicketWindow methodsFor: 'GUI building' stamp: 'JPF 7/7/2021 19:07:18' prior: 50958442 overrides: 50941419!
buildMorphicWindow

	| ticketListMorph buttonsLayoutMorph logOutButtonMorph newShoppingCartButtonMorph |
	
	ticketListMorph := PluggableListMorph 
		model: self model 
		listGetter: #ticketList
		indexGetter: #ticketListIndex 
		indexSetter: #ticketListIndex:.
	ticketListMorph 
		borderColor: Color skyBlue; 
		borderWidth: 1.
	ticketListMorph layoutSpec 
		proportionalWidth: 100;
		proportionalHeight: 100.
		
	newShoppingCartButtonMorph := PluggableButtonMorph 
		model: self model 
		stateGetter: nil 
		action: #newCart  
		label: 'New shopping cart'.	
	
	logOutButtonMorph := PluggableButtonMorph 
		model: self model 
		stateGetter: nil 
		action: #logOut  
		label: 'Log out'.	
	
	buttonsLayoutMorph := LayoutMorph newRow.
	buttonsLayoutMorph
		separation: 10;
		axisEdgeWeight: 0.5;
		addMorph: newShoppingCartButtonMorph;
		addMorph: logOutButtonMorph.
	
	self layoutMorph beColumn;
	separation: 15;
	axisEdgeWeight: 0;
	addMorph: (LabelMorph contents: 'Purchase detail');
	addMorph: buttonsLayoutMorph;
	addMorph: ticketListMorph.! !
!TicketWindow methodsFor: 'initialization' stamp: 'JPF 7/7/2021 19:08:36' prior: 50958269!
initializeTitled: aTitle withModel: aModel

	self titleMorph showButtonsNamed: #( close collapse ).
	self setLabel: aTitle.
	self model: aModel.
	self morphExtent: (self defaultExtent).
	self buildMorphicWindow.
	
	self openInWorld.
	
	"self model when: #cartHasChanged send: #refreshCart to: self."! !
!TicketWindow methodsFor: 'GUI building' stamp: 'JPF 7/7/2021 19:09:47' prior: 50959005 overrides: 50941419!
buildMorphicWindow

	| ticketListMorph buttonsLayoutMorph logOutButtonMorph newShoppingCartButtonMorph |
	
	ticketListMorph := PluggableListMorph 
		model: self model 
		listGetter: #ticketList
		indexGetter: #ticketListIndex 
		indexSetter: #ticketListIndex:.
	ticketListMorph 
		borderColor: Color skyBlue; 
		borderWidth: 1.
	ticketListMorph layoutSpec 
		proportionalWidth: 100;
		proportionalHeight: 100.
		
	newShoppingCartButtonMorph := PluggableButtonMorph 
		model: self model 
		stateGetter: nil 
		action: #newCart  
		label: 'New shopping cart'.	
	
	logOutButtonMorph := PluggableButtonMorph 
		model: self model 
		stateGetter: nil 
		action: #logOut  
		label: 'Log out'.	
	
	buttonsLayoutMorph := LayoutMorph newRow.
	buttonsLayoutMorph
		separation: 10;
		axisEdgeWeight: 0.5;
		addMorph: newShoppingCartButtonMorph;
		addMorph: logOutButtonMorph.
	
	self layoutMorph beColumn;
	separation: 15;
	axisEdgeWeight: 0;
	addMorph: (LabelMorph contents: 'Purchase detail');
	addMorph: ticketListMorph;
	addMorph: buttonsLayoutMorph.! !

loginWindow := LoginWindow open.!
!MarketWindow methodsFor: 'as yet unclassified' stamp: 'JPF 7/7/2021 19:13:23' prior: 50958966!
openTicketWindow

	TicketWindow open: self model.
	self delete.! !

loginWindow := LoginWindow open.
!
!MarketWindow methodsFor: 'as yet unclassified' stamp: 'JPF 7/7/2021 19:14:41' prior: 50959091!
openTicketWindow

	TicketWindow openWith: self model.
	self delete.! !

loginWindow := LoginWindow open.!
!MarketModel methodsFor: 'actions' stamp: 'JPF 7/7/2021 19:17:05'!
newShoppingCart

	
	
	cartId := restInterface 
		sendCreateCartRequestFor: clientId 
		authenticatedWith: password.
		
	self triggerEvent: #newShoppingCart with: self.! !
!MarketModel methodsFor: 'actions' stamp: 'JPF 7/7/2021 19:17:14' prior: 50959104!
newShoppingCart

	cartId := restInterface 
		sendCreateCartRequestFor: clientId 
		authenticatedWith: password.
		
	self triggerEvent: #newShoppingCart with: self.! !
!TicketWindow methodsFor: 'initialization' stamp: 'JPF 7/7/2021 19:18:03' prior: 50959041!
initializeTitled: aTitle withModel: aModel

	self titleMorph showButtonsNamed: #( close collapse ).
	self setLabel: aTitle.
	self model: aModel.
	self morphExtent: (self defaultExtent).
	self buildMorphicWindow.
	
	self openInWorld.
	
	self model when: #newShoppingCart send: #openMarketWindow to: self.! !
!TicketWindow methodsFor: 'nil' stamp: 'JPF 7/7/2021 19:18:32'!
openMarketWindow

	MarketWindow openWith: self model.
	self delete.! !
!TicketWindow methodsFor: 'as yet unclassified' stamp: 'JPF 7/7/2021 19:19:35'!
openLoginWindow

	LoginWindow open.
	self delete.! !
!TicketWindow methodsFor: 'initialization' stamp: 'JPF 7/7/2021 19:20:59' prior: 50959121!
initializeTitled: aTitle withModel: aModel

	self titleMorph showButtonsNamed: #( close collapse ).
	self setLabel: aTitle.
	self model: aModel.
	self morphExtent: (self defaultExtent).
	self buildMorphicWindow.
	
	self openInWorld.
	
	self model when: #newShoppingCartCreated send: #openMarketWindow to: self.
	self model when: #logOutDone send: #openLoginWindow to: self.! !
!MarketModel methodsFor: 'actions' stamp: 'JPF 7/7/2021 19:21:23' prior: 50959112!
newShoppingCart

	cartId := restInterface 
		sendCreateCartRequestFor: clientId 
		authenticatedWith: password.
		
	self triggerEvent: #newShoppingCartCreated with: self.! !
!MarketModel methodsFor: 'actions' stamp: 'JPF 7/7/2021 19:23:28'!
logout

	clientId := nil.
	password := nil.
	cartId := nil.
		
	self triggerEvent: #newShoppingCartCreated with: self.! !
!MarketModel methodsFor: 'actions' stamp: 'JPF 7/7/2021 19:23:55' prior: 50959166!
logout

	self initialize.
		
	self triggerEvent: #newShoppingCartCreated with: self.! !
!MarketModel methodsFor: 'actions' stamp: 'JPF 7/7/2021 19:24:05' prior: 50959173!
logout

	self initialize.
		
	self triggerEvent: #logOutDone with: self.! !

loginWindow := LoginWindow open.
!
!MarketModel methodsFor: 'actions' stamp: 'JPF 7/7/2021 19:25:08' prior: 50958674!
listPurchases

	| purchaseHistoryDictionary items total |
	
	purchaseHistoryList removeAll.
	
	purchaseHistoryDictionary := restInterface sendListPurchasesRequestFor: clientId authenticatedWith: password.
	
	items := purchaseHistoryDictionary at: 'items'.
	total := purchaseHistoryDictionary at: 'total'.
	
	items do: [ :itemAndQuantity | purchaseHistoryList add: (itemAndQuantity at: 'item') , '    ' , (itemAndQuantity at: 'quantity') asString ].
	purchaseHistoryList add: ('Total:   $' , total asString ).
	
	PurchaseHistoryWindow openWith: self.
	
	! !
!TicketWindow methodsFor: 'GUI building' stamp: 'JPF 7/7/2021 19:27:39' prior: 50959054 overrides: 50941419!
buildMorphicWindow

	| ticketListMorph buttonsLayoutMorph logOutButtonMorph newShoppingCartButtonMorph |
	
	ticketListMorph := PluggableListMorph 
		model: self model 
		listGetter: #ticketList
		indexGetter: #ticketListIndex 
		indexSetter: #ticketListIndex:.
	ticketListMorph 
		borderColor: Color skyBlue; 
		borderWidth: 1.
	ticketListMorph layoutSpec 
		proportionalWidth: 100;
		proportionalHeight: 100.
		
	newShoppingCartButtonMorph := PluggableButtonMorph 
		model: self model 
		stateGetter: nil 
		action: #newShoppingCart  
		label: 'New shopping cart'.	
	
	logOutButtonMorph := PluggableButtonMorph 
		model: self model 
		stateGetter: nil 
		action: #logOut  
		label: 'Log out'.	
	
	buttonsLayoutMorph := LayoutMorph newRow.
	buttonsLayoutMorph
		separation: 10;
		axisEdgeWeight: 0.5;
		addMorph: newShoppingCartButtonMorph;
		addMorph: logOutButtonMorph.
	
	self layoutMorph beColumn;
	separation: 15;
	axisEdgeWeight: 0;
	addMorph: (LabelMorph contents: 'Purchase detail');
	addMorph: ticketListMorph;
	addMorph: buttonsLayoutMorph.! !

loginWindow := LoginWindow open.!
!MarketModel methodsFor: 'actions' stamp: 'JPF 7/7/2021 19:30:09' prior: 50959186!
listPurchases

	| purchaseHistoryDictionary items total |
	
	self halt.
	
	purchaseHistoryList removeAll.
	
	
	purchaseHistoryDictionary := restInterface sendListPurchasesRequestFor: clientId authenticatedWith: password.
	
	items := purchaseHistoryDictionary at: 'items'.
	total := purchaseHistoryDictionary at: 'total'.
	
	items do: [ :itemAndQuantity | purchaseHistoryList add: (itemAndQuantity at: 'item') , '    ' , (itemAndQuantity at: 'quantity') asString ].
	purchaseHistoryList add: ('Total:   $' , total asString ).
	
	PurchaseHistoryWindow openWith: self.
	
	! !

loginWindow := LoginWindow open.
!
!MarketModel methodsFor: 'actions' stamp: 'JPF 7/7/2021 19:31:01' prior: 50958972!
checkOut

	| ticket ticketTotal |
	
	ticket := restInterface sendCheckOutRequestFor: cartId.
	
	ticketList removeAll.
	
	ticketTotal := 0.
	
	ticket do: [ :itemAndTotal | | total | 
		total := itemAndTotal at: 'total'.
		ticketList add: (itemAndTotal at: 'item') , '    $' , total asString.
		ticketTotal := ticketTotal + total.
		].
	ticketList add: 'Total:    $' , ticketTotal asString.
	
	self cleanCart.
	
	self triggerEvent: #purchaseDone with: self.
	
	
	! !

loginWindow := LoginWindow open.!
!MarketModel methodsFor: 'actions' stamp: 'JPF 7/7/2021 19:31:28' prior: 50959244!
listPurchases

	| purchaseHistoryDictionary items total |
	
	purchaseHistoryList removeAll.
	
	purchaseHistoryDictionary := restInterface sendListPurchasesRequestFor: clientId authenticatedWith: password.
	
	items := purchaseHistoryDictionary at: 'items'.
	total := purchaseHistoryDictionary at: 'total'.
	
	items do: [ :itemAndQuantity | purchaseHistoryList add: (itemAndQuantity at: 'item') , '    ' , (itemAndQuantity at: 'quantity') asString ].
	purchaseHistoryList add: ('Total:   $' , total asString ).
	
	PurchaseHistoryWindow openWith: self.
	
	! !
!TicketWindow methodsFor: 'initialization' stamp: 'JPF 7/7/2021 19:33:17' prior: 50959143!
initializeTitled: aTitle withModel: aModel

	self titleMorph showButtonsNamed: #( close collapse ).
	self setLabel: aTitle.
	self model: aModel.
	self morphExtent: (self defaultExtent).
	self buildMorphicWindow.
	
	self openInWorld.
	
	self model when: #newShoppingCartCreated send: #openMarketWindow to: self.
	self model when: #logoutDone send: #openLoginWindow to: self.! !
!MarketModel methodsFor: 'actions' stamp: 'JPF 7/7/2021 19:33:24' prior: 50959179!
logout

	self initialize.
		
	self triggerEvent: #logoutDone with: self.! !
!TicketWindow methodsFor: 'GUI building' stamp: 'JPF 7/7/2021 19:33:41' prior: 50959207 overrides: 50941419!
buildMorphicWindow

	| ticketListMorph buttonsLayoutMorph logOutButtonMorph newShoppingCartButtonMorph |
	
	ticketListMorph := PluggableListMorph 
		model: self model 
		listGetter: #ticketList
		indexGetter: #ticketListIndex 
		indexSetter: #ticketListIndex:.
	ticketListMorph 
		borderColor: Color skyBlue; 
		borderWidth: 1.
	ticketListMorph layoutSpec 
		proportionalWidth: 100;
		proportionalHeight: 100.
		
	newShoppingCartButtonMorph := PluggableButtonMorph 
		model: self model 
		stateGetter: nil 
		action: #newShoppingCart  
		label: 'New shopping cart'.	
	
	logOutButtonMorph := PluggableButtonMorph 
		model: self model 
		stateGetter: nil 
		action: #logout  
		label: 'Log out'.	
	
	buttonsLayoutMorph := LayoutMorph newRow.
	buttonsLayoutMorph
		separation: 10;
		axisEdgeWeight: 0.5;
		addMorph: newShoppingCartButtonMorph;
		addMorph: logOutButtonMorph.
	
	self layoutMorph beColumn;
	separation: 15;
	axisEdgeWeight: 0;
	addMorph: (LabelMorph contents: 'Purchase detail');
	addMorph: ticketListMorph;
	addMorph: buttonsLayoutMorph.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'JPF 7/7/2021 19:36:44'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'JPF 7/7/2021 19:36:44'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'JPF 7/7/2021 19:36:44'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'JPF 7/7/2021 19:36:44'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'JPF 7/7/2021 19:36:44'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'JPF 7/7/2021 19:36:44'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'JPF 7/7/2021 19:36:44'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'JPF 7/7/2021 19:36:44'!
PASSED!

!testRun: #CartTest #test09CanNotRemoveAnItemThatIsNotInTheCart stamp: 'JPF 7/7/2021 19:36:44'!
PASSED!

!testRun: #CartTest #test10ShouldRemoveAnItemFromTheCart stamp: 'JPF 7/7/2021 19:36:44'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'JPF 7/7/2021 19:36:44'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'JPF 7/7/2021 19:36:44'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'JPF 7/7/2021 19:36:44'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'JPF 7/7/2021 19:36:44'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'JPF 7/7/2021 19:36:44'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'JPF 7/7/2021 19:36:44'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'JPF 7/7/2021 19:36:44'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01ShoulFailIfTryToRemoveAnItemFromAnInexistentCart stamp: 'JPF 7/7/2021 19:36:44'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01shouldReturnTheCatalog stamp: 'JPF 7/7/2021 19:36:44'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'JPF 7/7/2021 19:36:44'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02ShoulFailIfTryToRemoveAnItemThatItIsNotInTheCart stamp: 'JPF 7/7/2021 19:36:44'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'JPF 7/7/2021 19:36:44'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03ShoulRemoveAnItemFromTheCart stamp: 'JPF 7/7/2021 19:36:44'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'JPF 7/7/2021 19:36:44'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'JPF 7/7/2021 19:36:44'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'JPF 7/7/2021 19:36:44'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07ListCartOfAnEmptyCartReturnsAnEmptyBag stamp: 'JPF 7/7/2021 19:36:44'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'JPF 7/7/2021 19:36:44'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'JPF 7/7/2021 19:36:44'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CanCheckoutACart stamp: 'JPF 7/7/2021 19:36:44'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'JPF 7/7/2021 19:36:44'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'JPF 7/7/2021 19:36:44'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'JPF 7/7/2021 19:36:44'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'JPF 7/7/2021 19:36:44'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'JPF 7/7/2021 19:36:44'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'JPF 7/7/2021 19:36:44'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'JPF 7/7/2021 19:36:44'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'JPF 7/7/2021 19:36:44'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'JPF 7/7/2021 19:36:44'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'JPF 7/7/2021 19:37:10'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'JPF 7/7/2021 19:37:10'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'JPF 7/7/2021 19:37:10'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'JPF 7/7/2021 19:37:10'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'JPF 7/7/2021 19:37:10'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'JPF 7/7/2021 19:37:10'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'JPF 7/7/2021 19:37:25'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'JPF 7/7/2021 19:37:25'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'JPF 7/7/2021 19:37:25'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'JPF 7/7/2021 19:37:25'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'JPF 7/7/2021 19:37:25'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'JPF 7/7/2021 19:37:25'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'JPF 7/7/2021 19:37:41'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'JPF 7/7/2021 19:37:41'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'JPF 7/7/2021 19:37:41'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'JPF 7/7/2021 19:37:41'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'JPF 7/7/2021 19:37:41'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'JPF 7/7/2021 19:37:41'!
PASSED!

errorWindow := WindowTitleMorph title: 'Error'.!

errorWindow openInWorld !

errorWindow := WindowTitleMorph title: 'aeiou'.!

errorWindow openInWorld !

Panel subclass: #ErrorWindow
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Client'!

!classDefinition: #ErrorWindow category: #'TusLibros-Client' stamp: 'JPF 7/7/2021 19:44:51'!
Panel subclass: #ErrorWindow
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Client'!
!ErrorWindow class methodsFor: 'instance creation' stamp: 'JPF 7/7/2021 19:46:58'!
openWith: anErrorMessage
	
	^ self new initializeTitled: 'Purchase done' withError: anErrorMessage.! !
!ErrorWindow methodsFor: 'initialization' stamp: 'JPF 7/7/2021 19:49:36'!
initializeTitled: aTitle withModel: aModel

	self titleMorph showButtonsNamed: #( close collapse ).
	self setLabel: aTitle.
	self model: aModel.
	self morphExtent: (self defaultExtent).
	self buildMorphicWindow.
	
	self openInWorld.
	
	self model when: #cartHasChanged send: #refreshCart to: self.
	self model when: #purchaseDone send: #openTicketWindow to: self.! !
!ErrorWindow class methodsFor: 'instance creation' stamp: 'JPF 7/7/2021 19:50:21' prior: 50959576!
openWith: aModel

	^ self new initializeTitled: 'Error' withModel: aModel.! !
!ErrorWindow methodsFor: 'initialization' stamp: 'JPF 7/7/2021 19:51:24' prior: 50959582!
initializeTitled: aTitle withModel: aModel

	self titleMorph showButtonsNamed: #( close collapse ).
	self setLabel: aTitle.
	self model: aModel.
	self morphExtent: (self defaultExtent).
	self buildMorphicWindow.
	
	self openInWorld.
! !
!ErrorWindow methodsFor: 'initialization' stamp: 'JPF 7/7/2021 19:51:49' overrides: 50941505!
defaultExtent
	
	300@200
! !
!ErrorWindow methodsFor: 'initialization' stamp: 'JPF 7/7/2021 19:52:04' overrides: 50941419!
buildMorphicWindow
! !
!ErrorWindow methodsFor: 'GUI building' stamp: 'JPF 7/7/2021 19:53:15' prior: 50959618 overrides: 50941419!
buildMorphicWindow

	self layoutMorph beColumn;
	separation: 15;
	axisEdgeWeight: 0;
	addMorph: (LabelMorph contents: self model errorMessage).

! !
!MarketModel methodsFor: 'error management' stamp: 'JPF 7/7/2021 19:57:07'!
doSignalingError: aClosure

	"self do: [^ aClosure value ] on: Error do:"
	! !
!MarketModel methodsFor: 'error management' stamp: 'JPF 7/7/2021 19:59:01' prior: 50959631!
doSignalingError: aClosure

	[^ aClosure value ] on: Error do: [ :error |
		self errorMessage: error messageText.
		
		]
	! !
!MarketModel methodsFor: 'error management' stamp: 'JPF 7/7/2021 20:00:27' prior: 50959637!
doSignalingError: aClosure

	[^ aClosure value ] on: Error do: [ :error |
		self errorMessage: error messageText.
		self triggerEvent: #errorOccurred with: self.
		]
	! !

!classDefinition: #MarketModel category: #'TusLibros-Client' stamp: 'JPF 7/7/2021 20:01:00'!
Object subclass: #MarketModel
	instanceVariableNames: 'quantityToAdd catalogList catalogListIndex cartListIndex cartList cartId restInterface clientId password purchaseHistoryList ticketList errorMessage'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Client'!
!MarketModel methodsFor: 'error management' stamp: 'JPF 7/7/2021 20:00:58'!
errorMessage: anErrorMessage

	errorMessage := anErrorMessage
	! !
!MarketModel methodsFor: 'error management' stamp: 'JPF 7/7/2021 20:01:09'!
errorMessage

	^ errorMessage
	! !
!MarketModel methodsFor: 'initialization' stamp: 'JPF 7/7/2021 20:01:29' prior: 50958990 overrides: 16896425!
initialize

	errorMessage := ''.
	clientId := ''.
	password := ''.
	restInterface := MarketRestInterface new.
	quantityToAdd := '1'.
	catalogList := OrderedCollection new.
	catalogListIndex := 0.
	cartList := OrderedCollection new.
	cartListIndex := 0.
	purchaseHistoryList := OrderedCollection new.
	ticketList := OrderedCollection new.

	! !
!TicketWindow methodsFor: 'initialization' stamp: 'JPF 7/7/2021 20:02:10' prior: 50959306!
initializeTitled: aTitle withModel: aModel

	self titleMorph showButtonsNamed: #( close collapse ).
	self setLabel: aTitle.
	self model: aModel.
	self morphExtent: (self defaultExtent).
	self buildMorphicWindow.
	
	self openInWorld.
	
	self model when: #newShoppingCartCreated send: #openMarketWindow to: self.
	self model when: #logoutDone send: #openLoginWindow to: self.
	self model when: #errorOccurred send: #openErrorWindow to: self.! !
!TicketWindow methodsFor: 'as yet unclassified' stamp: 'JPF 7/7/2021 20:02:27'!
openErrorWindow

	ErrorWindow openWith: self model.! !
!LoginWindow methodsFor: 'windows management' stamp: 'JPF 7/7/2021 20:02:44'!
openErrorWindow

	ErrorWindow openWith: self model.! !
!MarketWindow methodsFor: 'as yet unclassified' stamp: 'JPF 7/7/2021 20:03:11'!
openErrorWindow

	ErrorWindow openWith: self model.! !
!LoginWindow methodsFor: 'initialization' stamp: 'JPF 7/7/2021 20:03:39' prior: 50955998!
initializeWith: aTitle

	self titleMorph showButtonsNamed: #( close collapse ).
	self setLabel: aTitle.
	self model: (MarketModel new).
	self morphExtent: (self defaultExtent).
	self buildMorphicWindow.
	self openInWorld.

			
	self model when: #successfulLogin send: #openMarketWindow to: self.
	self model when: #errorOccurred send: #openErrorWindow to: self.! !
!MarketWindow methodsFor: 'initialization' stamp: 'JPF 7/7/2021 20:03:53' prior: 50958947!
initializeTitled: aTitle withModel: aModel

	self titleMorph showButtonsNamed: #( close collapse ).
	self setLabel: aTitle.
	self model: aModel.
	self morphExtent: (self defaultExtent).
	self buildMorphicWindow.
	
	self openInWorld.
	
	self model when: #cartHasChanged send: #refreshCart to: self.
	self model when: #purchaseDone send: #openTicketWindow to: self.
	self model when: #errorOccurred send: #openErrorWindow to: self.! !
!MarketModel methodsFor: 'actions' stamp: 'JPF 7/7/2021 20:05:23' prior: 50958610!
addToCart

	self doSignalingError: [| aProduct  |
		aProduct := self selectedProductFromCatalog.
		
		restInterface sendAddToCartRequestFor: quantityToAdd of: aProduct in: cartId.
		
		self listCartCart.
		]


! !
!MarketModel methodsFor: 'actions' stamp: 'JPF 7/7/2021 20:05:55' prior: 50959266!
checkOut

	self doSignalingError: [| ticket ticketTotal |
	
		ticket := restInterface sendCheckOutRequestFor: cartId.
		
		ticketList removeAll.
		
		ticketTotal := 0.
		
		ticket do: [ :itemAndTotal | | total | 
			total := itemAndTotal at: 'total'.
			ticketList add: (itemAndTotal at: 'item') , '    $' , total asString.
			ticketTotal := ticketTotal + total.
			].
		ticketList add: 'Total:    $' , ticketTotal asString.
		
		self cleanCart.
		
		self triggerEvent: #purchaseDone with: self.
	]
	
	! !
!MarketModel methodsFor: 'actions' stamp: 'JPF 7/7/2021 20:05:57' prior: 50959762!
checkOut

	self doSignalingError: [ | ticket ticketTotal |
	
		ticket := restInterface sendCheckOutRequestFor: cartId.
		
		ticketList removeAll.
		
		ticketTotal := 0.
		
		ticket do: [ :itemAndTotal | | total | 
			total := itemAndTotal at: 'total'.
			ticketList add: (itemAndTotal at: 'item') , '    $' , total asString.
			ticketTotal := ticketTotal + total.
			].
		ticketList add: 'Total:    $' , ticketTotal asString.
		
		self cleanCart.
		
		self triggerEvent: #purchaseDone with: self.
	]
	
	! !
!MarketModel methodsFor: 'actions' stamp: 'JPF 7/7/2021 20:06:04' prior: 50959752!
addToCart

	self doSignalingError: [ | aProduct  |
		
		aProduct := self selectedProductFromCatalog.
		
		restInterface sendAddToCartRequestFor: quantityToAdd of: aProduct in: cartId.
		
		self listCartCart.
		]


! !
!MarketModel methodsFor: 'actions' stamp: 'JPF 7/7/2021 20:06:29' prior: 50958598!
listCartCart

	self doSignalingError: [ |  cartDictionary |
	
		cartDictionary := restInterface sendListCartRequestFor: cartId.
		
		cartList removeAll.	
		cartDictionary keysAndValuesDo: [ :key :value | cartList add: {key. value}].
		
		self triggerEvent: #cartHasChanged with: self.
	]
	
	

! !
!MarketModel methodsFor: 'actions' stamp: 'JPF 7/7/2021 20:06:46' prior: 50959285!
listPurchases

	self doSignalingError: [ | purchaseHistoryDictionary items total |
	
	purchaseHistoryList removeAll.
	
	purchaseHistoryDictionary := restInterface sendListPurchasesRequestFor: clientId authenticatedWith: password.
	
	items := purchaseHistoryDictionary at: 'items'.
	total := purchaseHistoryDictionary at: 'total'.
	
	items do: [ :itemAndQuantity | purchaseHistoryList add: (itemAndQuantity at: 'item') , '    ' , (itemAndQuantity at: 'quantity') asString ].
	purchaseHistoryList add: ('Total:   $' , total asString ).
	
	PurchaseHistoryWindow openWith: self.
	]
	
	! !
!MarketModel methodsFor: 'actions' stamp: 'JPF 7/7/2021 20:06:50' prior: 50959822!
listPurchases

	self doSignalingError: [ | purchaseHistoryDictionary items total |
	
		purchaseHistoryList removeAll.
		
		purchaseHistoryDictionary := restInterface sendListPurchasesRequestFor: clientId authenticatedWith: password.
		
		items := purchaseHistoryDictionary at: 'items'.
		total := purchaseHistoryDictionary at: 'total'.
		
		items do: [ :itemAndQuantity | purchaseHistoryList add: (itemAndQuantity at: 'item') , '    ' , (itemAndQuantity at: 'quantity') asString ].
		purchaseHistoryList add: ('Total:   $' , total asString ).
		
		PurchaseHistoryWindow openWith: self.
	]
	
	! !
!MarketModel methodsFor: 'actions' stamp: 'JPF 7/7/2021 20:07:14' prior: 50958637!
login

	self doSignalingError: [ | catalogDictionary |
	
		cartId := restInterface 
			sendCreateCartRequestFor: clientId 
			authenticatedWith: password.
			
		catalogDictionary := restInterface sendListCatalogRequest.
		
		catalogList removeAll.	
		catalogDictionary keysAndValuesDo: [ :key :value | catalogList add: {key. value}].
			
		self triggerEvent: #successfulLogin with: self.
	]! !
!MarketModel methodsFor: 'actions' stamp: 'JPF 7/7/2021 20:07:36' prior: 50959321!
logout

	self doSignalingError: [
		
		self initialize.
		
		self triggerEvent: #logoutDone with: self.
		]
! !
!MarketModel methodsFor: 'actions' stamp: 'JPF 7/7/2021 20:08:04' prior: 50959158!
newShoppingCart

	self doSignalingError: [
		cartId := restInterface 
		sendCreateCartRequestFor: clientId 
		authenticatedWith: password.
		
		self triggerEvent: #newShoppingCartCreated with: self.
		]

! !
!MarketModel methodsFor: 'actions' stamp: 'JPF 7/7/2021 20:08:28' prior: 50958753!
removeFromCart

	self doSignalingError: [
		restInterface sendRemoveFromCartRequestFor: self selectedProductFromCart in: cartId.
	
		self listCartCart.
		]

! !

loginWindow := LoginWindow open.!

self defaultExtent!
!ErrorWindow methodsFor: 'initialization' stamp: 'JPF 7/7/2021 20:10:59' prior: 50959603!
initializeTitled: aTitle withModel: aModel

	self titleMorph showButtonsNamed: #( close collapse ).
	self setLabel: aTitle.
	self model: aModel.
	self morphExtent: (self defaultExtent).
	self buildMorphicWindow.
	
	self openInWorld.
! !
!ErrorWindow methodsFor: 'initialization' stamp: 'JPF 7/7/2021 20:11:10' prior: 50959614 overrides: 50941505!
defaultExtent
	
	^ 300@200
! !
!ErrorWindow methodsFor: 'initialization' stamp: 'JPF 7/7/2021 20:18:38' prior: 50959907!
initializeTitled: aTitle withModel: aModel

	self titleMorph showButtonsNamed: #( close collapse ).
	self setLabel: aTitle.
	self model: aModel.
	"self morphExtent: (self defaultExtent)."
	self buildMorphicWindow.
	
	self openInWorld.
! !
!ErrorWindow methodsFor: 'initialization' stamp: 'JPF 7/7/2021 20:21:27' prior: 50959922!
initializeTitled: aTitle withModel: aModel

	self titleMorph showButtonsNamed: #( close collapse ).
	self setLabel: aTitle.
	self model: aModel.
	"self morphExtent: (self defaultExtent)."
	self buildMorphicWindow.
	
	self openInWorld.
! !
!ErrorWindow methodsFor: 'initialization' stamp: 'JPF 7/7/2021 20:23:38' prior: 50959933!
initializeTitled: aTitle withModel: aModel

	self titleMorph showButtonsNamed: #( close collapse ).
	self setLabel: aTitle.
	self model: aModel.
	
	self buildMorphicWindow.
	self minimumExtent.
	
	self openInWorld.
! !

!methodRemoval: ErrorWindow #defaultExtent stamp: 'JPF 7/7/2021 20:24:03'!
defaultExtent
	
	^ 300@200
!
!ErrorWindow methodsFor: 'GUI building' stamp: 'JPF 7/7/2021 20:25:51' prior: 50959623 overrides: 50941419!
buildMorphicWindow

	self layoutMorph beColumn;
	separation: 15;
	fixedWidth: 300;
	fixedHeight: 300;
	axisEdgeWeight: 0;
	addMorph: (LabelMorph contents: self model errorMessage).

! !
!ErrorWindow methodsFor: 'initialization' stamp: 'JPF 7/7/2021 20:26:30' prior: 50959944!
initializeTitled: aTitle withModel: aModel

	self titleMorph showButtonsNamed: #( close collapse ).
	self setLabel: aTitle.
	self model: aModel.
	self defaultExtent.
	self buildMorphicWindow.
	
	self openInWorld.
! !
!ErrorWindow methodsFor: 'initialization' stamp: 'JPF 7/7/2021 20:26:44' overrides: 50941505!
defaultExtent
	
	^300@300
! !

loginWindow := LoginWindow open.!
!ErrorWindow methodsFor: 'GUI building' stamp: 'JPF 7/7/2021 20:31:12' prior: 50959958 overrides: 50941419!
buildMorphicWindow

	self layoutMorph 
		beColumn;
		separation: 15;
		axisEdgeWeight: 0;
		addMorph: (LabelMorph contents: self model errorMessage).
	self layoutMorph 
		layoutSpec 
		fixedHeight: 300; 
		fixedWidth: 300.
! !
!TicketWindow methodsFor: 'initialization' stamp: 'JPF 7/7/2021 20:33:03' prior: 50959688!
initializeTitled: aTitle withModel: aModel

	self titleMorph showButtonsNamed: #( close collapse ).
	self setLabel: aTitle.
	self model: aModel.
	self morphExtent: (self defaultExtent).
	self buildMorphicWindow.
	
	self openInWorld.
	
	self model when: #newShoppingCartCreated send: #openMarketWindow to: self.
	self model when: #logoutDone send: #openLoginWindow to: self.! !
!MarketWindow methodsFor: 'initialization' stamp: 'JPF 7/7/2021 20:33:11' prior: 50959735!
initializeTitled: aTitle withModel: aModel

	self titleMorph showButtonsNamed: #( close collapse ).
	self setLabel: aTitle.
	self model: aModel.
	self morphExtent: (self defaultExtent).
	self buildMorphicWindow.
	
	self openInWorld.
	
	self model when: #cartHasChanged send: #refreshCart to: self.
	self model when: #purchaseDone send: #openTicketWindow to: self.! !

----SNAPSHOT----(7 July 2021 20:33:44) Interfaz.image priorSource: 20049726!

loginWindow := LoginWindow open.!
!ErrorWindow methodsFor: 'initialization' stamp: 'JPF 7/7/2021 20:35:08' prior: 50959977 overrides: 50941505!
defaultExtent
	
	^1000@100
! !
!ErrorWindow methodsFor: 'initialization' stamp: 'JPF 7/7/2021 20:35:37' prior: 50959967!
initializeTitled: aTitle withModel: aModel

	self titleMorph showButtonsNamed: #( close collapse ).
	self setLabel: aTitle.
	self model: aModel.
	self morphExtent: (self defaultExtent).
	self buildMorphicWindow.
	
	self openInWorld.
! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'JPF 7/7/2021 20:41:54'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'JPF 7/7/2021 20:41:54'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'JPF 7/7/2021 20:41:54'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'JPF 7/7/2021 20:41:54'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'JPF 7/7/2021 20:41:54'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'JPF 7/7/2021 20:41:54'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'JPF 7/7/2021 20:41:54'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'JPF 7/7/2021 20:41:54'!
PASSED!

!testRun: #CartTest #test09CanNotRemoveAnItemThatIsNotInTheCart stamp: 'JPF 7/7/2021 20:41:54'!
PASSED!

!testRun: #CartTest #test10ShouldRemoveAnItemFromTheCart stamp: 'JPF 7/7/2021 20:41:54'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'JPF 7/7/2021 20:41:54'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'JPF 7/7/2021 20:41:54'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'JPF 7/7/2021 20:41:54'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'JPF 7/7/2021 20:41:54'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'JPF 7/7/2021 20:41:54'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'JPF 7/7/2021 20:41:54'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'JPF 7/7/2021 20:41:54'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01ShoulFailIfTryToRemoveAnItemFromAnInexistentCart stamp: 'JPF 7/7/2021 20:41:54'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01shouldReturnTheCatalog stamp: 'JPF 7/7/2021 20:41:54'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'JPF 7/7/2021 20:41:54'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02ShoulFailIfTryToRemoveAnItemThatItIsNotInTheCart stamp: 'JPF 7/7/2021 20:41:54'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'JPF 7/7/2021 20:41:54'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03ShoulRemoveAnItemFromTheCart stamp: 'JPF 7/7/2021 20:41:54'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'JPF 7/7/2021 20:41:54'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'JPF 7/7/2021 20:41:54'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'JPF 7/7/2021 20:41:54'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07ListCartOfAnEmptyCartReturnsAnEmptyBag stamp: 'JPF 7/7/2021 20:41:54'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'JPF 7/7/2021 20:41:54'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'JPF 7/7/2021 20:41:54'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CanCheckoutACart stamp: 'JPF 7/7/2021 20:41:54'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'JPF 7/7/2021 20:41:54'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'JPF 7/7/2021 20:41:54'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'JPF 7/7/2021 20:41:54'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'JPF 7/7/2021 20:41:54'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'JPF 7/7/2021 20:41:54'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'JPF 7/7/2021 20:41:54'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'JPF 7/7/2021 20:41:55'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'JPF 7/7/2021 20:41:55'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'JPF 7/7/2021 20:41:55'!
PASSED!
!TusLibrosSystemFacade methodsFor: 'facade protocol' stamp: 'JPF 7/7/2021 20:44:43' prior: 50931567!
checkOutCartIdentifiedAs: aCartId withCreditCardNumbered: aCreditCartNumber ownedBy: anOwner expiringOn: anExpirationMonthOfYear

	self
		withCartSessionIdentifiedAs: aCartId
		do: [ :cartSession | ^ cartSession
			checkOutCartWithCreditCardNumbered: aCreditCartNumber
			ownedBy: anOwner
			expiringOn: anExpirationMonthOfYear ]
! !
!TusLibrosSystemFacade methodsFor: 'facade protocol' stamp: 'JPF 7/7/2021 20:45:00' prior: 50960179!
checkOutCartIdentifiedAs: aCartId withCreditCardNumbered: aCreditCartNumber ownedBy: anOwner expiringOn: anExpirationMonthOfYear

	| aCreditCartNumberTemp anExpirationMonthOfYearTemp anOwnerTemp |
	self
		withCartSessionIdentifiedAs: aCartId
		do: [ :cartSession | ^ cartSession
			checkOutCartWithCreditCardNumbered: aCreditCartNumberTemp
			ownedBy: anOwnerTemp
			expiringOn: anExpirationMonthOfYearTemp ]
! !
!TusLibrosSystemFacade methodsFor: 'facade protocol' stamp: 'JPF 7/7/2021 20:46:19'!
checkOutCartIdentifiedAs: aCartId withCreditCardNumbered: aCreditCartNumber ownedBy: anOwner 

	| aCreditCartNumberTemp anExpirationMonthOfYearTemp anOwnerTemp |
	self
		withCartSessionIdentifiedAs: aCartId
		do: [ :cartSession | ^ cartSession
			checkOutCartWithCreditCardNumbered: aCreditCartNumberTemp
			ownedBy: anOwnerTemp
			expiringOn: anExpirationMonthOfYearTemp ]
! !
!TusLibrosSystemFacadeTest methodsFor: 'as yet unclassified' stamp: 'JPF 7/7/2021 20:46:19' prior: 50933036!
test10CanCheckoutACart

	| cartId purchases |

	cartId := systemFacade createCartFor: self validUser authenticatedWith: self validUserPassword.
	systemFacade add: 1 of: self validBook toCartIdentifiedAs: cartId.
	systemFacade
		checkOutCartIdentifiedAs: cartId
		withCreditCardNumbered: testObjectsFactory notExpiredCreditCardNumber
		ownedBy: testObjectsFactory notExpiredCreditCardOwner
		.

	purchases := systemFacade listPurchasesOf: self validUser authenticatingWith: self validUserPassword.

	self assert: 1 equals: (purchases at: self validBook).
	self assert: testObjectsFactory itemSellByTheStorePrice equals: (purchases total).
! !
!TusLibrosSystemFacadeTest methodsFor: 'as yet unclassified' stamp: 'JPF 7/7/2021 20:46:19' prior: 50929168!
test11CanNotCheckoutANotCreatedCart

	self
		should: [systemFacade
			checkOutCartIdentifiedAs: self invalidCartId
			withCreditCardNumbered: testObjectsFactory notExpiredCreditCardNumber
			ownedBy: testObjectsFactory notExpiredCreditCardOwner
			]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: systemFacade invalidCartIdErrorDescription ]

		! !
!TusLibrosSystemFacadeTest methodsFor: 'as yet unclassified' stamp: 'JPF 7/7/2021 20:46:19' prior: 50929186!
test12CanNotCheckoutAnEmptyCart

	| cartId |

	cartId := systemFacade createCartFor: self validUser authenticatedWith: self validUserPassword.
	self
		should: [systemFacade
			checkOutCartIdentifiedAs: cartId
			withCreditCardNumbered: testObjectsFactory notExpiredCreditCardNumber
			ownedBy: testObjectsFactory notExpiredCreditCardOwner
			]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: systemFacade cartCanNotBeEmptyErrorMessage.
			self assert: (systemFacade listPurchasesOf: self validUser authenticatingWith: self validUserPassword) isEmpty ]

		! !
!TusLibrosRestInterface methodsFor: 'as yet unclassified' stamp: 'JPF 7/7/2021 20:46:19' prior: 50954458!
handleCheckOutCart: request

	self handle: request with: [	 | cartId ticket response |	
		
		cartId := self getParameter: 'cartId' from: request.
		
		ticket := tusLibrosSystemFacade
			checkOutCartIdentifiedAs: cartId asNumber
			withCreditCardNumbered: '1111222211112222'
			ownedBy: 'Juan Ferrino'
			.
			
		response := Mapper mapTicketToResponse: ticket.
		
		request send200Response: (WebUtils jsonEncode: response).
	]! !
!TusLibrosSystemFacadeTest methodsFor: 'as yet unclassified' stamp: 'JPF 7/7/2021 20:46:19' prior: 50932446!
test14ListPurchasesIncludesBoughtItems

	| cartId purchases |

	cartId := systemFacade createCartFor: self validUser authenticatedWith: self validUserPassword.
	systemFacade add: 2 of: self validBook toCartIdentifiedAs: cartId.
	systemFacade add: 1 of: self anotherValidBook toCartIdentifiedAs: cartId.
	systemFacade
		checkOutCartIdentifiedAs: cartId
		withCreditCardNumbered: '1111222233334444'
		ownedBy: 'Juan Perez'
		.

	purchases := systemFacade listPurchasesOf: self validUser authenticatingWith: self validUserPassword.

	self assert: (purchases at: self validBook) equals: 2.
	self assert: (purchases at: self anotherValidBook) equals: 1.
	self assert: purchases total equals: (testObjectsFactory itemSellByTheStorePrice * 2) + testObjectsFactory anotherItemSellByTheStorePrice.! !
!TusLibrosSystemFacadeTest methodsFor: 'as yet unclassified' stamp: 'JPF 7/7/2021 20:46:19' prior: 50929211!
test13CanNotCheckoutWithAnExpiredCreditCard

	| cartId |

	cartId := systemFacade createCartFor: self validUser authenticatedWith: self validUserPassword.
	systemFacade add: 1 of: self validBook toCartIdentifiedAs: cartId.
	self
		should: [systemFacade
			checkOutCartIdentifiedAs: cartId
			withCreditCardNumbered: testObjectsFactory notExpiredCreditCardNumber
			ownedBy: testObjectsFactory notExpiredCreditCardOwner
			]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: systemFacade canNotChargeAnExpiredCreditCardErrorMessage.
			self assert: (systemFacade listPurchasesOf: self validUser authenticatingWith: self validUserPassword) isEmpty ]

		! !
!TusLibrosSystemFacadeTest methodsFor: 'as yet unclassified' stamp: 'JPF 7/7/2021 20:46:19' prior: 50929238!
test19CanNotCheckOutCartWhenSessionIsExpired

	| cartId |

	cartId := systemFacade createCartFor: self validUser authenticatedWith: self validUserPassword.
	systemFacade add: 2 of: self validBook toCartIdentifiedAs: cartId.
	self advanceTime: (systemFacade sessionDuration + 1 minutes) .
	self should: [
		systemFacade
			checkOutCartIdentifiedAs: cartId
			withCreditCardNumbered: testObjectsFactory notExpiredCreditCardNumber
			ownedBy: testObjectsFactory notExpiredCreditCardOwner
			]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: systemFacade sessionHasExpiredErrorDescription.
			self assert: (systemFacade listPurchasesOf: self validUser authenticatingWith: self validUserPassword) isEmpty ]


	! !

!methodRemoval: TusLibrosSystemFacade #checkOutCartIdentifiedAs:withCreditCardNumbered:ownedBy:expiringOn: stamp: 'JPF 7/7/2021 20:46:19'!
checkOutCartIdentifiedAs: aCartId withCreditCardNumbered: aCreditCartNumber ownedBy: anOwner expiringOn: anExpirationMonthOfYear

	| aCreditCartNumberTemp anExpirationMonthOfYearTemp anOwnerTemp |
	self
		withCartSessionIdentifiedAs: aCartId
		do: [ :cartSession | ^ cartSession
			checkOutCartWithCreditCardNumbered: aCreditCartNumberTemp
			ownedBy: anOwnerTemp
			expiringOn: anExpirationMonthOfYearTemp ]
!
!TusLibrosSystemFacade methodsFor: 'facade protocol' stamp: 'JPF 7/7/2021 20:46:47'!
checkOutCartIdentifiedAs: aCartId ownedBy: anOwner 

	| aCreditCartNumberTemp anExpirationMonthOfYearTemp anOwnerTemp |
	self
		withCartSessionIdentifiedAs: aCartId
		do: [ :cartSession | ^ cartSession
			checkOutCartWithCreditCardNumbered: aCreditCartNumberTemp
			ownedBy: anOwnerTemp
			expiringOn: anExpirationMonthOfYearTemp ]
! !
!TusLibrosSystemFacadeTest methodsFor: 'as yet unclassified' stamp: 'JPF 7/7/2021 20:46:47' prior: 50960225!
test10CanCheckoutACart

	| cartId purchases |

	cartId := systemFacade createCartFor: self validUser authenticatedWith: self validUserPassword.
	systemFacade add: 1 of: self validBook toCartIdentifiedAs: cartId.
	systemFacade
		checkOutCartIdentifiedAs: cartId
		ownedBy: testObjectsFactory notExpiredCreditCardOwner
		.

	purchases := systemFacade listPurchasesOf: self validUser authenticatingWith: self validUserPassword.

	self assert: 1 equals: (purchases at: self validBook).
	self assert: testObjectsFactory itemSellByTheStorePrice equals: (purchases total).
! !
!TusLibrosRestInterface methodsFor: 'as yet unclassified' stamp: 'JPF 7/7/2021 20:46:48' prior: 50960289!
handleCheckOutCart: request

	self handle: request with: [	 | cartId ticket response |	
		
		cartId := self getParameter: 'cartId' from: request.
		
		ticket := tusLibrosSystemFacade
			checkOutCartIdentifiedAs: cartId asNumber
			ownedBy: 'Juan Ferrino'
			.
			
		response := Mapper mapTicketToResponse: ticket.
		
		request send200Response: (WebUtils jsonEncode: response).
	]! !
!TusLibrosSystemFacadeTest methodsFor: 'as yet unclassified' stamp: 'JPF 7/7/2021 20:46:48' prior: 50960335!
test13CanNotCheckoutWithAnExpiredCreditCard

	| cartId |

	cartId := systemFacade createCartFor: self validUser authenticatedWith: self validUserPassword.
	systemFacade add: 1 of: self validBook toCartIdentifiedAs: cartId.
	self
		should: [systemFacade
			checkOutCartIdentifiedAs: cartId
			ownedBy: testObjectsFactory notExpiredCreditCardOwner
			]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: systemFacade canNotChargeAnExpiredCreditCardErrorMessage.
			self assert: (systemFacade listPurchasesOf: self validUser authenticatingWith: self validUserPassword) isEmpty ]

		! !
!TusLibrosSystemFacadeTest methodsFor: 'as yet unclassified' stamp: 'JPF 7/7/2021 20:46:48' prior: 50960361!
test19CanNotCheckOutCartWhenSessionIsExpired

	| cartId |

	cartId := systemFacade createCartFor: self validUser authenticatedWith: self validUserPassword.
	systemFacade add: 2 of: self validBook toCartIdentifiedAs: cartId.
	self advanceTime: (systemFacade sessionDuration + 1 minutes) .
	self should: [
		systemFacade
			checkOutCartIdentifiedAs: cartId
			ownedBy: testObjectsFactory notExpiredCreditCardOwner
			]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: systemFacade sessionHasExpiredErrorDescription.
			self assert: (systemFacade listPurchasesOf: self validUser authenticatingWith: self validUserPassword) isEmpty ]


	! !
!TusLibrosSystemFacadeTest methodsFor: 'as yet unclassified' stamp: 'JPF 7/7/2021 20:46:48' prior: 50960266!
test12CanNotCheckoutAnEmptyCart

	| cartId |

	cartId := systemFacade createCartFor: self validUser authenticatedWith: self validUserPassword.
	self
		should: [systemFacade
			checkOutCartIdentifiedAs: cartId
			ownedBy: testObjectsFactory notExpiredCreditCardOwner
			]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: systemFacade cartCanNotBeEmptyErrorMessage.
			self assert: (systemFacade listPurchasesOf: self validUser authenticatingWith: self validUserPassword) isEmpty ]

		! !
!TusLibrosSystemFacadeTest methodsFor: 'as yet unclassified' stamp: 'JPF 7/7/2021 20:46:48' prior: 50960249!
test11CanNotCheckoutANotCreatedCart

	self
		should: [systemFacade
			checkOutCartIdentifiedAs: self invalidCartId
			ownedBy: testObjectsFactory notExpiredCreditCardOwner
			]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: systemFacade invalidCartIdErrorDescription ]

		! !
!TusLibrosSystemFacadeTest methodsFor: 'as yet unclassified' stamp: 'JPF 7/7/2021 20:46:48' prior: 50960306!
test14ListPurchasesIncludesBoughtItems

	| cartId purchases |

	cartId := systemFacade createCartFor: self validUser authenticatedWith: self validUserPassword.
	systemFacade add: 2 of: self validBook toCartIdentifiedAs: cartId.
	systemFacade add: 1 of: self anotherValidBook toCartIdentifiedAs: cartId.
	systemFacade
		checkOutCartIdentifiedAs: cartId
		ownedBy: 'Juan Perez'
		.

	purchases := systemFacade listPurchasesOf: self validUser authenticatingWith: self validUserPassword.

	self assert: (purchases at: self validBook) equals: 2.
	self assert: (purchases at: self anotherValidBook) equals: 1.
	self assert: purchases total equals: (testObjectsFactory itemSellByTheStorePrice * 2) + testObjectsFactory anotherItemSellByTheStorePrice.! !

!methodRemoval: TusLibrosSystemFacade #checkOutCartIdentifiedAs:withCreditCardNumbered:ownedBy: stamp: 'JPF 7/7/2021 20:46:48'!
checkOutCartIdentifiedAs: aCartId withCreditCardNumbered: aCreditCartNumber ownedBy: anOwner 

	| aCreditCartNumberTemp anExpirationMonthOfYearTemp anOwnerTemp |
	self
		withCartSessionIdentifiedAs: aCartId
		do: [ :cartSession | ^ cartSession
			checkOutCartWithCreditCardNumbered: aCreditCartNumberTemp
			ownedBy: anOwnerTemp
			expiringOn: anExpirationMonthOfYearTemp ]
!
!TusLibrosSystemFacade methodsFor: 'facade protocol' stamp: 'JPF 7/7/2021 20:47:05'!
checkOutCartIdentifiedAs: aCartId  

	| aCreditCartNumberTemp anExpirationMonthOfYearTemp anOwnerTemp |
	self
		withCartSessionIdentifiedAs: aCartId
		do: [ :cartSession | ^ cartSession
			checkOutCartWithCreditCardNumbered: aCreditCartNumberTemp
			ownedBy: anOwnerTemp
			expiringOn: anExpirationMonthOfYearTemp ]
! !
!TusLibrosRestInterface methodsFor: 'as yet unclassified' stamp: 'JPF 7/7/2021 20:47:05' prior: 50960442!
handleCheckOutCart: request

	self handle: request with: [	 | cartId ticket response |	
		
		cartId := self getParameter: 'cartId' from: request.
		
		ticket := tusLibrosSystemFacade
			checkOutCartIdentifiedAs: cartId asNumber
			.
			
		response := Mapper mapTicketToResponse: ticket.
		
		request send200Response: (WebUtils jsonEncode: response).
	]! !
!TusLibrosSystemFacadeTest methodsFor: 'as yet unclassified' stamp: 'JPF 7/7/2021 20:47:05' prior: 50960529!
test11CanNotCheckoutANotCreatedCart

	self
		should: [systemFacade
			checkOutCartIdentifiedAs: self invalidCartId
			]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: systemFacade invalidCartIdErrorDescription ]

		! !
!TusLibrosSystemFacadeTest methodsFor: 'as yet unclassified' stamp: 'JPF 7/7/2021 20:47:05' prior: 50960482!
test19CanNotCheckOutCartWhenSessionIsExpired

	| cartId |

	cartId := systemFacade createCartFor: self validUser authenticatedWith: self validUserPassword.
	systemFacade add: 2 of: self validBook toCartIdentifiedAs: cartId.
	self advanceTime: (systemFacade sessionDuration + 1 minutes) .
	self should: [
		systemFacade
			checkOutCartIdentifiedAs: cartId
			]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: systemFacade sessionHasExpiredErrorDescription.
			self assert: (systemFacade listPurchasesOf: self validUser authenticatingWith: self validUserPassword) isEmpty ]


	! !
!TusLibrosSystemFacadeTest methodsFor: 'as yet unclassified' stamp: 'JPF 7/7/2021 20:47:05' prior: 50960508!
test12CanNotCheckoutAnEmptyCart

	| cartId |

	cartId := systemFacade createCartFor: self validUser authenticatedWith: self validUserPassword.
	self
		should: [systemFacade
			checkOutCartIdentifiedAs: cartId
			]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: systemFacade cartCanNotBeEmptyErrorMessage.
			self assert: (systemFacade listPurchasesOf: self validUser authenticatingWith: self validUserPassword) isEmpty ]

		! !
!TusLibrosSystemFacadeTest methodsFor: 'as yet unclassified' stamp: 'JPF 7/7/2021 20:47:05' prior: 50960458!
test13CanNotCheckoutWithAnExpiredCreditCard

	| cartId |

	cartId := systemFacade createCartFor: self validUser authenticatedWith: self validUserPassword.
	systemFacade add: 1 of: self validBook toCartIdentifiedAs: cartId.
	self
		should: [systemFacade
			checkOutCartIdentifiedAs: cartId
			]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: systemFacade canNotChargeAnExpiredCreditCardErrorMessage.
			self assert: (systemFacade listPurchasesOf: self validUser authenticatingWith: self validUserPassword) isEmpty ]

		! !
!TusLibrosSystemFacadeTest methodsFor: 'as yet unclassified' stamp: 'JPF 7/7/2021 20:47:05' prior: 50960544!
test14ListPurchasesIncludesBoughtItems

	| cartId purchases |

	cartId := systemFacade createCartFor: self validUser authenticatedWith: self validUserPassword.
	systemFacade add: 2 of: self validBook toCartIdentifiedAs: cartId.
	systemFacade add: 1 of: self anotherValidBook toCartIdentifiedAs: cartId.
	systemFacade
		checkOutCartIdentifiedAs: cartId
		.

	purchases := systemFacade listPurchasesOf: self validUser authenticatingWith: self validUserPassword.

	self assert: (purchases at: self validBook) equals: 2.
	self assert: (purchases at: self anotherValidBook) equals: 1.
	self assert: purchases total equals: (testObjectsFactory itemSellByTheStorePrice * 2) + testObjectsFactory anotherItemSellByTheStorePrice.! !
!TusLibrosSystemFacadeTest methodsFor: 'as yet unclassified' stamp: 'JPF 7/7/2021 20:47:05' prior: 50960420!
test10CanCheckoutACart

	| cartId purchases |

	cartId := systemFacade createCartFor: self validUser authenticatedWith: self validUserPassword.
	systemFacade add: 1 of: self validBook toCartIdentifiedAs: cartId.
	systemFacade
		checkOutCartIdentifiedAs: cartId
		.

	purchases := systemFacade listPurchasesOf: self validUser authenticatingWith: self validUserPassword.

	self assert: 1 equals: (purchases at: self validBook).
	self assert: testObjectsFactory itemSellByTheStorePrice equals: (purchases total).
! !

!methodRemoval: TusLibrosSystemFacade #checkOutCartIdentifiedAs:ownedBy: stamp: 'JPF 7/7/2021 20:47:05'!
checkOutCartIdentifiedAs: aCartId ownedBy: anOwner 

	| aCreditCartNumberTemp anExpirationMonthOfYearTemp anOwnerTemp |
	self
		withCartSessionIdentifiedAs: aCartId
		do: [ :cartSession | ^ cartSession
			checkOutCartWithCreditCardNumbered: aCreditCartNumberTemp
			ownedBy: anOwnerTemp
			expiringOn: anExpirationMonthOfYearTemp ]
!
!TusLibrosSystemFacade methodsFor: 'facade protocol' stamp: 'JPF 7/7/2021 20:52:30' prior: 50960586!
checkOutCartIdentifiedAs: aCartId  

	| aCreditCartNumberTemp anExpirationMonthOfYearTemp anOwnerTemp |
	
	self
		withCartSessionIdentifiedAs: aCartId
		do: [ :cartSession | ^ cartSession
			checkOutCartWithCreditCardNumbered: aCreditCartNumberTemp
			ownedBy: anOwnerTemp
			expiringOn: anExpirationMonthOfYearTemp ]
! !

TestCase subclass: #CreditCardTest
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCardTest category: 'TusLibros' stamp: 'JPF 7/7/2021 21:03:05'!
TestCase subclass: #CreditCardTest
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCardTest methodsFor: 'setUp' stamp: 'JPF 7/7/2021 21:03:27' overrides: 16927572!
setUp

	testObjectsFactory := StoreTestObjectsFactory new.! !
!CreditCardTest methodsFor: 'tests' stamp: 'JPF 7/7/2021 21:03:50'!
test01ShouldFailWhenTheNameIsEmpty

	self 
		should: [ 
			CreditCard
				withNumber: testObjectsFactory validCreditCardNumber
				of: ''
				expiringOn: testObjectsFactory notExpiredCreditCardMonth ]
		raise: Error - MessageNotUnderstood 
		withMessageText: CreditCard canNotCreateACreditCardWithEmptyName.! !
!CreditCardTest methodsFor: 'tests' stamp: 'JPF 7/7/2021 21:04:03'!
test02ShouldFailWhenTheNameIsAllWithespaceCharacters

	self 
		should: [ 
			CreditCard
				withNumber: testObjectsFactory validCreditCardNumber
				of: '       '
				expiringOn: testObjectsFactory notExpiredCreditCardMonth ]
		raise: Error - MessageNotUnderstood 
		withMessageText: CreditCard canNotCreateACreditCardWithAllWithespaceCharacters! !
!CreditCardTest methodsFor: 'tests' stamp: 'JPF 7/7/2021 21:04:15'!
test03ShouldFailWhenTheNameHasMoreThan30Characters

	self 
		should: [ 
			CreditCard
				withNumber: testObjectsFactory validCreditCardNumber
				of: 'NameWithMoreThanThirtyCharacter'
				expiringOn: testObjectsFactory notExpiredCreditCardMonth ]
		raise: Error - MessageNotUnderstood 
		withMessageText: CreditCard canNotCreateACreditCardWithANameWithMoreThan30Characters.! !
!CreditCardTest methodsFor: 'tests' stamp: 'JPF 7/7/2021 21:04:42'!
test04ShouldFailWhenTheNumberHasNot16Digits

	self 
		should: [ 
			CreditCard
				withNumber: 11118888111188881
				of: testObjectsFactory validCreditCardName
				expiringOn: testObjectsFactory notExpiredCreditCardMonth ]
		raise: Error - MessageNotUnderstood 
		withMessageText: CreditCard canNotCreateACreditCardWithANumberThatHasNot16Digits.
		
	self 
		should: [ 
			CreditCard
				withNumber: 111188881111888
				of: testObjectsFactory validCreditCardName
				expiringOn: testObjectsFactory notExpiredCreditCardMonth ]
		raise: Error - MessageNotUnderstood 
		withMessageText: CreditCard canNotCreateACreditCardWithANumberThatHasNot16Digits.! !
!CreditCard class methodsFor: 'error descriptions' stamp: 'JPF 7/7/2021 21:05:49'!
canNotCreateACreditCardWithANameWithMoreThan30Characters
	
	^ 'Credit card can not have a name with more than 30 characters'! !
!CreditCard class methodsFor: 'error descriptions' stamp: 'JPF 7/7/2021 21:05:59'!
canNotCreateACreditCardWithANumberThatHasNot16Digits
	
	^ 'Credit card number should have 16 digits'! !
!CreditCard class methodsFor: 'error descriptions' stamp: 'JPF 7/7/2021 21:06:07'!
canNotCreateACreditCardWithAllWithespaceCharacters
	
	^ 'Credit card can not have a name with all whitespaces characters'! !
!CreditCard class methodsFor: 'error descriptions' stamp: 'JPF 7/7/2021 21:06:15'!
canNotCreateACreditCardWithEmptyName
	
	^ 'Credit card can not have an empty name'! !
!CreditCard class methodsFor: 'error descriptions' stamp: 'JPF 7/7/2021 21:06:26'!
withNumber: aCreditCardNumber of: aName expiringOn: aMonth 
	
	^self new initializeWithNumber: aCreditCardNumber of: aName expiringOn: aMonth.! !
!CreditCard class methodsFor: 'instance creation' stamp: 'JPF 7/7/2021 21:06:47' prior: 50960871!
withNumber: aCreditCardNumber of: aName expiringOn: aMonth 
	
	^self new initializeWithNumber: aCreditCardNumber of: aName expiringOn: aMonth.! !

!methodRemoval: CreditCard class #expiringOn: stamp: 'JPF 7/7/2021 21:06:57'!
expiringOn: aMonth

	^self new initializeExpiringOn: aMonth!

!classDefinition: #CreditCard category: #'TusLibros-Model' stamp: 'JPF 7/7/2021 21:07:49'!
Object subclass: #CreditCard
	instanceVariableNames: 'expiration number'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Model'!

!classDefinition: #CreditCard category: #'TusLibros-Model' stamp: 'JPF 7/7/2021 21:07:51'!
Object subclass: #CreditCard
	instanceVariableNames: 'expiration number name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Model'!
!CreditCard methodsFor: 'initialization' stamp: 'JPF 7/7/2021 21:07:46'!
initializeWithNumber: aCreditCardNumber of: aName expiringOn: aMonth

	self assertNameIsValid: aName.
	self assertCreditCardNumberIsValid: aCreditCardNumber.
	
	expiration := aMonth.
	number := aCreditCardNumber.
	name := aName.! !

!methodRemoval: CreditCard #initializeExpiringOn: stamp: 'JPF 7/7/2021 21:07:57'!
initializeExpiringOn: aMonth

	expiration := aMonth !
!CreditCard methodsFor: 'assertions' stamp: 'JPF 7/7/2021 21:08:20'!
assertCreditCardNumberIsValid: aCreditCardNumber

	^ (aCreditCardNumber numberOfDigitsInBase: 10) ~= 16
		ifTrue: [ self error: self class canNotCreateACreditCardWithANumberThatHasNot16Digits ]! !
!CreditCard methodsFor: 'assertions' stamp: 'JPF 7/7/2021 21:08:29'!
assertNameHasNotMoreThan30Characters: aName

	^ aName size > 30 
		ifTrue: [ self error: self class canNotCreateACreditCardWithANameWithMoreThan30Characters ]! !
!CreditCard methodsFor: 'assertions' stamp: 'JPF 7/7/2021 21:08:40'!
assertNameHasNotOnlyWithspaceCharacters: aName

	^ aName withBlanksTrimmed isEmpty
		ifTrue: [ self error: self class canNotCreateACreditCardWithAllWithespaceCharacters ]! !
!CreditCard methodsFor: 'assertions' stamp: 'JPF 7/7/2021 21:08:49'!
assertNameIsNotEmpty: aName

	^ aName isEmpty 
		ifTrue: [ self error: self class canNotCreateACreditCardWithEmptyName ]! !
!CreditCard methodsFor: 'assertions' stamp: 'JPF 7/7/2021 21:09:00'!
assertNameIsValid: aName

	self assertNameIsNotEmpty: aName.
	self assertNameHasNotOnlyWithspaceCharacters: aName.
	self assertNameHasNotMoreThan30Characters: aName! !

TestCase subclass: #CreditCardTest
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Model'!

!classDefinition: #CreditCardTest category: #'TusLibros-Model' stamp: 'JPF 7/7/2021 21:09:55'!
TestCase subclass: #CreditCardTest
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Model'!

TestCase subclass: #CreditCardTest
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Tests'!

!classDefinition: #CreditCardTest category: #'TusLibros-Tests' stamp: 'JPF 7/7/2021 21:10:07'!
TestCase subclass: #CreditCardTest
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Tests'!

!testRun: #CreditCardTest #test01ShouldFailWhenTheNameIsEmpty stamp: 'JPF 7/7/2021 21:10:24'!
ERROR!

!testRun: #CreditCardTest #test02ShouldFailWhenTheNameIsAllWithespaceCharacters stamp: 'JPF 7/7/2021 21:10:24'!
ERROR!

!testRun: #CreditCardTest #test03ShouldFailWhenTheNameHasMoreThan30Characters stamp: 'JPF 7/7/2021 21:10:24'!
ERROR!

!testRun: #CreditCardTest #test04ShouldFailWhenTheNumberHasNot16Digits stamp: 'JPF 7/7/2021 21:10:24'!
ERROR!

!testRun: #CreditCardTest #test01ShouldFailWhenTheNameIsEmpty stamp: 'JPF 7/7/2021 21:10:28'!
ERROR!
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'JPF 7/7/2021 21:11:34'!
validCreditCardNumber
	
	^ 1111888811118888! !
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'JPF 7/7/2021 21:11:43'!
validCreditCardName
	
	^ 'Valid Name'! !
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'JPF 7/7/2021 21:11:56'!
notExpiredCreditCardMonth

	^ Month month: today monthIndex year: today yearNumber + 1! !
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'JPF 7/7/2021 21:12:25' prior: 50929446!
notExpiredCreditCard
	
	^CreditCard
		withNumber: self validCreditCardNumber
		of: self validCreditCardName
		expiringOn: self notExpiredCreditCardMonth! !
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'JPF 7/7/2021 21:12:40' prior: 50929434!
expiredCreditCard
	
	^ CreditCard
		withNumber: self validCreditCardNumber 
		of: self validCreditCardName
		expiringOn: (Month month: today monthIndex year: today yearNumber - 1)! !

!testRun: #CreditCardTest #test01ShouldFailWhenTheNameIsEmpty stamp: 'JPF 7/7/2021 21:12:49'!
PASSED!

!testRun: #CreditCardTest #test02ShouldFailWhenTheNameIsAllWithespaceCharacters stamp: 'JPF 7/7/2021 21:12:49'!
PASSED!

!testRun: #CreditCardTest #test03ShouldFailWhenTheNameHasMoreThan30Characters stamp: 'JPF 7/7/2021 21:12:49'!
PASSED!

!testRun: #CreditCardTest #test04ShouldFailWhenTheNumberHasNot16Digits stamp: 'JPF 7/7/2021 21:12:49'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'JPF 7/7/2021 21:14:21'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'JPF 7/7/2021 21:14:23'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'JPF 7/7/2021 21:14:25'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'JPF 7/7/2021 21:14:27'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'JPF 7/7/2021 21:14:29'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'JPF 7/7/2021 21:14:31'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CanCheckoutACart stamp: 'JPF 7/7/2021 21:14:49'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test10CanCheckoutACart stamp: 'JPF 7/7/2021 21:14:49'!
ERROR!
!CartSession methodsFor: 'cart' stamp: 'JPF 7/7/2021 21:16:18' prior: 50927995!
checkOutCartWithCreditCardNumbered: aCreditCartNumber ownedBy: anOwner expiringOn: anExpirationMonthOfYear

	^(Cashier
		toCheckout: cart
		ownedBy: owner
		charging: (CreditCard withNumber: aCreditCartNumber of: anOwner expiringOn: anExpirationMonthOfYear )
		throught: systemFacade merchantProcessor
		on: self today
		registeringOn: systemFacade salesBook) checkOut ! !
!CartSession methodsFor: 'cart' stamp: 'JPF 7/7/2021 21:16:28' prior: 50961075!
checkOutCartWithCreditCardNumbered: aCreditCardNumber ownedBy: anOwner expiringOn: anExpirationMonthOfYear

	^(Cashier
		toCheckout: cart
		ownedBy: owner
		charging: (CreditCard withNumber: aCreditCardNumber of: anOwner expiringOn: anExpirationMonthOfYear )
		throught: systemFacade merchantProcessor
		on: self today
		registeringOn: systemFacade salesBook) checkOut ! !

!testRun: #TusLibrosSystemFacadeTest #test10CanCheckoutACart stamp: 'JPF 7/7/2021 21:16:38'!
ERROR!
!CartSession methodsFor: 'cart' stamp: 'JPF 7/7/2021 21:19:34' prior: 50961090!
checkOutCartWithCreditCardNumbered: aCreditCardNumber ownedBy: anOwner expiringOn: anExpirationMonthOfYear

	^(Cashier
		toCheckout: cart
		ownedBy: owner
		charging: (systemFacade creditCardOf: owner )
		throught: systemFacade merchantProcessor
		on: self today
		registeringOn: systemFacade salesBook) checkOut ! !
!CartSession methodsFor: 'cart' stamp: 'JPF 7/7/2021 21:20:20'!
checkOutCartWithCreditCardNumbered: aCreditCardNumber ownedBy: anOwner 

	^(Cashier
		toCheckout: cart
		ownedBy: owner
		charging: (systemFacade creditCardOf: owner )
		throught: systemFacade merchantProcessor
		on: self today
		registeringOn: systemFacade salesBook) checkOut ! !

!methodRemoval: CartSession #checkOutCartWithCreditCardNumbered:ownedBy:expiringOn: stamp: 'JPF 7/7/2021 21:20:20'!
checkOutCartWithCreditCardNumbered: aCreditCardNumber ownedBy: anOwner expiringOn: anExpirationMonthOfYear

	^(Cashier
		toCheckout: cart
		ownedBy: owner
		charging: (systemFacade creditCardOf: owner )
		throught: systemFacade merchantProcessor
		on: self today
		registeringOn: systemFacade salesBook) checkOut !
!CartSession methodsFor: 'cart' stamp: 'JPF 7/7/2021 21:20:48'!
checkOutCartWithCreditCardNumbered: aCreditCardNumber  

	^(Cashier
		toCheckout: cart
		ownedBy: owner
		charging: (systemFacade creditCardOf: owner )
		throught: systemFacade merchantProcessor
		on: self today
		registeringOn: systemFacade salesBook) checkOut ! !

!methodRemoval: CartSession #checkOutCartWithCreditCardNumbered:ownedBy: stamp: 'JPF 7/7/2021 21:20:48'!
checkOutCartWithCreditCardNumbered: aCreditCardNumber ownedBy: anOwner 

	^(Cashier
		toCheckout: cart
		ownedBy: owner
		charging: (systemFacade creditCardOf: owner )
		throught: systemFacade merchantProcessor
		on: self today
		registeringOn: systemFacade salesBook) checkOut !
!CartSession methodsFor: 'cart' stamp: 'JPF 7/7/2021 21:20:59'!
checkOutCartWithCreditCardNumbered  

	^(Cashier
		toCheckout: cart
		ownedBy: owner
		charging: (systemFacade creditCardOf: owner )
		throught: systemFacade merchantProcessor
		on: self today
		registeringOn: systemFacade salesBook) checkOut ! !

!methodRemoval: CartSession #checkOutCartWithCreditCardNumbered: stamp: 'JPF 7/7/2021 21:20:59'!
checkOutCartWithCreditCardNumbered: aCreditCardNumber  

	^(Cashier
		toCheckout: cart
		ownedBy: owner
		charging: (systemFacade creditCardOf: owner )
		throught: systemFacade merchantProcessor
		on: self today
		registeringOn: systemFacade salesBook) checkOut !
!CartSession methodsFor: 'cart' stamp: 'JPF 7/7/2021 21:21:29'!
checkOutCart  

	^(Cashier
		toCheckout: cart
		ownedBy: owner
		charging: (systemFacade creditCardOf: owner )
		throught: systemFacade merchantProcessor
		on: self today
		registeringOn: systemFacade salesBook) checkOut ! !

!methodRemoval: CartSession #checkOutCartWithCreditCardNumbered stamp: 'JPF 7/7/2021 21:21:29'!
checkOutCartWithCreditCardNumbered  

	^(Cashier
		toCheckout: cart
		ownedBy: owner
		charging: (systemFacade creditCardOf: owner )
		throught: systemFacade merchantProcessor
		on: self today
		registeringOn: systemFacade salesBook) checkOut !

!testRun: #TusLibrosSystemFacadeTest #test10CanCheckoutACart stamp: 'JPF 7/7/2021 21:22:16'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test10CanCheckoutACart stamp: 'JPF 7/7/2021 21:22:16'!
ERROR!
!TusLibrosSystemFacade methodsFor: 'facade protocol' stamp: 'JPF 7/7/2021 21:22:34' prior: 50960752!
checkOutCartIdentifiedAs: aCartId  

	
	
	self
		withCartSessionIdentifiedAs: aCartId
		do: [ :cartSession | ^ cartSession checkOutCart ]
! !
!TusLibrosSystemFacade methodsFor: 'facade protocol' stamp: 'JPF 7/7/2021 21:23:00' prior: 50961218!
checkOutCartIdentifiedAs: aCartId  

	self
		withCartSessionIdentifiedAs: aCartId
		do: [ :cartSession | ^ cartSession checkOutCart ]
! !

!testRun: #TusLibrosSystemFacadeTest #test10CanCheckoutACart stamp: 'JPF 7/7/2021 21:23:10'!
ERROR!
!TusLibrosSystemFacade methodsFor: 'user information' stamp: 'JPF 7/7/2021 21:24:00'!
creditCardOf: aString 
	self shouldBeImplemented.! !
!TusLibrosSystemFacade methodsFor: 'user information' stamp: 'JPF 7/7/2021 21:24:34' prior: 50961237!
creditCardOf: aClientId

	validUsersAndPasswords at: aClientId! !
!TusLibrosSystemFacade methodsFor: 'user information' stamp: 'JPF 7/7/2021 21:24:40' prior: 50961242!
creditCardOf: aClientId

	^ validUsersAndPasswords at: aClientId! !

!classDefinition: #ClientInformation category: #'TusLibros-Model' stamp: 'JPF 7/7/2021 21:29:51'!
Object subclass: #ClientInformation
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Model'!
!TusLibrosSystemFacadeTest methodsFor: 'test objects' stamp: 'JPF 7/7/2021 21:29:36' prior: 50929137!
validUsersAndPasswords

	^Dictionary new
		at: self validUser put: 
			(ClientInformation 
				for: self validUser
				authenticatedWith: self validUserPassword
				payingWith: testObjectsFactory notExpiredCreditCard);
		yourself! !
!ClientInformation class methodsFor: 'instance creation' stamp: 'JPF 7/7/2021 21:30:09'!
for: aString authenticatedWith: aString2 payingWith: aCreditCard 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeFor: aString authenticatedWith: aString2 payingWith: aCreditCard ! !
!ClientInformation class methodsFor: 'instance creation' stamp: 'JPF 7/7/2021 21:30:57' prior: 50961272!
for: aString authenticatedWith: aString2 payingWith: aCreditCard 
	
	^self new initializeFor: aString authenticatedWith: aString2 payingWith: aCreditCard ! !
!ClientInformation class methodsFor: 'instance creation' stamp: 'JPF 7/7/2021 21:31:05' prior: 50961284!
for: aClientId authenticatedWith: aString2 payingWith: aCreditCard 
	
	^self new initializeFor: aClientId authenticatedWith: aString2 payingWith: aCreditCard ! !
!ClientInformation class methodsFor: 'instance creation' stamp: 'JPF 7/7/2021 21:31:15' prior: 50961293!
for: aClientId authenticatedWith: aPassword payingWith: aCreditCard 
	
	^self new initializeFor: aClientId authenticatedWith: aPassword payingWith: aCreditCard ! !

!classDefinition: #ClientInformation category: #'TusLibros-Model' stamp: 'JPF 7/7/2021 21:31:37'!
Object subclass: #ClientInformation
	instanceVariableNames: 'clientId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Model'!

!classDefinition: #ClientInformation category: #'TusLibros-Model' stamp: 'JPF 7/7/2021 21:31:37'!
Object subclass: #ClientInformation
	instanceVariableNames: 'clientId password'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Model'!

!classDefinition: #ClientInformation category: #'TusLibros-Model' stamp: 'JPF 7/7/2021 21:31:38'!
Object subclass: #ClientInformation
	instanceVariableNames: 'clientId password creditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Model'!
!ClientInformation methodsFor: 'initialization' stamp: 'JPF 7/7/2021 21:31:38'!
initializeFor: aClientId authenticatedWith: aPassword payingWith: aCreditCard 
	self shouldBeImplemented.
	clientId := aClientId.
	password := aPassword.
	creditCard := aCreditCard.! !
!ClientInformation methodsFor: 'initialization' stamp: 'JPF 7/7/2021 21:31:45' prior: 50961334!
initializeFor: aClientId authenticatedWith: aPassword payingWith: aCreditCard 
	
	clientId := aClientId.
	password := aPassword.
	creditCard := aCreditCard.! !

!testRun: #TusLibrosSystemFacadeTest #test10CanCheckoutACart stamp: 'JPF 7/7/2021 21:31:48'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test10CanCheckoutACart stamp: 'JPF 7/7/2021 21:32:16'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test10CanCheckoutACart stamp: 'JPF 7/7/2021 21:32:30'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test10CanCheckoutACart stamp: 'JPF 7/7/2021 21:32:38'!
ERROR!
!TusLibrosSystemFacade methodsFor: 'authentication' stamp: 'JPF 7/7/2021 21:34:02' prior: 50928438!
does: aUser authenticatesWith: aPassword

	"Recordar que esto es solo un ejemplo. No se deben guardar passwords en un sistema de verdad sino un
	hash o similar - Hernan"

	| storedPassword |

	storedPassword := (validUsersAndPasswords at: aUser ifAbsent: [ ^false ]) password.
	^aPassword = storedPassword ! !

!testRun: #TusLibrosSystemFacadeTest #test10CanCheckoutACart stamp: 'JPF 7/7/2021 21:34:07'!
ERROR!
!ClientInformation methodsFor: 'accessing' stamp: 'JPF 7/7/2021 21:34:19'!
password
	self shouldBeImplemented.
	^password! !
!ClientInformation methodsFor: 'accessing' stamp: 'JPF 7/7/2021 21:34:26' prior: 50961380!
password
	
	^password! !

!testRun: #TusLibrosSystemFacadeTest #test10CanCheckoutACart stamp: 'JPF 7/7/2021 21:34:30'!
ERROR!
!TusLibrosSystemFacade methodsFor: 'user information' stamp: 'JPF 7/7/2021 21:35:32' prior: 50961248!
creditCardOf: aClientId

	^ (validUsersAndPasswords at: aClientId) creditCard! !

!testRun: #TusLibrosSystemFacadeTest #test10CanCheckoutACart stamp: 'JPF 7/7/2021 21:35:38'!
ERROR!
!ClientInformation methodsFor: 'accessing' stamp: 'JPF 7/7/2021 21:36:11'!
creditCard
	self shouldBeImplemented.
	^creditCard! !
!ClientInformation methodsFor: 'accessing' stamp: 'JPF 7/7/2021 21:36:21' prior: 50961402!
creditCard
	
	^creditCard! !

!testRun: #TusLibrosSystemFacadeTest #test10CanCheckoutACart stamp: 'JPF 7/7/2021 21:36:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CanCheckoutACart stamp: 'JPF 7/7/2021 21:36:30'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'JPF 7/7/2021 21:36:34'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'JPF 7/7/2021 21:36:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'JPF 7/7/2021 21:36:40'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'JPF 7/7/2021 21:36:40'!
FAILURE!
!TusLibrosSystemFacadeTest methodsFor: 'tests - checkout' stamp: 'JPF 7/7/2021 21:37:59' prior: 50960671!
test13CanNotCheckoutWithAnExpiredCreditCard

	| cartId |

	cartId := systemFacade createCartFor: self validUser authenticatedWith: self validUserPassword.
	systemFacade add: 1 of: self validBook toCartIdentifiedAs: cartId.
	self
		should: [systemFacade
			checkOutCartIdentifiedAs: cartId
			]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: systemFacade canNotChargeAnExpiredCreditCardErrorMessage.
			self assert: (systemFacade listPurchasesOf: self validUserWithExpiredCreditCard authenticatingWith: self validUserPassword) isEmpty]

		! !
!TusLibrosSystemFacadeTest methodsFor: 'tests - checkout' stamp: 'JPF 7/7/2021 21:38:53' prior: 50961433!
test13CanNotCheckoutWithAnExpiredCreditCard

	| cartId |

	cartId := systemFacade createCartFor: self validUserWithExpiredCreditCard authenticatedWith: self validUserPassword.
	systemFacade add: 1 of: self validBook toCartIdentifiedAs: cartId.
	self
		should: [systemFacade
			checkOutCartIdentifiedAs: cartId
			]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: systemFacade canNotChargeAnExpiredCreditCardErrorMessage.
			self assert: (systemFacade listPurchasesOf: self validUserWithExpiredCreditCard authenticatingWith: self validUserPassword) isEmpty]

		! !

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'JPF 7/7/2021 21:39:05'!
ERROR!
!TusLibrosSystemFacadeTest methodsFor: 'test objects' stamp: 'JPF 7/7/2021 21:39:31'!
validUserWithExpiredCreditCard
	self shouldBeImplemented.! !
!TusLibrosSystemFacadeTest methodsFor: 'test objects' stamp: 'JPF 7/7/2021 21:39:54' prior: 50961483!
validUserWithExpiredCreditCard
	
	^ 'validUserExpiredCard'! !
!TusLibrosSystemFacadeTest methodsFor: 'test objects' stamp: 'JPF 7/7/2021 21:41:04' prior: 50961261!
validUsersAndPasswords

	^Dictionary new
		at: self validUser put: 
			(ClientInformation 
				for: self validUser
				authenticatedWith: self validUserPassword
				payingWith: testObjectsFactory notExpiredCreditCard);
		at: self validUserWithExpiredCreditCard put: 
			(ClientInformation 
				for: self validUser
				authenticatedWith: self validUserPassword
				payingWith: testObjectsFactory expiredCreditCard);
		yourself! !

!testRun: #TusLibrosSystemFacadeTest #test10CanCheckoutACart stamp: 'JPF 7/7/2021 21:41:29'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'JPF 7/7/2021 21:41:32'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'JPF 7/7/2021 21:41:35'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'JPF 7/7/2021 21:41:38'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'JPF 7/7/2021 21:41:42'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'JPF 7/7/2021 21:41:55'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'JPF 7/7/2021 21:41:55'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'JPF 7/7/2021 21:41:55'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'JPF 7/7/2021 21:41:55'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'JPF 7/7/2021 21:41:55'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'JPF 7/7/2021 21:41:55'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'JPF 7/7/2021 21:41:55'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'JPF 7/7/2021 21:41:55'!
PASSED!

!testRun: #CartTest #test09CanNotRemoveAnItemThatIsNotInTheCart stamp: 'JPF 7/7/2021 21:41:55'!
PASSED!

!testRun: #CartTest #test10ShouldRemoveAnItemFromTheCart stamp: 'JPF 7/7/2021 21:41:55'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'JPF 7/7/2021 21:41:55'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'JPF 7/7/2021 21:41:55'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'JPF 7/7/2021 21:41:55'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'JPF 7/7/2021 21:41:55'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'JPF 7/7/2021 21:41:55'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'JPF 7/7/2021 21:41:55'!
PASSED!

!testRun: #CreditCardTest #test01ShouldFailWhenTheNameIsEmpty stamp: 'JPF 7/7/2021 21:41:55'!
PASSED!

!testRun: #CreditCardTest #test02ShouldFailWhenTheNameIsAllWithespaceCharacters stamp: 'JPF 7/7/2021 21:41:55'!
PASSED!

!testRun: #CreditCardTest #test03ShouldFailWhenTheNameHasMoreThan30Characters stamp: 'JPF 7/7/2021 21:41:55'!
PASSED!

!testRun: #CreditCardTest #test04ShouldFailWhenTheNumberHasNot16Digits stamp: 'JPF 7/7/2021 21:41:55'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'JPF 7/7/2021 21:41:55'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01ShoulFailIfTryToRemoveAnItemFromAnInexistentCart stamp: 'JPF 7/7/2021 21:41:55'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01shouldReturnTheCatalog stamp: 'JPF 7/7/2021 21:41:55'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'JPF 7/7/2021 21:41:55'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02ShoulFailIfTryToRemoveAnItemThatItIsNotInTheCart stamp: 'JPF 7/7/2021 21:41:55'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'JPF 7/7/2021 21:41:55'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03ShoulRemoveAnItemFromTheCart stamp: 'JPF 7/7/2021 21:41:55'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'JPF 7/7/2021 21:41:55'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'JPF 7/7/2021 21:41:55'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'JPF 7/7/2021 21:41:55'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07ListCartOfAnEmptyCartReturnsAnEmptyBag stamp: 'JPF 7/7/2021 21:41:55'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'JPF 7/7/2021 21:41:55'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'JPF 7/7/2021 21:41:55'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CanCheckoutACart stamp: 'JPF 7/7/2021 21:41:55'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'JPF 7/7/2021 21:41:55'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'JPF 7/7/2021 21:41:55'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'JPF 7/7/2021 21:41:55'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'JPF 7/7/2021 21:41:55'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'JPF 7/7/2021 21:41:55'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'JPF 7/7/2021 21:41:55'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'JPF 7/7/2021 21:41:55'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'JPF 7/7/2021 21:41:55'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'JPF 7/7/2021 21:41:55'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'JPF 7/7/2021 21:43:47'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'JPF 7/7/2021 21:43:47'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'JPF 7/7/2021 21:43:47'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'JPF 7/7/2021 21:43:47'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'JPF 7/7/2021 21:43:47'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'JPF 7/7/2021 21:43:47'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'JPF 7/7/2021 21:43:47'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'JPF 7/7/2021 21:43:47'!
PASSED!

!testRun: #CartTest #test09CanNotRemoveAnItemThatIsNotInTheCart stamp: 'JPF 7/7/2021 21:43:47'!
PASSED!

!testRun: #CartTest #test10ShouldRemoveAnItemFromTheCart stamp: 'JPF 7/7/2021 21:43:47'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'JPF 7/7/2021 21:43:47'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'JPF 7/7/2021 21:43:47'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'JPF 7/7/2021 21:43:47'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'JPF 7/7/2021 21:43:47'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'JPF 7/7/2021 21:43:47'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'JPF 7/7/2021 21:43:47'!
PASSED!

!testRun: #CreditCardTest #test01ShouldFailWhenTheNameIsEmpty stamp: 'JPF 7/7/2021 21:43:47'!
PASSED!

!testRun: #CreditCardTest #test02ShouldFailWhenTheNameIsAllWithespaceCharacters stamp: 'JPF 7/7/2021 21:43:47'!
PASSED!

!testRun: #CreditCardTest #test03ShouldFailWhenTheNameHasMoreThan30Characters stamp: 'JPF 7/7/2021 21:43:47'!
PASSED!

!testRun: #CreditCardTest #test04ShouldFailWhenTheNumberHasNot16Digits stamp: 'JPF 7/7/2021 21:43:47'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'JPF 7/7/2021 21:43:47'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01ShoulFailIfTryToRemoveAnItemFromAnInexistentCart stamp: 'JPF 7/7/2021 21:43:47'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01shouldReturnTheCatalog stamp: 'JPF 7/7/2021 21:43:47'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'JPF 7/7/2021 21:43:47'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02ShoulFailIfTryToRemoveAnItemThatItIsNotInTheCart stamp: 'JPF 7/7/2021 21:43:47'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'JPF 7/7/2021 21:43:47'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03ShoulRemoveAnItemFromTheCart stamp: 'JPF 7/7/2021 21:43:47'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'JPF 7/7/2021 21:43:47'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'JPF 7/7/2021 21:43:47'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'JPF 7/7/2021 21:43:47'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07ListCartOfAnEmptyCartReturnsAnEmptyBag stamp: 'JPF 7/7/2021 21:43:47'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'JPF 7/7/2021 21:43:47'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'JPF 7/7/2021 21:43:47'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CanCheckoutACart stamp: 'JPF 7/7/2021 21:43:47'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'JPF 7/7/2021 21:43:47'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'JPF 7/7/2021 21:43:47'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'JPF 7/7/2021 21:43:47'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'JPF 7/7/2021 21:43:47'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'JPF 7/7/2021 21:43:47'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'JPF 7/7/2021 21:43:47'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'JPF 7/7/2021 21:43:47'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'JPF 7/7/2021 21:43:47'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'JPF 7/7/2021 21:43:47'!
PASSED!

!classDefinition: #TusLibrosSystemFacade category: #'TusLibros-Model' stamp: 'JPF 7/7/2021 21:45:23'!
Object subclass: #TusLibrosSystemFacade
	instanceVariableNames: 'validUsersAndClientInformation catalog lastId merchantProcessor salesBook clock cartSessions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Model'!
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'JPF 7/7/2021 21:45:23' prior: 50928587!
initializeAuthenticatingWith: aValidUsersAndPasswords
	acceptingItemsOf: aCatalog
	registeringOn: aSalesBook
	debitingThrought: aMerchantProcessor
	measuringTimeWith: aClock

	validUsersAndClientInformation := aValidUsersAndPasswords.
	catalog := aCatalog.
	salesBook := aSalesBook.
	merchantProcessor := aMerchantProcessor.
	clock := aClock.

	cartSessions := Dictionary new.
	lastId := 0.! !
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'JPF 7/7/2021 21:45:23' prior: 50961364!
does: aUser authenticatesWith: aPassword

	"Recordar que esto es solo un ejemplo. No se deben guardar passwords en un sistema de verdad sino un
	hash o similar - Hernan"

	| storedPassword |

	storedPassword := (validUsersAndClientInformation at: aUser ifAbsent: [ ^false ]) password.
	^aPassword = storedPassword ! !
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'JPF 7/7/2021 21:45:23' prior: 50961393!
creditCardOf: aClientId

	^ (validUsersAndClientInformation at: aClientId) creditCard! !
!TusLibrosSystemFactory methodsFor: 'factory protocol' stamp: 'JPF 7/7/2021 21:46:27'!
createValidUsersAndClientInformation
	
	^ self subclassResponsibility ! !
!TusLibrosDefaultFactory methodsFor: 'factory protocol' stamp: 'JPF 7/7/2021 21:46:27' overrides: 50961880!
createValidUsersAndClientInformation

	^ Dictionary new
		at: 'Juan Ferrino' put: '1234';
		at: 'Nora Trinchero' put: '1234';
		yourself! !
!TusLibrosSystemFactory methodsFor: 'as yet unclassified' stamp: 'JPF 7/7/2021 21:46:27' prior: 50929968!
createFacade
	
	^ TusLibrosSystemFacade
		authenticatingWith: self createValidUsersAndClientInformation
		acceptingItemsOf: self createCatalog 
		registeringOn: self createSalesBook 
		debitingThrought: self createMerchantProcessor 
		measuringTimeWith: self createClock
	! !

!methodRemoval: TusLibrosSystemFactory #createValidUserAndPasswords stamp: 'JPF 7/7/2021 21:46:27'!
createValidUserAndPasswords
	
	^ self subclassResponsibility !

!methodRemoval: TusLibrosDefaultFactory #createValidUserAndPasswords stamp: 'JPF 7/7/2021 21:46:28'!
createValidUserAndPasswords

	^ Dictionary new
		at: 'Juan Ferrino' put: '1234';
		at: 'Nora Trinchero' put: '1234';
		yourself!
!TusLibrosDefaultFactory methodsFor: 'factory protocol' stamp: 'JPF 7/7/2021 21:50:46' prior: 50961886 overrides: 50961880!
createValidUsersAndClientInformation

	| commonPassword juanFerrino noraTrinchero |
	juanFerrino := 'Juan Ferrino'.
	noraTrinchero := 'Nora Trinchero'.
	commonPassword := '1234'.

	^ Dictionary new
		at: juanFerrino put: (ClientInformation for: juanFerrino authenticatedWith: commonPassword payingWith: 
		(CreditCard withNumber: '1111222211112222' of: juanFerrino expiringOn: '') );
		at: noraTrinchero put: '1234';
		yourself! !
!TusLibrosDefaultFactory methodsFor: 'factory protocol' stamp: 'JPF 7/7/2021 21:53:38' prior: 50961919 overrides: 50961880!
createValidUsersAndClientInformation

	| commonPassword juanFerrino noraTrinchero today |
	juanFerrino := 'Juan Ferrino'.
	noraTrinchero := 'Nora Trinchero'.
	commonPassword := '1234'.
	
	today := Date.

	^ Dictionary new
		at: juanFerrino put: (ClientInformation for: juanFerrino authenticatedWith: commonPassword payingWith: 
		(CreditCard withNumber: '1111222211112222' of: juanFerrino expiringOn: (Month month: today monthIndex year: today yearNumber + 1)) );
		at: noraTrinchero put: '1234';
		yourself! !
!TusLibrosDefaultFactory methodsFor: 'factory protocol' stamp: 'JPF 7/7/2021 21:54:46' prior: 50961937 overrides: 50961880!
createValidUsersAndClientInformation

	| commonPassword juanFerrino noraTrinchero today |
	juanFerrino := 'Juan Ferrino'.
	noraTrinchero := 'Nora Trinchero'.
	commonPassword := '1234'.
	
	today := DateAndTime now.

	^ Dictionary new
		at: juanFerrino put: (ClientInformation for: juanFerrino authenticatedWith: commonPassword payingWith: 
		(CreditCard withNumber: '1111222211112222' of: juanFerrino expiringOn: (Month month: today monthIndex year: today yearNumber + 1)) );
		at: noraTrinchero put: '1234';
		yourself! !
!TusLibrosDefaultFactory methodsFor: 'factory protocol' stamp: 'JPF 7/7/2021 21:55:22' prior: 50961957 overrides: 50961880!
createValidUsersAndClientInformation

	| commonPassword juanFerrino noraTrinchero today |
	
	juanFerrino := 'Juan Ferrino'.
	noraTrinchero := 'Nora Trinchero'.
	commonPassword := '1234'.
	
	today := DateAndTime now.

	^ Dictionary new
		at: juanFerrino put: (ClientInformation for: juanFerrino authenticatedWith: commonPassword payingWith: 
		(CreditCard withNumber: '1111222211112222' of: juanFerrino expiringOn: (Month month: today monthIndex year: today yearNumber + 1)) );
		at: noraTrinchero put: '1234';
		yourself! !
!TusLibrosDefaultFactory methodsFor: 'factory protocol' stamp: 'JPF 7/7/2021 21:55:40' prior: 50961978 overrides: 50961880!
createValidUsersAndClientInformation

	| commonPassword juanFerrino noraTrinchero today notExpiredCreditCard |
	
	juanFerrino := 'Juan Ferrino'.
	noraTrinchero := 'Nora Trinchero'.
	commonPassword := '1234'.
	
	today := DateAndTime now.

	notExpiredCreditCard _ CreditCard withNumber: '1111222211112222' of: juanFerrino expiringOn: (Month month: today monthIndex year: today yearNumber + 1).
	^ Dictionary new
		at: juanFerrino put: (ClientInformation for: juanFerrino authenticatedWith: commonPassword payingWith: 
		(notExpiredCreditCard) );
		at: noraTrinchero put: '1234';
		yourself! !
!TusLibrosDefaultFactory methodsFor: 'factory protocol' stamp: 'JPF 7/7/2021 21:55:50' prior: 50961999 overrides: 50961880!
createValidUsersAndClientInformation

	| commonPassword juanFerrino noraTrinchero today notExpiredCreditCard |
	
	juanFerrino := 'Juan Ferrino'.
	noraTrinchero := 'Nora Trinchero'.
	commonPassword := '1234'.
	
	today := DateAndTime now.

	notExpiredCreditCard := CreditCard withNumber: '1111222211112222' of: juanFerrino expiringOn: (Month month: today monthIndex year: today yearNumber + 1).
	^ Dictionary new
		at: juanFerrino put: (ClientInformation for: juanFerrino authenticatedWith: commonPassword payingWith: 
		(notExpiredCreditCard) );
		at: noraTrinchero put: '1234';
		yourself! !
!TusLibrosDefaultFactory methodsFor: 'factory protocol' stamp: 'JPF 7/7/2021 21:56:12' prior: 50962022 overrides: 50961880!
createValidUsersAndClientInformation

	| commonPassword juanFerrino noraTrinchero today notExpiredCreditCard juanFerrinoClientInfo |
	
	juanFerrino := 'Juan Ferrino'.
	noraTrinchero := 'Nora Trinchero'.
	commonPassword := '1234'.
	
	today := DateAndTime now.

	notExpiredCreditCard := CreditCard withNumber: '1111222211112222' of: juanFerrino expiringOn: (Month month: today monthIndex year: today yearNumber + 1).
	juanFerrinoClientInfo _ ClientInformation for: juanFerrino authenticatedWith: commonPassword payingWith: 
		(notExpiredCreditCard).
	^ Dictionary new
		at: juanFerrino put: (juanFerrinoClientInfo );
		at: noraTrinchero put: '1234';
		yourself! !
!TusLibrosDefaultFactory methodsFor: 'factory protocol' stamp: 'JPF 7/7/2021 21:57:22' prior: 50962045 overrides: 50961880!
createValidUsersAndClientInformation

	| commonPassword juanFerrino noraTrinchero today notExpiredCreditCard juanFerrinoClientInfo expiredCreditCard noraTrincheroClientInfo |
	
	juanFerrino := 'Juan Ferrino'.
	noraTrinchero := 'Nora Trinchero'.
	commonPassword := '1234'.
	
	today := DateAndTime now.

	notExpiredCreditCard := CreditCard withNumber: '1111222211112222' of: juanFerrino expiringOn: (Month month: today monthIndex year: today yearNumber + 1).
	juanFerrinoClientInfo _ ClientInformation for: juanFerrino authenticatedWith: commonPassword payingWith: 
		notExpiredCreditCard.
		
	expiredCreditCard := CreditCard withNumber: '8888222288882222' of: noraTrinchero expiringOn: (Month month: today monthIndex year: today yearNumber + 1).
	noraTrincheroClientInfo _ ClientInformation for: noraTrinchero authenticatedWith: commonPassword payingWith: 
		expiredCreditCard.
		
	^ Dictionary new
		at: juanFerrino put: (juanFerrinoClientInfo );
		at: noraTrinchero put: '1234';
		yourself! !
!TusLibrosDefaultFactory methodsFor: 'factory protocol' stamp: 'JPF 7/7/2021 21:57:46' prior: 50962070 overrides: 50961880!
createValidUsersAndClientInformation

	| commonPassword juanFerrino noraTrinchero today notExpiredCreditCard juanFerrinoClientInfo expiredCreditCard noraTrincheroClientInfo |
	
	juanFerrino := 'Juan Ferrino'.
	noraTrinchero := 'Nora Trinchero'.
	commonPassword := '1234'.
	
	today := DateAndTime now.

	notExpiredCreditCard := CreditCard withNumber: '1111222211112222' of: juanFerrino expiringOn: (Month month: today monthIndex year: today yearNumber + 1).
	juanFerrinoClientInfo _ ClientInformation for: juanFerrino authenticatedWith: commonPassword payingWith: 
		notExpiredCreditCard.
		
	expiredCreditCard := CreditCard withNumber: '8888222288882222' of: noraTrinchero expiringOn: (Month month: today monthIndex year: today yearNumber + 1).
	noraTrincheroClientInfo _ ClientInformation for: noraTrinchero authenticatedWith: commonPassword payingWith: 
		expiredCreditCard.
		
	^ Dictionary new
		at: juanFerrino put: juanFerrinoClientInfo ;
		at: noraTrinchero put: noraTrincheroClientInfo;
		yourself! !
!TusLibrosDefaultFactory methodsFor: 'factory protocol' stamp: 'JPF 7/7/2021 21:57:49' prior: 50962105 overrides: 50961880!
createValidUsersAndClientInformation

	| commonPassword juanFerrino noraTrinchero today notExpiredCreditCard juanFerrinoClientInfo expiredCreditCard noraTrincheroClientInfo |
	
	juanFerrino := 'Juan Ferrino'.
	noraTrinchero := 'Nora Trinchero'.
	commonPassword := '1234'.
	
	today := DateAndTime now.

	notExpiredCreditCard := CreditCard withNumber: '1111222211112222' of: juanFerrino expiringOn: (Month month: today monthIndex year: today yearNumber + 1).
	juanFerrinoClientInfo _ ClientInformation for: juanFerrino authenticatedWith: commonPassword payingWith: 
		notExpiredCreditCard.
		
	expiredCreditCard := CreditCard withNumber: '8888222288882222' of: noraTrinchero expiringOn: (Month month: today monthIndex year: today yearNumber + 1).
	noraTrincheroClientInfo _ ClientInformation for: noraTrinchero authenticatedWith: commonPassword payingWith: 
		expiredCreditCard.
		
	^ Dictionary new
		at: juanFerrino put: juanFerrinoClientInfo;
		at: noraTrinchero put: noraTrincheroClientInfo;
		yourself! !
!TusLibrosDefaultFactory methodsFor: 'factory protocol' stamp: 'JPF 7/7/2021 21:57:56' prior: 50962141 overrides: 50961880!
createValidUsersAndClientInformation

	| commonPassword juanFerrino noraTrinchero today notExpiredCreditCard juanFerrinoClientInfo expiredCreditCard noraTrincheroClientInfo |
	
	juanFerrino := 'Juan Ferrino'.
	noraTrinchero := 'Nora Trinchero'.
	commonPassword := '1234'.
	
	today := DateAndTime now.

	notExpiredCreditCard := CreditCard withNumber: '1111222211112222' of: juanFerrino expiringOn: (Month month: today monthIndex year: today yearNumber + 1).
	juanFerrinoClientInfo _ ClientInformation for: juanFerrino authenticatedWith: commonPassword payingWith: 
		notExpiredCreditCard.
		
	expiredCreditCard := CreditCard withNumber: '8888222288882222' of: noraTrinchero expiringOn: (Month month: today monthIndex year: today yearNumber - 1).
	noraTrincheroClientInfo _ ClientInformation for: noraTrinchero authenticatedWith: commonPassword payingWith: 
		expiredCreditCard.
		
	^ Dictionary new
		at: juanFerrino put: juanFerrinoClientInfo;
		at: noraTrinchero put: noraTrincheroClientInfo;
		yourself! !
!TusLibrosDefaultFactory methodsFor: 'factory protocol' stamp: 'JPF 7/7/2021 21:58:30' prior: 50962177 overrides: 50961880!
createValidUsersAndClientInformation

	| commonPassword juanFerrino noraTrinchero today notExpiredCreditCard juanFerrinoClientInfo expiredCreditCard noraTrincheroClientInfo |
	
	juanFerrino := 'Juan Ferrino'.
	noraTrinchero := 'Nora Trinchero'.
	commonPassword := '1234'.
	
	today := DateAndTime now.

	notExpiredCreditCard := CreditCard withNumber: '1111222211112222' of: juanFerrino expiringOn: (Month month: today monthIndex year: today yearNumber + 1).
	juanFerrinoClientInfo := ClientInformation for: juanFerrino authenticatedWith: commonPassword payingWith: 
		notExpiredCreditCard.
		
	expiredCreditCard := CreditCard withNumber: '8888222288882222' of: noraTrinchero expiringOn: (Month month: today monthIndex year: today yearNumber - 1).
	noraTrincheroClientInfo := ClientInformation for: noraTrinchero authenticatedWith: commonPassword payingWith: 
		expiredCreditCard.
		
	^ Dictionary new
		at: juanFerrino put: juanFerrinoClientInfo;
		at: noraTrinchero put: noraTrincheroClientInfo;
		yourself! !
!TusLibrosDefaultFactory methodsFor: 'factory protocol' stamp: 'JPF 7/7/2021 21:58:46' prior: 50962213 overrides: 50961880!
createValidUsersAndClientInformation

	| commonPassword juanFerrino noraTrinchero today notExpiredCreditCard juanFerrinoClientInfo expiredCreditCard noraTrincheroClientInfo |
	
	juanFerrino := 'Juan Ferrino'.
	noraTrinchero := 'Nora Trinchero'.
	commonPassword := '1234'.
	
	today := DateAndTime now.

	notExpiredCreditCard := CreditCard withNumber: '1111222211112222' of: juanFerrino expiringOn: (Month month: today monthIndex year: today yearNumber + 1).
	juanFerrinoClientInfo := ClientInformation 
		for: juanFerrino 
		authenticatedWith: commonPassword 
		payingWith: notExpiredCreditCard.
		
	expiredCreditCard := CreditCard withNumber: '8888222288882222' of: noraTrinchero expiringOn: (Month month: today monthIndex year: today yearNumber - 1).
	noraTrincheroClientInfo := ClientInformation for: noraTrinchero authenticatedWith: commonPassword payingWith: 
		expiredCreditCard.
		
	^ Dictionary new
		at: juanFerrino put: juanFerrinoClientInfo;
		at: noraTrinchero put: noraTrincheroClientInfo;
		yourself! !
!TusLibrosDefaultFactory methodsFor: 'factory protocol' stamp: 'JPF 7/7/2021 21:59:26' prior: 50962249 overrides: 50961880!
createValidUsersAndClientInformation

	| commonPassword juanFerrino noraTrinchero today notExpiredCreditCard juanFerrinoClientInfo expiredCreditCard noraTrincheroClientInfo |
	
	juanFerrino := 'Juan Ferrino'.
	noraTrinchero := 'Nora Trinchero'.
	commonPassword := '1234'.
	
	today := DateAndTime now.

	notExpiredCreditCard := CreditCard 
		withNumber: '1111222211112222' 
		of: juanFerrino 
		expiringOn: (Month month: today monthIndex year: today yearNumber + 1).
	juanFerrinoClientInfo := ClientInformation 
		for: juanFerrino 
		authenticatedWith: commonPassword 
		payingWith: notExpiredCreditCard.
		
	expiredCreditCard := CreditCard 
		withNumber: '8888222288882222' 
		of: noraTrinchero 
		expiringOn: (Month month: today monthIndex year: today yearNumber - 1).
	noraTrincheroClientInfo := ClientInformation 
		for: noraTrinchero 
		authenticatedWith: commonPassword 
		payingWith:  expiredCreditCard.
		
	^ Dictionary new
		at: juanFerrino put: juanFerrinoClientInfo;
		at: noraTrinchero put: noraTrincheroClientInfo;
		yourself! !
!TusLibrosDefaultFactory methodsFor: 'factory protocol' stamp: 'JPF 7/7/2021 21:59:46' prior: 50962285 overrides: 50961880!
createValidUsersAndClientInformation

	| commonPassword juanFerrino noraTrinchero today notExpiredCreditCard 
	juanFerrinoClientInfo expiredCreditCard noraTrincheroClientInfo |
	
	juanFerrino := 'Juan Ferrino'.
	noraTrinchero := 'Nora Trinchero'.
	commonPassword := '1234'.
	
	today := DateAndTime now.

	notExpiredCreditCard := CreditCard 
		withNumber: '1111222211112222' 
		of: juanFerrino 
		expiringOn: (Month month: today monthIndex year: today yearNumber + 1).
	juanFerrinoClientInfo := ClientInformation 
		for: juanFerrino 
		authenticatedWith: commonPassword 
		payingWith: notExpiredCreditCard.
		
	expiredCreditCard := CreditCard 
		withNumber: '8888222288882222' 
		of: noraTrinchero 
		expiringOn: (Month month: today monthIndex year: today yearNumber - 1).
	noraTrincheroClientInfo := ClientInformation 
		for: noraTrinchero 
		authenticatedWith: commonPassword 
		payingWith:  expiredCreditCard.
		
	^ Dictionary new
		at: juanFerrino put: juanFerrinoClientInfo;
		at: noraTrinchero put: noraTrincheroClientInfo;
		yourself! !
!TusLibrosRestInterface methodsFor: 'handlers' stamp: 'JPF 7/7/2021 22:01:41' prior: 50960600!
handleCheckOutCart: request

	self handle: request with: [	 | cartId ticket response |	
		
		cartId := self getParameter: 'cartId' from: request.
		
		ticket := tusLibrosSystemFacade
			checkOutCartIdentifiedAs: cartId asNumber
			.
		response := Mapper mapTicketToResponse: ticket.
		
		request send200Response: (WebUtils jsonEncode: response).
	]! !

----SNAPSHOT----(7 July 2021 22:02:32) Interfaz.image priorSource: 20107886!

server destroy.!

server := TusLibrosRestInterface listeningOn: 8080.!
!TusLibrosDefaultFactory methodsFor: 'factory protocol' stamp: 'JPF 7/7/2021 22:04:01' prior: 50962322 overrides: 50961880!
createValidUsersAndClientInformation

	| commonPassword juanFerrino noraTrinchero today notExpiredCreditCard 
	juanFerrinoClientInfo expiredCreditCard noraTrincheroClientInfo |
	
	juanFerrino := 'Juan Ferrino'.
	noraTrinchero := 'Nora Trinchero'.
	commonPassword := '1234'.
	
	today := DateAndTime now.

	notExpiredCreditCard := CreditCard 
		withNumber: 1111222211112222
		of: juanFerrino 
		expiringOn: (Month month: today monthIndex year: today yearNumber + 1).
	juanFerrinoClientInfo := ClientInformation 
		for: juanFerrino 
		authenticatedWith: commonPassword 
		payingWith: notExpiredCreditCard.
		
	expiredCreditCard := CreditCard 
		withNumber: 8888222288882222
		of: noraTrinchero 
		expiringOn: (Month month: today monthIndex year: today yearNumber - 1).
	noraTrincheroClientInfo := ClientInformation 
		for: noraTrinchero 
		authenticatedWith: commonPassword 
		payingWith:  expiredCreditCard.
		
	^ Dictionary new
		at: juanFerrino put: juanFerrinoClientInfo;
		at: noraTrinchero put: noraTrincheroClientInfo;
		yourself! !

server := TusLibrosRestInterface listeningOn: 8080.!

loginWindow := LoginWindow open.!
!MarketModel methodsFor: 'error management' stamp: 'JPF 7/7/2021 22:07:33' prior: 50959644!
doSignalingError: aClosure

	[^ aClosure value ] on: Error do: [ :error |
		self halt.
		self errorMessage: error messageText.
		self triggerEvent: #errorOccurred with: self.
		]
	! !
!MarketModel methodsFor: 'error management' stamp: 'JPF 7/7/2021 22:08:49' prior: 50962417!
doSignalingError: aClosure

	[^ aClosure value ] on: Error do: [ :error |
		
		self errorMessage: error messageText.
		self triggerEvent: #errorOccurred with: self.
		]
	! !
!MarketWindow methodsFor: 'initialization' stamp: 'JPF 7/7/2021 22:09:35' prior: 50960008!
initializeTitled: aTitle withModel: aModel

	self titleMorph showButtonsNamed: #( close collapse ).
	self setLabel: aTitle.
	self model: aModel.
	self morphExtent: (self defaultExtent).
	self buildMorphicWindow.
	
	self openInWorld.
	
	self model when: #cartHasChanged send: #refreshCart to: self.
	self model when: #purchaseDone send: #openTicketWindow to: self.
	self model when: #errorOccurred send: #openErrorWindow to: self.! !

loginWindow := LoginWindow open.!
!MarketModel methodsFor: 'error management' stamp: 'JPF 7/7/2021 22:10:50'!
doSignalingLoginError: aClosure

	[^ aClosure value ] on: Error do: [ :error |
		
		self errorMessage: error messageText.
		self triggerEvent: #errorOccurred with: self.
		]
	! !
!MarketModel methodsFor: 'error management' stamp: 'JPF 7/7/2021 22:11:01' prior: 50962452!
doSignalingLoginError: aClosure

	[^ aClosure value ] on: Error do: [ :error |
		
		self errorMessage: error messageText.
		self triggerEvent: #loginErrorOccurred with: self.
		]
	! !
!MarketModel methodsFor: 'error management' stamp: 'JPF 7/7/2021 22:11:16'!
doSignalingMarketError: aClosure

	[^ aClosure value ] on: Error do: [ :error |
		
		self errorMessage: error messageText.
		self triggerEvent: #marketErrorOccurred with: self.
		]
	! !
!MarketModel methodsFor: 'error management' stamp: 'JPF 7/7/2021 22:12:33' prior: 50962426!
doSignalingError: aClosure

	[^ aClosure value ] on: Error do: [ :error |
		
		self errorMessage: error messageText.
		self triggerEvent: #marketErrorOccurred with: self.
		]
	! !

!methodRemoval: MarketModel #doSignalingError: stamp: 'JPF 7/7/2021 22:12:41'!
doSignalingError: aClosure

	[^ aClosure value ] on: Error do: [ :error |
		
		self errorMessage: error messageText.
		self triggerEvent: #marketErrorOccurred with: self.
		]
	!
!MarketModel methodsFor: 'actions' stamp: 'JPF 7/7/2021 22:12:57' prior: 50959800!
addToCart

	self doSignalingMarketError: [ | aProduct  |
		
		aProduct := self selectedProductFromCatalog.
		
		restInterface sendAddToCartRequestFor: quantityToAdd of: aProduct in: cartId.
		
		self listCartCart.
		]


! !
!MarketModel methodsFor: 'actions' stamp: 'JPF 7/7/2021 22:13:09' prior: 50959781!
checkOut

	self doSignalingMarketError: [ | ticket ticketTotal |
	
		ticket := restInterface sendCheckOutRequestFor: cartId.
		
		ticketList removeAll.
		
		ticketTotal := 0.
		
		ticket do: [ :itemAndTotal | | total | 
			total := itemAndTotal at: 'total'.
			ticketList add: (itemAndTotal at: 'item') , '    $' , total asString.
			ticketTotal := ticketTotal + total.
			].
		ticketList add: 'Total:    $' , ticketTotal asString.
		
		self cleanCart.
		
		self triggerEvent: #purchaseDone with: self.
	]
	
	! !
!MarketModel methodsFor: 'actions' stamp: 'JPF 7/7/2021 22:13:15' prior: 50959810!
listCartCart

	self doSignalingMarketError: [ |  cartDictionary |
	
		cartDictionary := restInterface sendListCartRequestFor: cartId.
		
		cartList removeAll.	
		cartDictionary keysAndValuesDo: [ :key :value | cartList add: {key. value}].
		
		self triggerEvent: #cartHasChanged with: self.
	]
	
	

! !
!MarketModel methodsFor: 'actions' stamp: 'JPF 7/7/2021 22:13:22' prior: 50959843!
listPurchases

	self doSignalingMarketError: [ | purchaseHistoryDictionary items total |
	
		purchaseHistoryList removeAll.
		
		purchaseHistoryDictionary := restInterface sendListPurchasesRequestFor: clientId authenticatedWith: password.
		
		items := purchaseHistoryDictionary at: 'items'.
		total := purchaseHistoryDictionary at: 'total'.
		
		items do: [ :itemAndQuantity | purchaseHistoryList add: (itemAndQuantity at: 'item') , '    ' , (itemAndQuantity at: 'quantity') asString ].
		purchaseHistoryList add: ('Total:   $' , total asString ).
		
		PurchaseHistoryWindow openWith: self.
	]
	
	! !
!MarketModel methodsFor: 'error management' stamp: 'JPF 7/7/2021 22:15:16' prior: 50962470!
doSignalingMarketError: aClosure

	[^ aClosure value ] on: Error do: [ :error |
		
		self errorMessage: error messageText.
		self triggerEvent: #errorOccurred with: self.
		]
	! !
!MarketModel methodsFor: 'error management' stamp: 'JPF 7/7/2021 22:15:21'!
doSignalingError: aClosure

	[^ aClosure value ] on: Error do: [ :error |
		
		self errorMessage: error messageText.
		self triggerEvent: #errorOccurred with: self.
		]
	! !
!MarketModel methodsFor: 'actions' stamp: 'JPF 7/7/2021 22:15:32' prior: 50962496!
addToCart

	self doSignalingError: [ | aProduct  |
		
		aProduct := self selectedProductFromCatalog.
		
		restInterface sendAddToCartRequestFor: quantityToAdd of: aProduct in: cartId.
		
		self listCartCart.
		]


! !
!MarketModel methodsFor: 'actions' stamp: 'JPF 7/7/2021 22:15:37' prior: 50962506!
checkOut

	self doSignalingError: [ | ticket ticketTotal |
	
		ticket := restInterface sendCheckOutRequestFor: cartId.
		
		ticketList removeAll.
		
		ticketTotal := 0.
		
		ticket do: [ :itemAndTotal | | total | 
			total := itemAndTotal at: 'total'.
			ticketList add: (itemAndTotal at: 'item') , '    $' , total asString.
			ticketTotal := ticketTotal + total.
			].
		ticketList add: 'Total:    $' , ticketTotal asString.
		
		self cleanCart.
		
		self triggerEvent: #purchaseDone with: self.
	]
	
	! !
!MarketModel methodsFor: 'actions' stamp: 'JPF 7/7/2021 22:15:43' prior: 50962525!
listCartCart

	self doSignalingError: [ |  cartDictionary |
	
		cartDictionary := restInterface sendListCartRequestFor: cartId.
		
		cartList removeAll.	
		cartDictionary keysAndValuesDo: [ :key :value | cartList add: {key. value}].
		
		self triggerEvent: #cartHasChanged with: self.
	]
	
	

! !
!MarketModel methodsFor: 'actions' stamp: 'JPF 7/7/2021 22:15:49' prior: 50962538!
listPurchases

	self doSignalingError: [ | purchaseHistoryDictionary items total |
	
		purchaseHistoryList removeAll.
		
		purchaseHistoryDictionary := restInterface sendListPurchasesRequestFor: clientId authenticatedWith: password.
		
		items := purchaseHistoryDictionary at: 'items'.
		total := purchaseHistoryDictionary at: 'total'.
		
		items do: [ :itemAndQuantity | purchaseHistoryList add: (itemAndQuantity at: 'item') , '    ' , (itemAndQuantity at: 'quantity') asString ].
		purchaseHistoryList add: ('Total:   $' , total asString ).
		
		PurchaseHistoryWindow openWith: self.
	]
	
	! !
!MarketWindow methodsFor: 'initialization' stamp: 'JPF 7/7/2021 22:16:57' prior: 50962435!
initializeTitled: aTitle withModel: aModel

	self titleMorph showButtonsNamed: #( close collapse ).
	self setLabel: aTitle.
	self model: aModel.
	self morphExtent: (self defaultExtent).
	self buildMorphicWindow.
	
	self openInWorld.
	
	self model when: #cartHasChanged send: #refreshCart to: self.
	self model when: #purchaseDone send: #openTicketWindow to: self.! !

loginWindow := LoginWindow open.!

loginWindow := LoginWindow open.!

!classRemoval: #MarketResponseMapper stamp: 'JPF 7/7/2021 22:21:37'!
Object subclass: #MarketResponseMapper
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Client'!

str := '<html><head><title>400 Bad Request</title></head><body><h1>400 Bad Request</h1><p>Can not check out an empty cart</p></body></html>'.!

str findBetweenSubStrs: {'<p>'. '</p>'}!

(str findBetweenSubStrs: {'<p>'. '</p>'}) at: 2!
!MarketRestInterface methodsFor: 'requests' stamp: 'JPF 7/7/2021 22:45:53'!
handleResponse: response

	response isSuccess 
		ifTrue:[ ^WebUtils jsonDecode: ((response content) readStream). ] 
		ifFalse:[ ^self error: response content ].! !
!MarketRestInterface methodsFor: 'requests' stamp: 'JPF 7/7/2021 22:46:51' prior: 50958847!
sendCheckOutRequestFor: aCartId

	| fieldDict response |

	fieldDict := Dictionary with: ('cartId'->aCartId ).

	response := WebClient htmlSubmit: (self url,'/checkOutCart') fields: fieldDict.
	
	^ self handleResponse: response.! !
!MarketRestInterface methodsFor: 'requests' stamp: 'JPF 7/7/2021 22:47:03' prior: 50956995!
sendCreateCartRequestFor: aClientId authenticatedWith: aPassword

	| fieldDict response urlEncodedClientId urlEncodedPassword |

	urlEncodedClientId := self 
		correctlyEncodeSpacesForUrlRequestParameter: aClientId.	
	urlEncodedPassword := self
		correctlyEncodeSpacesForUrlRequestParameter: aPassword.
	fieldDict := Dictionary 
		with: ('clientId'->urlEncodedClientId)
		with: ('password'->urlEncodedPassword).
	
	response := WebClient htmlSubmit: (self url,'/createCart') fields: fieldDict method: 'POST'.
	
	^ self handleResponse: response.! !
!MarketRestInterface methodsFor: 'requests' stamp: 'JPF 7/7/2021 22:47:11' prior: 50957453!
sendListCartRequestFor: aCartId

	| fieldDict response urlEncodedCartId |

	urlEncodedCartId := aCartId.
	fieldDict := Dictionary with: ('cartId'->urlEncodedCartId ).

	response := WebClient htmlSubmit: (self url,'/listCart') fields: fieldDict.
	
	^ self handleResponse: response.! !
!MarketRestInterface methodsFor: 'requests' stamp: 'JPF 7/7/2021 22:47:18' prior: 50956050!
sendListCatalogRequest

	| response |
	
	response := WebClient htmlSubmit: (self url,'/listCatalog') fields: Dictionary new.
	
	^ self handleResponse: response.! !
!MarketRestInterface methodsFor: 'requests' stamp: 'JPF 7/7/2021 22:47:31' prior: 50958037!
sendListPurchasesRequestFor: aClientId authenticatedWith: aPassword

	| fieldDict response urlEncodedClientId urlEncodedPassword |

	urlEncodedClientId := self 
		correctlyEncodeSpacesForUrlRequestParameter: aClientId.	
	urlEncodedPassword := self
		correctlyEncodeSpacesForUrlRequestParameter: aPassword.
	fieldDict := Dictionary 
		with: ('clientId'->urlEncodedClientId)
		with: ('password'->urlEncodedPassword).
	
	response := WebClient htmlSubmit: (self url,'/listPurchases') fields: fieldDict.
	
	^ self handleResponse: response.! !
!MarketRestInterface methodsFor: 'utils' stamp: 'JPF 7/7/2021 22:48:51' prior: 50962671!
handleResponse: response

	response isSuccess 
		ifTrue:[ ^WebUtils jsonDecode: ((response content) readStream). ] 
		ifFalse:[ ^self error: (self errorMessageFromHtml: response content) ].! !
!MarketRestInterface methodsFor: 'utils' stamp: 'JPF 7/7/2021 22:49:28'!
errorMessageFromHtml: htmlText

! !
!MarketRestInterface methodsFor: 'utils' stamp: 'JPF 7/7/2021 22:49:33' prior: 50962759!
errorMessageFromHtml: htmlText

	! !
!MarketRestInterface methodsFor: 'utils' stamp: 'JPF 7/7/2021 22:50:42' prior: 50962763!
errorMessageFromHtml: htmlText

	| textSeparatedByParagraphs |
	textSeparatedByParagraphs := htmlText findBetweenSubStrs: {'<p>'. '</p>'}.! !
!MarketRestInterface methodsFor: 'utils' stamp: 'JPF 7/7/2021 22:51:56' prior: 50962767!
errorMessageFromHtml: htmlText

	| textSeparatedByParagraphs |
	
	textSeparatedByParagraphs := htmlText findBetweenSubStrs: {'<p>'. '</p>'}.
	textSeparatedByParagraphs size > 1 
		ifTrue: [^ textSeparatedByParagraphs at: 2]
		ifFalse: [^ htmlText ]! !
!MarketRestInterface methodsFor: 'utils' stamp: 'JPF 7/7/2021 22:53:46'!
handleJsonResponse: response

	response isSuccess 
		ifTrue:[ ^WebUtils jsonDecode: ((response content) readStream). ] 
		ifFalse:[ ^self error: (self errorMessageFromHtml: response content) ].! !
!MarketRestInterface methodsFor: 'as yet unclassified' stamp: 'JPF 7/7/2021 22:53:46' prior: 50962679!
sendCheckOutRequestFor: aCartId

	| fieldDict response |

	fieldDict := Dictionary with: ('cartId'->aCartId ).

	response := WebClient htmlSubmit: (self url,'/checkOutCart') fields: fieldDict.
	
	^ self handleJsonResponse: response.! !
!MarketRestInterface methodsFor: 'as yet unclassified' stamp: 'JPF 7/7/2021 22:53:46' prior: 50962730!
sendListPurchasesRequestFor: aClientId authenticatedWith: aPassword

	| fieldDict response urlEncodedClientId urlEncodedPassword |

	urlEncodedClientId := self 
		correctlyEncodeSpacesForUrlRequestParameter: aClientId.	
	urlEncodedPassword := self
		correctlyEncodeSpacesForUrlRequestParameter: aPassword.
	fieldDict := Dictionary 
		with: ('clientId'->urlEncodedClientId)
		with: ('password'->urlEncodedPassword).
	
	response := WebClient htmlSubmit: (self url,'/listPurchases') fields: fieldDict.
	
	^ self handleJsonResponse: response.! !
!MarketRestInterface methodsFor: 'as yet unclassified' stamp: 'JPF 7/7/2021 22:53:46' prior: 50962690!
sendCreateCartRequestFor: aClientId authenticatedWith: aPassword

	| fieldDict response urlEncodedClientId urlEncodedPassword |

	urlEncodedClientId := self 
		correctlyEncodeSpacesForUrlRequestParameter: aClientId.	
	urlEncodedPassword := self
		correctlyEncodeSpacesForUrlRequestParameter: aPassword.
	fieldDict := Dictionary 
		with: ('clientId'->urlEncodedClientId)
		with: ('password'->urlEncodedPassword).
	
	response := WebClient htmlSubmit: (self url,'/createCart') fields: fieldDict method: 'POST'.
	
	^ self handleJsonResponse: response.! !
!MarketRestInterface methodsFor: 'as yet unclassified' stamp: 'JPF 7/7/2021 22:53:46' prior: 50962710!
sendListCartRequestFor: aCartId

	| fieldDict response urlEncodedCartId |

	urlEncodedCartId := aCartId.
	fieldDict := Dictionary with: ('cartId'->urlEncodedCartId ).

	response := WebClient htmlSubmit: (self url,'/listCart') fields: fieldDict.
	
	^ self handleJsonResponse: response.! !
!MarketRestInterface methodsFor: 'as yet unclassified' stamp: 'JPF 7/7/2021 22:53:46' prior: 50962722!
sendListCatalogRequest

	| response |
	
	response := WebClient htmlSubmit: (self url,'/listCatalog') fields: Dictionary new.
	
	^ self handleJsonResponse: response.! !

!methodRemoval: MarketRestInterface #handleResponse: stamp: 'JPF 7/7/2021 22:53:46'!
handleResponse: response

	response isSuccess 
		ifTrue:[ ^WebUtils jsonDecode: ((response content) readStream). ] 
		ifFalse:[ ^self error: (self errorMessageFromHtml: response content) ].!
!MarketRestInterface methodsFor: 'utils' stamp: 'JPF 7/7/2021 22:53:58'!
handleTextResponse: response

	response isSuccess 
		ifTrue:[ ^WebUtils jsonDecode: ((response content) readStream). ] 
		ifFalse:[ ^self error: (self errorMessageFromHtml: response content) ].! !
!MarketRestInterface methodsFor: 'utils' stamp: 'JPF 7/7/2021 22:54:15' prior: 50962879!
handleTextResponse: response

	response isSuccess 
		ifTrue:[ ^ (response content) readStream. ] 
		ifFalse:[ ^self error: (self errorMessageFromHtml: response content) ].! !
!MarketRestInterface methodsFor: 'requests' stamp: 'JPF 7/7/2021 22:54:40' prior: 50957425!
sendAddToCartRequestFor: aQuantity of: aProduct in: aCartId

	| fieldDict response urlEncodedQuantity urlEncodedProduct urlEncodedCartId |

	urlEncodedQuantity := self 
		correctlyEncodeSpacesForUrlRequestParameter: aQuantity asString.	
	urlEncodedProduct := self
		correctlyEncodeSpacesForUrlRequestParameter: aProduct.
	urlEncodedCartId := aCartId asString .
	fieldDict := Dictionary 
		with: ('quantity'->urlEncodedQuantity)
		with: ('product'->urlEncodedProduct)
		with: ('cartId'->urlEncodedCartId ).
	
	response := WebClient htmlSubmit: (self url,'/addToCart') fields: fieldDict method: 'POST'.
	
	self handleTextResponse: response ! !
!MarketRestInterface methodsFor: 'requests' stamp: 'JPF 7/7/2021 22:54:43' prior: 50962897!
sendAddToCartRequestFor: aQuantity of: aProduct in: aCartId

	| fieldDict response urlEncodedQuantity urlEncodedProduct urlEncodedCartId |

	urlEncodedQuantity := self 
		correctlyEncodeSpacesForUrlRequestParameter: aQuantity asString.	
	urlEncodedProduct := self
		correctlyEncodeSpacesForUrlRequestParameter: aProduct.
	urlEncodedCartId := aCartId asString .
	fieldDict := Dictionary 
		with: ('quantity'->urlEncodedQuantity)
		with: ('product'->urlEncodedProduct)
		with: ('cartId'->urlEncodedCartId ).
	
	response := WebClient htmlSubmit: (self url,'/addToCart') fields: fieldDict method: 'POST'.
	
	self handleTextResponse: response! !
!MarketRestInterface methodsFor: 'requests' stamp: 'JPF 7/7/2021 22:54:59' prior: 50957708!
sendRemoveFromCartRequestFor: aProduct in: aCartId

	| fieldDict response urlEncodedProduct urlEncodedCartId |

	urlEncodedProduct := self
		correctlyEncodeSpacesForUrlRequestParameter: aProduct.
	urlEncodedCartId := aCartId asString.
	
	fieldDict := Dictionary 
		with: ('product'->urlEncodedProduct)
		with: ('cartId'->urlEncodedCartId).
	
	response := WebClient htmlSubmit: (self url,'/removeFromCart') fields: fieldDict method: 'POST'.
	
	self handleTextResponse: response! !
!MarketModel methodsFor: 'actions' stamp: 'JPF 7/7/2021 22:57:44' prior: 50962577!
addToCart

	self doSignalingError: [ | aProduct  |
		
		aProduct := self selectedProductFromCatalog.
		
		self assertIsPositiveInteger: quantityToAdd.
		
		restInterface sendAddToCartRequestFor: quantityToAdd of: aProduct in: cartId.
		
		self listCartCart.
		]


! !
!MarketModel methodsFor: 'actions' stamp: 'JPF 7/7/2021 22:58:39'!
assertIsPositiveInteger: value
! !
!MarketRestInterface methodsFor: 'requests' stamp: 'JPF 7/7/2021 23:00:16' prior: 50962920!
sendAddToCartRequestFor: aQuantity of: aProduct in: aCartId

	| fieldDict response  urlEncodedProduct |

	urlEncodedProduct := self
		correctlyEncodeSpacesForUrlRequestParameter: aProduct.
	fieldDict := Dictionary 
		with: ('quantity'->aQuantity )
		with: ('product'->urlEncodedProduct)
		with: ('cartId'->aCartId ).
	
	response := WebClient htmlSubmit: (self url,'/addToCart') fields: fieldDict method: 'POST'.
	
	self handleTextResponse: response! !
!MarketModel methodsFor: 'actions' stamp: 'JPF 7/7/2021 23:05:24' prior: 50962961!
addToCart

	self doSignalingError: [ | aProduct  |
		
		aProduct := self selectedProductFromCatalog.
		
		self assertIsPositiveInteger: quantityToAdd.
		
		restInterface sendAddToCartRequestFor: (self convertToNumber: quantityToAdd) of: aProduct in: cartId.
		
		self listCartCart.
		]


! !
!MarketModel methodsFor: 'actions' stamp: 'JPF 7/7/2021 23:05:48' prior: 50962993!
addToCart

	self doSignalingError: [ | aProduct  |
		
		aProduct := self selectedProductFromCatalog.
		
		restInterface sendAddToCartRequestFor: (self convertToNumber: quantityToAdd) of: aProduct in: cartId.
		
		self listCartCart.
		]


! !

'1234' asNumber !

'1234.8' asNumber !

1234.8 isInteger !
!MarketModel methodsFor: 'actions' stamp: 'JPF 7/7/2021 23:13:38'!
convertToNumber: value forFieldTitle: title

	| number |
	number := value asNumber.
	(number isInteger not or: [number isNegative ]) ifTrue: [self error: title , ' must be an integer greater than zero']! !
!MarketModel methodsFor: 'actions' stamp: 'JPF 7/7/2021 23:13:50' prior: 50963017!
convertToNumber: value forFieldTitle: title

	| number |
	
	number := value asNumber.
	(number isInteger not or: [number isNegative ]) ifTrue: [self error: title , ' must be an integer greater than zero']! !
!MarketModel methodsFor: 'actions' stamp: 'JPF 7/7/2021 23:13:52' prior: 50963027!
convertToNumber: value forFieldTitle: title

	| number |
	
	number := value asNumber.
	(number isInteger not or: [ number isNegative ]) ifTrue: [self error: title , ' must be an integer greater than zero']! !
!MarketModel methodsFor: 'actions' stamp: 'JPF 7/7/2021 23:14:01' prior: 50963037!
convertToNumber: value forFieldTitle: title

	| number |
	
	number := value asNumber.
	(number isInteger not or: [ number < 0 ]) ifTrue: [self error: title , ' must be an integer greater than zero']! !
!MarketModel methodsFor: 'actions' stamp: 'JPF 7/7/2021 23:14:05' prior: 50963047!
convertToNumber: value forFieldTitle: title

	| number |
	
	number := value asNumber.
	(number isInteger not or: [ number < 0 ]) 
		ifTrue: [self error: title , ' must be an integer greater than zero']! !
!MarketModel methodsFor: 'actions' stamp: 'JPF 7/7/2021 23:15:17' prior: 50963056!
convertToNumber: value forFieldTitle: title

	| number |
	
	[ number := value asNumber.
	(number isInteger not or: [ number < 0 ]) 
		ifTrue: [self error: title , ' must be an integer greater than zero'] ]
	on: Error 
	do: [:error | self error: title , ' must be an integer greater than zero' ]! !
!MarketModel methodsFor: 'actions' stamp: 'JPF 7/7/2021 23:16:43' prior: 50963065!
convertToNumber: value forFieldTitle: title

	| number errorMsg |
	
	errorMsg := title , ' must be an integer greater than zero'.
	
	[ number := value asNumber.
	(number isInteger not or: [ number < 0 ]) 
		ifTrue: [self error: errorMsg ] ]
	on: Error 
	do: [:error | self error: title , ' must be an integer greater than zero' ]! !
!MarketModel methodsFor: 'actions' stamp: 'JPF 7/7/2021 23:16:57' prior: 50963077!
convertToNumber: value forFieldTitle: title

	| number errorMsg |
	
	errorMsg := title , ' must be an integer greater than zero'.
	
	[ number := value asNumber.
	(number isInteger not or: [ number < 0 ]) 
		ifTrue: [self error: errorMsg ] ]
	on: Error 
	do: [:error | self error: errorMsg ]! !
!MarketModel methodsFor: 'actions' stamp: 'JPF 7/7/2021 23:18:23' prior: 50963005!
addToCart

	self doSignalingError: [ | aProduct  |
		
		aProduct := self selectedProductFromCatalog.
		
		restInterface sendAddToCartRequestFor: (self convertToNumber: quantityToAdd) of: aProduct in: cartId.
		
		self listCartCart.
		]


! !
!MarketModel methodsFor: 'actions' stamp: 'JPF 7/7/2021 23:18:40'!
convertToNumber: value

	| number errorMsg |
	
	errorMsg := ' must be an integer greater than zero'.
	
	[ number := value asNumber.
	(number isInteger not or: [ number < 1 ]) 
		ifTrue: [self error: errorMsg ] ]
	on: Error 
	do: [:error | self error: errorMsg ]! !
!MarketModel methodsFor: 'actions' stamp: 'JPF 7/7/2021 23:18:54' prior: 50963112!
convertToNumber: value

	| number errorMsg |
	
	errorMsg := 'value must be an integer greater than zero'.
	
	[ number := value asNumber.
	(number isInteger not or: [ number < 1 ]) 
		ifTrue: [self error: errorMsg ] ]
	on: Error 
	do: [:error | self error: errorMsg ]! !

loginWindow := LoginWindow open.!
!MarketRestInterface methodsFor: 'requests' stamp: 'JPF 7/7/2021 23:21:58' prior: 50962976!
sendAddToCartRequestFor: aQuantity of: aProduct in: aCartId

	| fieldDict response  urlEncodedProduct |

	urlEncodedProduct := self
		correctlyEncodeSpacesForUrlRequestParameter: aProduct.
	fieldDict := Dictionary 
		with: ('quantity'->aQuantity asString)
		with: ('product'->urlEncodedProduct)
		with: ('cartId'->aCartId ).
	
	response := WebClient htmlSubmit: (self url,'/addToCart') fields: fieldDict method: 'POST'.
	
	self handleTextResponse: response! !
!MarketRestInterface methodsFor: 'requests' stamp: 'JPF 7/7/2021 23:22:32' prior: 50963136!
sendAddToCartRequestFor: aQuantity of: aProduct in: aCartId

	| fieldDict response  urlEncodedProduct |

	urlEncodedProduct := self
		correctlyEncodeSpacesForUrlRequestParameter: aProduct.
	fieldDict := Dictionary 
		with: ('quantity'->aQuantity asNumber)
		with: ('product'->urlEncodedProduct)
		with: ('cartId'->aCartId).
	
	response := WebClient htmlSubmit: (self url,'/addToCart') fields: fieldDict method: 'POST'.
	
	self handleTextResponse: response! !
!MarketRestInterface methodsFor: 'requests' stamp: 'JPF 7/7/2021 23:22:54' prior: 50963154!
sendAddToCartRequestFor: aQuantity of: aProduct in: aCartId

	| fieldDict response  urlEncodedProduct |

	urlEncodedProduct := self
		correctlyEncodeSpacesForUrlRequestParameter: aProduct.
	fieldDict := Dictionary 
		with: ('quantity'->aQuantity)
		with: ('product'->urlEncodedProduct)
		with: ('cartId'->aCartId).
	
	response := WebClient htmlSubmit: (self url,'/addToCart') fields: fieldDict method: 'POST'.
	
	self handleTextResponse: response! !
!MarketRestInterface methodsFor: 'requests' stamp: 'JPF 7/7/2021 23:22:59' prior: 50963172!
sendAddToCartRequestFor: aQuantity of: aProduct in: aCartId

	| fieldDict response  urlEncodedProduct |

	urlEncodedProduct := self
		correctlyEncodeSpacesForUrlRequestParameter: aProduct.
	fieldDict := Dictionary 
		with: ('quantity'->aQuantity asString)
		with: ('product'->urlEncodedProduct)
		with: ('cartId'->aCartId).
	
	response := WebClient htmlSubmit: (self url,'/addToCart') fields: fieldDict method: 'POST'.
	
	self handleTextResponse: response! !
!MarketRestInterface methodsFor: 'requests' stamp: 'JPF 7/7/2021 23:23:48' prior: 50963189!
sendAddToCartRequestFor: aQuantity of: aProduct in: aCartId

	| fieldDict response  urlEncodedProduct |

	urlEncodedProduct := self
		correctlyEncodeSpacesForUrlRequestParameter: aProduct.
	fieldDict := Dictionary 
		with: ('quantity'->aQuantity asString)
		with: ('product'->urlEncodedProduct)
		with: ('cartId'->aCartId asString).
	
	response := WebClient htmlSubmit: (self url,'/addToCart') fields: fieldDict method: 'POST'.
	
	self handleTextResponse: response! !

loginWindow := LoginWindow open.!
!MarketRestInterface methodsFor: 'requests' stamp: 'JPF 7/7/2021 23:26:03' prior: 50962849!
sendListCartRequestFor: aCartId

	| fieldDict response |

	fieldDict := Dictionary with: ('cartId'->aCartId ).

	response := WebClient htmlSubmit: (self url,'/listCart') fields: fieldDict.
	
	^ self handleJsonResponse: response.! !
!MarketRestInterface methodsFor: 'requests' stamp: 'JPF 7/7/2021 23:27:12' prior: 50963207!
sendAddToCartRequestFor: aQuantity of: aProduct in: aCartId

	| fieldDict response  urlEncodedProduct |
	self halt.

	urlEncodedProduct := self
		correctlyEncodeSpacesForUrlRequestParameter: aProduct.
	fieldDict := Dictionary 
		with: ('quantity'->aQuantity asString)
		with: ('product'->urlEncodedProduct)
		with: ('cartId'->aCartId asString).
	
	response := WebClient htmlSubmit: (self url,'/addToCart') fields: fieldDict method: 'POST'.
	
	self handleTextResponse: response! !

loginWindow := LoginWindow open.!
!MarketModel methodsFor: 'actions' stamp: 'JPF 7/7/2021 23:28:55' prior: 50963123!
convertToNumber: value

	| number errorMsg |
	
	errorMsg := 'value must be an integer greater than zero'.
	
	[ number := value asNumber.
	(number isInteger not or: [ number < 1 ]) 
		ifTrue: [self error: errorMsg ] ]
	on: Error 
	do: [:error | self error: errorMsg ].
	
	^ number! !

loginWindow := LoginWindow open.!
!MarketRestInterface methodsFor: 'requests' stamp: 'JPF 7/7/2021 23:29:19' prior: 50963237!
sendAddToCartRequestFor: aQuantity of: aProduct in: aCartId

	| fieldDict response  urlEncodedProduct |

	urlEncodedProduct := self
		correctlyEncodeSpacesForUrlRequestParameter: aProduct.
	fieldDict := Dictionary 
		with: ('quantity'->aQuantity asString)
		with: ('product'->urlEncodedProduct)
		with: ('cartId'->aCartId asString).
	
	response := WebClient htmlSubmit: (self url,'/addToCart') fields: fieldDict method: 'POST'.
	
	self handleTextResponse: response! !

!methodRemoval: MarketModel #convertToNumber:forFieldTitle: stamp: 'JPF 7/7/2021 23:32:06'!
convertToNumber: value forFieldTitle: title

	| number errorMsg |
	
	errorMsg := title , ' must be an integer greater than zero'.
	
	[ number := value asNumber.
	(number isInteger not or: [ number < 0 ]) 
		ifTrue: [self error: errorMsg ] ]
	on: Error 
	do: [:error | self error: errorMsg ]!
!MarketModel methodsFor: 'as yet unclassified' stamp: 'JPF 7/7/2021 23:33:55' prior: 50957612!
selectedProductFromCart

	cartList isEmpty ifTrue: [ self error: self class cartIsEmptyErrorDescription ].

	^ (cartList at: cartListIndex) at: 1.! !
!MarketModel methodsFor: 'as yet unclassified' stamp: 'JPF 7/7/2021 23:35:19' prior: 50963299!
selectedProductFromCart

	cartList isEmpty ifTrue: [ self error: self class cartIsEmptyErrorDescription ].
	cartListIndex < 1 ifTrue: [ self error: self class noSelectedCartItem ].

	^ (cartList at: cartListIndex) at: 1.! !
!MarketModel class methodsFor: 'error descriptions' stamp: 'JPF 7/7/2021 23:36:05'!
cartIsEmptyErrorDescription
	
	^ 'The cart is empty'! !
!MarketModel class methodsFor: 'error descriptions' stamp: 'JPF 7/7/2021 23:36:37'!
noSelectedCartItemErrorDescription

	^ 'No selected cart item'! !
!MarketModel methodsFor: 'as yet unclassified' stamp: 'JPF 7/7/2021 23:37:00' prior: 50963307!
selectedProductFromCart

	cartList isEmpty ifTrue: [ self error: self class cartIsEmptyErrorDescription ].
	cartListIndex < 1 ifTrue: [ self error: self class noSelectedCartItemErrorDescription ].

	^ (cartList at: cartListIndex) at: 1.! !

loginWindow := LoginWindow open.!
!MarketModel methodsFor: 'as yet unclassified' stamp: 'JPF 7/7/2021 23:38:37' prior: 50957629!
selectedProductFromCatalog

	catalogList isEmpty ifTrue: [ self error: self class catalogIsEmptyErrorDescription ].
	catalogListIndex < 1 ifTrue: [ self error: self class noSelectedCatalogItemErrorDescription ].

	^ (catalogList at: catalogListIndex) at: 1.! !
!MarketModel class methodsFor: 'error descriptions' stamp: 'JPF 7/7/2021 23:38:53'!
catalogIsEmptyErrorDescription
	
	^ 'The catalog is empty'! !
!MarketModel class methodsFor: 'error descriptions' stamp: 'JPF 7/7/2021 23:39:07'!
noSelectedCatalogItemErrorDescription

	^ 'No selected catalog item'! !

loginWindow := LoginWindow open.!

!methodRemoval: MarketModel #assertIsPositiveInteger: stamp: 'JPF 7/7/2021 23:43:50'!
assertIsPositiveInteger: value
!
!MarketModel methodsFor: 'actions' stamp: 'JPF 7/7/2021 23:46:33'!
acceptTicketResponse: ticket 
	
	| ticketTotal |
	
	ticketList removeAll.
	
	ticketTotal := 0.
	
	ticket do: [ :itemAndTotal | | total | 
		total := itemAndTotal at: 'total'.
		ticketList add: (itemAndTotal at: 'item') , '    $' , total asString.
		ticketTotal := ticketTotal + total.
		].
	ticketList add: 'Total:    $' , ticketTotal asString.
	
	! !
!MarketModel methodsFor: 'actions' stamp: 'JPF 7/7/2021 23:47:22' prior: 50962587!
checkOut

	self doSignalingError: [ | ticket |
	
		ticket := restInterface sendCheckOutRequestFor: cartId.
		
		self acceptTicketResponse: ticket.
		
		self cleanCart.
		
		self triggerEvent: #purchaseDone with: self.
	]
	
	! !
!MarketModel methodsFor: 'actions' stamp: 'JPF 7/7/2021 23:49:17'!
acceptPurchasesResponse: purchaseHistoryDictionary

	|  items total |
	
	purchaseHistoryList removeAll.
	
	items := purchaseHistoryDictionary at: 'items'.
	total := purchaseHistoryDictionary at: 'total'.
	
	items do: [ :itemAndQuantity | purchaseHistoryList add: (itemAndQuantity at: 'item') , '    ' , (itemAndQuantity at: 'quantity') asString ].
	purchaseHistoryList add: ('Total:   $' , total asString ).

	! !
!MarketModel methodsFor: 'actions' stamp: 'JPF 7/7/2021 23:49:40' prior: 50962618!
listPurchases

	self doSignalingError: [ | purchaseHistoryDictionary |
	
		purchaseHistoryList removeAll.
		
		purchaseHistoryDictionary := restInterface sendListPurchasesRequestFor: clientId authenticatedWith: password.
		
		self acceptPurchasesResponse: purchaseHistoryDictionary.
		
		PurchaseHistoryWindow openWith: self.
	]
	
	! !
!MarketModel methodsFor: 'actions' stamp: 'JPF 7/7/2021 23:50:51'!
acceptCatalogResponse: catalogDictionary
	
	catalogList removeAll.	
	catalogDictionary keysAndValuesDo: [ :key :value | catalogList add: {key. value}].
! !
!MarketModel methodsFor: 'actions' stamp: 'JPF 7/7/2021 23:51:09' prior: 50959865!
login

	self doSignalingError: [ | catalogDictionary |
	
		cartId := restInterface 
			sendCreateCartRequestFor: clientId 
			authenticatedWith: password.
			
		catalogDictionary := restInterface sendListCatalogRequest.
		
		self acceptCatalogResponse: catalogDictionary.
			
		self triggerEvent: #successfulLogin with: self.
	]! !
!MarketModel methodsFor: 'actions' stamp: 'JPF 7/7/2021 23:52:30'!
mapCatalogResponse: catalogDictionary
	
	catalogList removeAll.	
	catalogDictionary keysAndValuesDo: [ :key :value | catalogList add: {key. value}].
! !
!MarketModel methodsFor: 'as yet unclassified' stamp: 'JPF 7/7/2021 23:52:30' prior: 50963427!
login

	self doSignalingError: [ | catalogDictionary |
	
		cartId := restInterface 
			sendCreateCartRequestFor: clientId 
			authenticatedWith: password.
			
		catalogDictionary := restInterface sendListCatalogRequest.
		
		self mapCatalogResponse: catalogDictionary.
			
		self triggerEvent: #successfulLogin with: self.
	]! !

!methodRemoval: MarketModel #acceptCatalogResponse: stamp: 'JPF 7/7/2021 23:52:30'!
acceptCatalogResponse: catalogDictionary
	
	catalogList removeAll.	
	catalogDictionary keysAndValuesDo: [ :key :value | catalogList add: {key. value}].
!
!MarketModel methodsFor: 'actions' stamp: 'JPF 7/7/2021 23:52:46'!
mapPurchasesResponse: purchaseHistoryDictionary

	|  items total |
	
	purchaseHistoryList removeAll.
	
	items := purchaseHistoryDictionary at: 'items'.
	total := purchaseHistoryDictionary at: 'total'.
	
	items do: [ :itemAndQuantity | purchaseHistoryList add: (itemAndQuantity at: 'item') , '    ' , (itemAndQuantity at: 'quantity') asString ].
	purchaseHistoryList add: ('Total:   $' , total asString ).

	! !
!MarketModel methodsFor: 'as yet unclassified' stamp: 'JPF 7/7/2021 23:52:46' prior: 50963406!
listPurchases

	self doSignalingError: [ | purchaseHistoryDictionary |
	
		purchaseHistoryList removeAll.
		
		purchaseHistoryDictionary := restInterface sendListPurchasesRequestFor: clientId authenticatedWith: password.
		
		self mapPurchasesResponse: purchaseHistoryDictionary.
		
		PurchaseHistoryWindow openWith: self.
	]
	
	! !

!methodRemoval: MarketModel #acceptPurchasesResponse: stamp: 'JPF 7/7/2021 23:52:46'!
acceptPurchasesResponse: purchaseHistoryDictionary

	|  items total |
	
	purchaseHistoryList removeAll.
	
	items := purchaseHistoryDictionary at: 'items'.
	total := purchaseHistoryDictionary at: 'total'.
	
	items do: [ :itemAndQuantity | purchaseHistoryList add: (itemAndQuantity at: 'item') , '    ' , (itemAndQuantity at: 'quantity') asString ].
	purchaseHistoryList add: ('Total:   $' , total asString ).

	!
!MarketModel methodsFor: 'actions' stamp: 'JPF 7/7/2021 23:52:58'!
mapTicketResponse: ticket 
	
	| ticketTotal |
	
	ticketList removeAll.
	
	ticketTotal := 0.
	
	ticket do: [ :itemAndTotal | | total | 
		total := itemAndTotal at: 'total'.
		ticketList add: (itemAndTotal at: 'item') , '    $' , total asString.
		ticketTotal := ticketTotal + total.
		].
	ticketList add: 'Total:    $' , ticketTotal asString.
	
	! !
!MarketModel methodsFor: 'as yet unclassified' stamp: 'JPF 7/7/2021 23:52:58' prior: 50963380!
checkOut

	self doSignalingError: [ | ticket |
	
		ticket := restInterface sendCheckOutRequestFor: cartId.
		
		self mapTicketResponse: ticket.
		
		self cleanCart.
		
		self triggerEvent: #purchaseDone with: self.
	]
	
	! !

!methodRemoval: MarketModel #acceptTicketResponse: stamp: 'JPF 7/7/2021 23:52:58'!
acceptTicketResponse: ticket 
	
	| ticketTotal |
	
	ticketList removeAll.
	
	ticketTotal := 0.
	
	ticket do: [ :itemAndTotal | | total | 
		total := itemAndTotal at: 'total'.
		ticketList add: (itemAndTotal at: 'item') , '    $' , total asString.
		ticketTotal := ticketTotal + total.
		].
	ticketList add: 'Total:    $' , ticketTotal asString.
	
	!

loginWindow := LoginWindow open.!
!MarketWindow class methodsFor: 'instance creation' stamp: 'JPF 7/7/2021 23:57:12'!
openWith: aModel from: aLoginWindow

	^ self new initializeTitled: 'Tus Libros Market' withModel: aModel.! !
!MarketWindow class methodsFor: 'instance creation' stamp: 'JPF 7/7/2021 23:57:24' prior: 50963552!
openWith: aModel from: aLoginWindow

	^ self new initializeTitled: 'Tus Libros Market' withModel: aModel from: aLoginWindow.! !

!classDefinition: #MarketWindow category: #'TusLibros-Client' stamp: 'JPF 7/7/2021 23:58:17'!
Panel subclass: #MarketWindow
	instanceVariableNames: 'catalogListMorph quantityToAddTextBoxMorph cartListMorph loginWindow'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Client'!
!MarketWindow methodsFor: 'initialization' stamp: 'JPF 7/7/2021 23:58:15'!
initializeTitled: aTitle withModel: aModel from: aLoginWindow

	loginWindow := aLoginWindow.

	self titleMorph showButtonsNamed: #( close collapse ).
	self setLabel: aTitle.
	self model: aModel.
	self morphExtent: (self defaultExtent).
	self buildMorphicWindow.
	
	self openInWorld.
	
	self model when: #cartHasChanged send: #refreshCart to: self.
	self model when: #purchaseDone send: #openTicketWindow to: self.! !

!classDefinition: #TicketWindow category: #'TusLibros-Client' stamp: 'JPF 7/7/2021 23:59:28'!
Panel subclass: #TicketWindow
	instanceVariableNames: 'loginWindow'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Client'!
!TicketWindow methodsFor: 'as yet unclassified' stamp: 'JPF 7/7/2021 23:59:20' prior: 50959138!
openLoginWindow

	loginWindow open.! !
!TicketWindow methodsFor: 'as yet unclassified' stamp: 'JPF 7/7/2021 23:59:42' prior: 50963599!
openLoginWindow

	loginWindow openInWorld! !

!methodRemoval: TicketWindow #openErrorWindow stamp: 'JPF 7/8/2021 00:00:30'!
openErrorWindow

	ErrorWindow openWith: self model.!
!TicketWindow class methodsFor: 'instance creation' stamp: 'JPF 7/8/2021 00:01:59'!
openWith: aModel from: aLoginWindow

	^ self new initializeTitled: 'Purchase done' withModel: aModel from: aLoginWindow.! !
!TicketWindow methodsFor: 'initialization' stamp: 'JPF 7/8/2021 00:02:23'!
initializeTitled: aTitle withModel: aModel from: aLoginWindow

	loginWindow := aLoginWindow .

	self titleMorph showButtonsNamed: #( close collapse ).
	self setLabel: aTitle.
	self model: aModel.
	self morphExtent: (self defaultExtent).
	self buildMorphicWindow.
	
	self openInWorld.
	
	self model when: #newShoppingCartCreated send: #openMarketWindow to: self.
	self model when: #logoutDone send: #openLoginWindow to: self.! !

!methodRemoval: MarketWindow #openErrorWindow stamp: 'JPF 7/8/2021 00:02:57'!
openErrorWindow

	ErrorWindow openWith: self model.!
!MarketWindow methodsFor: 'actions' stamp: 'JPF 7/8/2021 00:03:11' prior: 50959098!
openTicketWindow

	TicketWindow openWith: self model from: loginWindow.
	self delete.! !
!LoginWindow methodsFor: 'windows navigation' stamp: 'JPF 7/8/2021 00:04:04' prior: 50956347!
openMarketWindow
	
	MarketWindow openWith: self model from: self.
	self delete.! !

loginWindow := LoginWindow open.!

loginWindow := LoginWindow open.!

!methodRemoval: TicketWindow class #openWith: stamp: 'JPF 7/8/2021 00:11:23'!
openWith: aModel

	^ self new initializeTitled: 'Purchase done' withModel: aModel.!

!methodRemoval: MarketWindow class #openWith: stamp: 'JPF 7/8/2021 00:11:31'!
openWith: aModel

	^ self new initializeTitled: 'Tus Libros Market' withModel: aModel.!

!methodRemoval: MarketWindow #initializeTitled:withModel: stamp: 'JPF 7/8/2021 00:11:51'!
initializeTitled: aTitle withModel: aModel

	self titleMorph showButtonsNamed: #( close collapse ).
	self setLabel: aTitle.
	self model: aModel.
	self morphExtent: (self defaultExtent).
	self buildMorphicWindow.
	
	self openInWorld.
	
	self model when: #cartHasChanged send: #refreshCart to: self.
	self model when: #purchaseDone send: #openTicketWindow to: self.!

!methodRemoval: TicketWindow #initializeTitled:withModel: stamp: 'JPF 7/8/2021 00:12:54'!
initializeTitled: aTitle withModel: aModel

	self titleMorph showButtonsNamed: #( close collapse ).
	self setLabel: aTitle.
	self model: aModel.
	self morphExtent: (self defaultExtent).
	self buildMorphicWindow.
	
	self openInWorld.
	
	self model when: #newShoppingCartCreated send: #openMarketWindow to: self.
	self model when: #logoutDone send: #openLoginWindow to: self.!

loginWindow := LoginWindow open.!
!TicketWindow methodsFor: 'windows navigation' stamp: 'JPF 7/8/2021 00:15:16' prior: 50963604!
openLoginWindow

	loginWindow openInWorld.
	self delete.! !

loginWindow := LoginWindow open.!

loginWindow := LoginWindow open.!

loginWindow := LoginWindow open.!
!TicketWindow methodsFor: 'windows navigation' stamp: 'JPF 7/8/2021 00:19:52' prior: 50959133!
openMarketWindow

	MarketWindow openWith: self model from: loginWindow .
	self delete.! !
!TicketWindow methodsFor: 'windows navigation' stamp: 'JPF 7/8/2021 00:19:54' prior: 50963704!
openMarketWindow

	MarketWindow openWith: self model from: loginWindow.
	self delete.! !

loginWindow := LoginWindow open.!
!MarketModel methodsFor: 'actions' stamp: 'JPF 7/8/2021 00:21:06' prior: 50959880!
logout

	self doSignalingError: [
		
		self triggerEvent: #logoutDone with: self.
		]
! !

loginWindow := LoginWindow open.!

----SNAPSHOT----(8 July 2021 00:22:46) Interfaz.image priorSource: 20183071!