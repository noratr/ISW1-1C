

----SNAPSHOT----(17 June 2021 20:41:33) CaraInternaInterfaz.image priorSource: 17420214!

----STARTUP---- (17 June 2021 20:44:11) as /Users/juan.ferrino/CuisUniversity/CaraInternaInterfaz.image!


----End fileIn of /Users/juan.ferrino/ingenieria1/2021-1c/20-TusLibros/Iteracion2/TusLibros-33.st----!

TestCase subclass: #FacadeTest
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #FacadeTest category: 'TusLibros' stamp: 'JPF 6/17/2021 20:47:59'!
TestCase subclass: #FacadeTest
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!FacadeTest methodsFor: 'setUp' stamp: 'JPF 6/17/2021 20:48:43' overrides: 16927572!
setUp 

	testObjectsFactory := StoreTestObjectsFactory new.! !
!FacadeTest methodsFor: 'tests' stamp: 'JPF 6/17/2021 20:51:27'!
test01ShouldFailToCreateCardWhenUserIdOrPasswordAreIncorrect! !

!classDefinition: #UserValidationService category: 'TusLibros' stamp: 'JPF 6/17/2021 20:58:21'!
Object subclass: #UserValidationService
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!FacadeTest methodsFor: 'tests' stamp: 'JPF 6/17/2021 20:58:01' prior: 50876914!
test01ShouldFailToCreateCardWhenUserIdOrPasswordAreIncorrect

	| clientId password storeFacade |
	self 
		should: [ storeFacade createCartFor: clientId withPassword: password ] 
		raise: Error - MessageNotUnderstood 
		withMessageText: UserValidationService userIdOrPasswordAreIncorrect! !

!classDefinition: #StoreFacade category: 'TusLibros' stamp: 'JPF 6/17/2021 21:01:38'!
Object subclass: #StoreFacade
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!FacadeTest methodsFor: 'tests' stamp: 'JPF 6/17/2021 21:01:33' prior: 50876926!
test01ShouldFailToCreateCardWhenUserIdOrPasswordAreIncorrect

	| clientId password storeFacade |
	
	storeFacade := StoreFacade validatingWith: testObjectsFactory createUserValidationServiceFail.
	
	self 
		should: [ storeFacade createCartFor: clientId withPassword: password ] 
		raise: Error - MessageNotUnderstood 
		withMessageText: UserValidationService userIdOrPasswordAreIncorrect! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'JPF 6/17/2021 21:06:32'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'JPF 6/17/2021 21:06:32'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'JPF 6/17/2021 21:06:32'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'JPF 6/17/2021 21:06:32'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'JPF 6/17/2021 21:06:32'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'JPF 6/17/2021 21:06:32'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'JPF 6/17/2021 21:06:32'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'JPF 6/17/2021 21:06:32'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'JPF 6/17/2021 21:06:32'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'JPF 6/17/2021 21:06:32'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'JPF 6/17/2021 21:06:32'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'JPF 6/17/2021 21:06:32'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'JPF 6/17/2021 21:06:32'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'JPF 6/17/2021 21:06:32'!
PASSED!

!testRun: #FacadeTest #test01ShouldFailToCreateCardWhenUserIdOrPasswordAreIncorrect stamp: 'JPF 6/17/2021 21:06:32'!
ERROR!

!testRun: #FacadeTest #test01ShouldFailToCreateCardWhenUserIdOrPasswordAreIncorrect stamp: 'JPF 6/17/2021 21:06:32'!
ERROR!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'JPF 6/17/2021 21:06:44'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'JPF 6/17/2021 21:06:44'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'JPF 6/17/2021 21:06:44'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'JPF 6/17/2021 21:06:44'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'JPF 6/17/2021 21:06:44'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'JPF 6/17/2021 21:06:44'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'JPF 6/17/2021 21:06:44'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'JPF 6/17/2021 21:06:44'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'JPF 6/17/2021 21:06:46'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'JPF 6/17/2021 21:06:46'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'JPF 6/17/2021 21:06:46'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'JPF 6/17/2021 21:06:46'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'JPF 6/17/2021 21:06:46'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'JPF 6/17/2021 21:06:46'!
PASSED!

!testRun: #FacadeTest #test01ShouldFailToCreateCardWhenUserIdOrPasswordAreIncorrect stamp: 'JPF 6/17/2021 21:06:48'!
ERROR!

!testRun: #FacadeTest #test01ShouldFailToCreateCardWhenUserIdOrPasswordAreIncorrect stamp: 'JPF 6/17/2021 21:06:48'!
ERROR!

!testRun: #FacadeTest #test01ShouldFailToCreateCardWhenUserIdOrPasswordAreIncorrect stamp: 'JPF 6/17/2021 21:06:51'!
ERROR!

!testRun: #FacadeTest #test01ShouldFailToCreateCardWhenUserIdOrPasswordAreIncorrect stamp: 'JPF 6/17/2021 21:06:51'!
ERROR!

!testRun: #FacadeTest #test01ShouldFailToCreateCardWhenUserIdOrPasswordAreIncorrect stamp: 'JPF 6/17/2021 21:06:56'!
ERROR!

!testRun: #FacadeTest #test01ShouldFailToCreateCardWhenUserIdOrPasswordAreIncorrect stamp: 'JPF 6/17/2021 21:06:56'!
ERROR!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'JPF 6/17/2021 21:07:06'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'JPF 6/17/2021 21:07:06'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'JPF 6/17/2021 21:07:06'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'JPF 6/17/2021 21:07:06'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'JPF 6/17/2021 21:07:06'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'JPF 6/17/2021 21:07:06'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'JPF 6/17/2021 21:07:08'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'JPF 6/17/2021 21:07:08'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'JPF 6/17/2021 21:07:08'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'JPF 6/17/2021 21:07:08'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'JPF 6/17/2021 21:07:08'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'JPF 6/17/2021 21:07:08'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'JPF 6/17/2021 21:07:08'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'JPF 6/17/2021 21:07:08'!
PASSED!

!classRenamed: #FacadeTest as: #StoreFacadeTest stamp: 'JPF 6/17/2021 21:07:18'!
Smalltalk renameClassNamed: #FacadeTest as: #StoreFacadeTest!
!StoreFacadeTest methodsFor: 'tests' stamp: 'JPF 6/17/2021 21:07:41' prior: 50876945!
test01ShouldFailToCreateCardWhenUserIdOrPasswordAreIncorrect

	| clientId password storeFacade |
	
	storeFacade := StoreFacade validatingWith: self.
	
	self 
		should: [ storeFacade createCartFor: clientId withPassword: password ] 
		raise: Error - MessageNotUnderstood 
		withMessageText: UserValidationService userIdOrPasswordAreIncorrect! !
!StoreFacadeTest methodsFor: 'tests' stamp: 'JPF 6/17/2021 21:08:44' prior: 50877133!
test01ShouldFailToCreateCardWhenUserIdOrPasswordAreIncorrect

	| clientId password storeFacade |
	
	
	
	storeFacade := StoreFacade validatingWith: self.
	
	self 
		should: [ storeFacade createCartFor: clientId withPassword: password ] 
		raise: Error - MessageNotUnderstood 
		withMessageText: UserValidationService userIdOrPasswordAreIncorrect! !

!classDefinition: #StoreFacadeTest category: 'TusLibros' stamp: 'JPF 6/17/2021 21:13:02'!
TestCase subclass: #StoreFacadeTest
	instanceVariableNames: 'testObjectsFactory validateUserBehaviour'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreFacadeTest methodsFor: 'tests' stamp: 'JPF 6/17/2021 21:15:22' prior: 50877147!
test01ShouldFailToCreateCardWhenUserIdOrPasswordAreIncorrect

	| clientId password validatedClientId validatedPassword storeFacade |
	
	clientId := 'clientId'.
	password := 'password'.
	
	storeFacade := StoreFacade validatingWith: self.
	
	validateUserBehaviour := [ :clientIdArg :passwordArg |
		validatedClientId := clientIdArg.
		validatedPassword := passwordArg.
		self error: UserValidationService userIdOrPasswordAreIncorrect.
		].
	
	self 
		should: [ storeFacade createCartFor: clientId withPassword: password ] 
		raise: Error - MessageNotUnderstood 
		withMessageText: UserValidationService userIdOrPasswordAreIncorrect.
		
	self assert: password = validatedPassword.
	self assert: clientId = validatedClientId.! !
!UserValidationService methodsFor: 'validation' stamp: 'JPF 6/17/2021 21:16:30'!
validateUser: aUserId withPassword: aPassword! !
!UserValidationService methodsFor: 'validation' stamp: 'JPF 6/17/2021 21:16:36' prior: 50877195!
validateUser: aUserId withPassword: aPassword

	self subclassResponsibility.! !
!UserValidationService methodsFor: 'validation' stamp: 'JPF 6/17/2021 21:16:37' prior: 50877200!
validateUser: aUserId withPassword: aPassword

	self subclassResponsibility! !
!UserValidationService methodsFor: 'validation' stamp: 'JPF 6/17/2021 21:16:43' prior: 50877206!
validateUser: aClientId withPassword: aPassword

	self subclassResponsibility! !

!classRenamed: #UserValidationService as: #ClientValidationService stamp: 'JPF 6/17/2021 21:17:02'!
Smalltalk renameClassNamed: #UserValidationService as: #ClientValidationService!
!StoreFacadeTest methodsFor: 'as yet unclassified' stamp: 'JPF 6/17/2021 21:17:02' prior: 50877169!
test01ShouldFailToCreateCardWhenUserIdOrPasswordAreIncorrect

	| clientId password validatedClientId validatedPassword storeFacade |
	
	clientId := 'clientId'.
	password := 'password'.
	
	storeFacade := StoreFacade validatingWith: self.
	
	validateUserBehaviour := [ :clientIdArg :passwordArg |
		validatedClientId := clientIdArg.
		validatedPassword := passwordArg.
		self error: ClientValidationService userIdOrPasswordAreIncorrect.
		].
	
	self 
		should: [ storeFacade createCartFor: clientId withPassword: password ] 
		raise: Error - MessageNotUnderstood 
		withMessageText: ClientValidationService userIdOrPasswordAreIncorrect.
		
	self assert: password = validatedPassword.
	self assert: clientId = validatedClientId.! !
!StoreFacadeTest methodsFor: 'tests' stamp: 'JPF 6/17/2021 21:17:44' prior: 50877224!
test01ShouldFailToCreateCardWhenUserIdOrPasswordAreIncorrect

	| clientId password validatedClientId validatedPassword storeFacade |
	
	clientId := 'clientId'.
	password := 'password'.
	
	storeFacade := StoreFacade validatingWith: self.
	
	validateUserBehaviour := [ :clientIdArg :passwordArg |
		validatedClientId := clientIdArg.
		validatedPassword := passwordArg.
		self error: ClientValidationService clientIdOrPasswordAreIncorrect.
		].
	
	self 
		should: [ storeFacade createCartFor: clientId withPassword: password ] 
		raise: Error - MessageNotUnderstood 
		withMessageText: ClientValidationService clientIdOrPasswordAreIncorrect.
		
	self assert: password = validatedPassword.
	self assert: clientId = validatedClientId.! !

!classRenamed: #ClientValidationService as: #ClientValidator stamp: 'JPF 6/17/2021 21:18:57'!
Smalltalk renameClassNamed: #ClientValidationService as: #ClientValidator!
!StoreFacadeTest methodsFor: 'as yet unclassified' stamp: 'JPF 6/17/2021 21:18:57' prior: 50877250!
test01ShouldFailToCreateCardWhenUserIdOrPasswordAreIncorrect

	| clientId password validatedClientId validatedPassword storeFacade |
	
	clientId := 'clientId'.
	password := 'password'.
	
	storeFacade := StoreFacade validatingWith: self.
	
	validateUserBehaviour := [ :clientIdArg :passwordArg |
		validatedClientId := clientIdArg.
		validatedPassword := passwordArg.
		self error: ClientValidator clientIdOrPasswordAreIncorrect.
		].
	
	self 
		should: [ storeFacade createCartFor: clientId withPassword: password ] 
		raise: Error - MessageNotUnderstood 
		withMessageText: ClientValidator clientIdOrPasswordAreIncorrect.
		
	self assert: password = validatedPassword.
	self assert: clientId = validatedClientId.! !
!StoreFacadeTest methodsFor: 'client validator protocol' stamp: 'JPF 6/17/2021 21:20:02'!
validateUser: aClientId withPassword: aPassword

	validateUserBehaviour value: aClientId value: aPassword! !

!testRun: #StoreFacadeTest #test01ShouldFailToCreateCardWhenUserIdOrPasswordAreIncorrect stamp: 'JPF 6/17/2021 21:20:30'!
ERROR!
!StoreFacade class methodsFor: 'instance creation' stamp: 'JPF 6/17/2021 21:20:41'!
validatingWith: aStoreFacadeTest 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeValidatingWith: aStoreFacadeTest ! !
!StoreFacade class methodsFor: 'instance creation' stamp: 'JPF 6/17/2021 21:21:03' prior: 50877319!
validatingWith: aClientValidator 
	
	self shouldBeImplemented.
	^self new initializeValidatingWith: aClientValidator ! !

!testRun: #StoreFacadeTest #test01ShouldFailToCreateCardWhenUserIdOrPasswordAreIncorrect stamp: 'JPF 6/17/2021 21:21:05'!
ERROR!
!StoreFacade class methodsFor: 'error handling' stamp: 'JPF 6/17/2021 21:21:11' overrides: 16881409!
error: aString 
	self shouldBeImplemented.! !

!methodRemoval: StoreFacade class #error: stamp: 'JPF 6/17/2021 21:21:41'!
error: aString 
	self shouldBeImplemented.!
!StoreFacade class methodsFor: 'instance creation' stamp: 'JPF 6/17/2021 21:22:08' prior: 50877328!
validatingWith: aClientValidator 
	
	^self new initializeValidatingWith: aClientValidator ! !

!testRun: #StoreFacadeTest #test01ShouldFailToCreateCardWhenUserIdOrPasswordAreIncorrect stamp: 'JPF 6/17/2021 21:22:17'!
ERROR!

!testRun: #StoreFacadeTest #test01ShouldFailToCreateCardWhenUserIdOrPasswordAreIncorrect stamp: 'JPF 6/17/2021 21:22:17'!
ERROR!

!classDefinition: #StoreFacade category: 'TusLibros' stamp: 'JPF 6/17/2021 21:22:32'!
Object subclass: #StoreFacade
	instanceVariableNames: 'clientValidator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreFacade methodsFor: 'initialization' stamp: 'JPF 6/17/2021 21:22:32'!
initializeValidatingWith: aClientValidator 
	self shouldBeImplemented.
	clientValidator := aClientValidator.! !
!StoreFacade methodsFor: 'initialization' stamp: 'JPF 6/17/2021 21:22:38' prior: 50877369!
initializeValidatingWith: aClientValidator 

	clientValidator := aClientValidator.! !

!testRun: #StoreFacadeTest #test01ShouldFailToCreateCardWhenUserIdOrPasswordAreIncorrect stamp: 'JPF 6/17/2021 21:22:43'!
ERROR!
!ClientValidator class methodsFor: 'error descriptions' stamp: 'JPF 6/17/2021 21:23:09'!
clientIdOrPasswordAreIncorrect
	self shouldBeImplemented.! !
!ClientValidator class methodsFor: 'error descriptions' stamp: 'JPF 6/17/2021 21:23:45' prior: 50877386!
clientIdOrPasswordAreIncorrect
	
	^ 'ClientId or password are incorrect'! !

!testRun: #StoreFacadeTest #test01ShouldFailToCreateCardWhenUserIdOrPasswordAreIncorrect stamp: 'JPF 6/17/2021 21:23:49'!
ERROR!
!StoreFacade methodsFor: 'actions' stamp: 'JPF 6/17/2021 21:24:13'!
createCartFor: aString withPassword: aString2 
	self shouldBeImplemented.! !
!StoreFacade methodsFor: 'actions' stamp: 'JPF 6/17/2021 21:24:38' prior: 50877401!
createCartFor: aClientId withPassword: aPassword

	
	! !
!StoreFacade methodsFor: 'actions' stamp: 'JPF 6/17/2021 21:24:58' prior: 50877407!
createCartFor: aClientId withPassword: aPassword

	clientValidator validateUser: aClientId withPassword: aPassword
	! !

!testRun: #StoreFacadeTest #test01ShouldFailToCreateCardWhenUserIdOrPasswordAreIncorrect stamp: 'JPF 6/17/2021 21:25:02'!
PASSED!

!testRun: #StoreFacadeTest #test01ShouldFailToCreateCardWhenUserIdOrPasswordAreIncorrect stamp: 'JPF 6/17/2021 21:25:08'!
PASSED!
!StoreFacadeTest methodsFor: 'setUp' stamp: 'JPF 6/17/2021 21:25:58' prior: 50876910 overrides: 16927572!
setUp 

	testObjectsFactory := StoreTestObjectsFactory new.
	validateUserBehaviour := [ :clientIdArg :passwordArg | ].! !
!StoreFacadeTest methodsFor: 'tests' stamp: 'JPF 6/17/2021 21:28:50'!
test01ShouldFailToCreateCartWhenUserIdOrPasswordAreIncorrect

	| clientId password validatedClientId validatedPassword storeFacade |
	
	clientId := 'clientId'.
	password := 'password'.
	
	storeFacade := StoreFacade validatingWith: self.
	
	validateUserBehaviour := [ :clientIdArg :passwordArg |
		validatedClientId := clientIdArg.
		validatedPassword := passwordArg.
		self error: ClientValidator clientIdOrPasswordAreIncorrect.
		].
	
	self 
		should: [ storeFacade createCartFor: clientId withPassword: password ] 
		raise: Error - MessageNotUnderstood 
		withMessageText: ClientValidator clientIdOrPasswordAreIncorrect.
		
	self assert: password = validatedPassword.
	self assert: clientId = validatedClientId.! !

!methodRemoval: StoreFacadeTest #test01ShouldFailToCreateCardWhenUserIdOrPasswordAreIncorrect stamp: 'JPF 6/17/2021 21:28:50'!
test01ShouldFailToCreateCardWhenUserIdOrPasswordAreIncorrect

	| clientId password validatedClientId validatedPassword storeFacade |
	
	clientId := 'clientId'.
	password := 'password'.
	
	storeFacade := StoreFacade validatingWith: self.
	
	validateUserBehaviour := [ :clientIdArg :passwordArg |
		validatedClientId := clientIdArg.
		validatedPassword := passwordArg.
		self error: ClientValidator clientIdOrPasswordAreIncorrect.
		].
	
	self 
		should: [ storeFacade createCartFor: clientId withPassword: password ] 
		raise: Error - MessageNotUnderstood 
		withMessageText: ClientValidator clientIdOrPasswordAreIncorrect.
		
	self assert: password = validatedPassword.
	self assert: clientId = validatedClientId.!
!StoreFacadeTest methodsFor: 'tests' stamp: 'JPF 6/17/2021 21:45:51'!
test02ShouldCreateACartAndBeEmptyWhenListed

	| clientId password validatedClientId validatedPassword storeFacade |
	
	clientId := 'clientId'.
	password := 'password'.
	
	storeFacade := StoreFacade validatingWith: self.
	
	validateUserBehaviour := [ :clientIdArg :passwordArg |
		validatedClientId := clientIdArg.
		validatedPassword := passwordArg.
		self error: ClientValidator clientIdOrPasswordAreIncorrect.
		].
	
	self 
		should: [ storeFacade createCartFor: clientId withPassword: password ] 
		raise: Error - MessageNotUnderstood 
		withMessageText: ClientValidator clientIdOrPasswordAreIncorrect.
		
	self assert: password = validatedPassword.
	self assert: clientId = validatedClientId.! !

----QUIT----(18 June 2021 08:13:47) CaraInternaInterfaz.image priorSource: 17429945!

----STARTUP---- (19 June 2021 08:57:16) as /Users/juan.ferrino/CuisUniversity/CaraInternaInterfaz.image!

!StoreFacadeTest methodsFor: 'tests' stamp: 'JPF 6/19/2021 09:07:31' prior: 50877485!
test02ShouldCreateACartAndBeEmptyWhenListed

	| validatedClientId validatedPassword storeFacade |

	
	storeFacade := StoreFacade validatingWith: self.

	
	self 
		should: [ storeFacade createCartFor: testObjectsFactory clientId withPassword: testObjectsFactory password ] 
		raise: Error - MessageNotUnderstood 
		withMessageText: ClientValidator clientIdOrPasswordAreIncorrect.
! !
!StoreFacadeTest methodsFor: 'tests' stamp: 'JPF 6/19/2021 09:07:48' prior: 50877516!
test02ShouldCreateACartAndBeEmptyWhenListed

	| storeFacade |

	
	storeFacade := StoreFacade validatingWith: self.

	
	self 
		should: [ storeFacade createCartFor: testObjectsFactory clientId withPassword: testObjectsFactory password ] 
		raise: Error - MessageNotUnderstood 
		withMessageText: ClientValidator clientIdOrPasswordAreIncorrect.
! !
!StoreFacadeTest methodsFor: 'tests' stamp: 'JPF 6/19/2021 09:08:37' prior: 50877531!
test02ShouldCreateACartAndBeEmptyWhenListed

	| storeFacade |
	
	storeFacade := StoreFacade validatingWith: self.
	
	self 
		should: [ storeFacade createCartFor: testObjectsFactory clientId withPassword: testObjectsFactory password ] 
		raise: Error - MessageNotUnderstood 
		withMessageText: ClientValidator clientIdOrPasswordAreIncorrect.
! !
!StoreFacadeTest methodsFor: 'tests' stamp: 'JPF 6/19/2021 09:12:45' prior: 50877545!
test02ShouldCreateACartAndBeEmptyWhenListed

	| storeFacade cart cartId |
	
	storeFacade := StoreFacade validatingWith: self.
	
	cartId := storeFacade createCartFor: testObjectsFactory clientId withPassword: testObjectsFactory password.
	
	cart := storeFacade listCart: cartId.
	
	self assert: cart isEmpty! !

!testRun: #StoreFacadeTest #test02ShouldCreateACartAndBeEmptyWhenListed stamp: 'JPF 6/19/2021 09:13:10'!
ERROR!
!StoreTestObjectsFactory methodsFor: 'client' stamp: 'JPF 6/19/2021 09:13:21'!
clientId
	self shouldBeImplemented.! !
!StoreTestObjectsFactory methodsFor: 'client' stamp: 'JPF 6/19/2021 09:13:36' prior: 50877575!
clientId
	
	^ 'clientId'.! !

!testRun: #StoreFacadeTest #test02ShouldCreateACartAndBeEmptyWhenListed stamp: 'JPF 6/19/2021 09:13:44'!
ERROR!
!StoreTestObjectsFactory methodsFor: 'client' stamp: 'JPF 6/19/2021 09:13:52'!
password
	self shouldBeImplemented.! !
!StoreTestObjectsFactory methodsFor: 'client' stamp: 'JPF 6/19/2021 09:14:08' prior: 50877587!
password
	
	^ 'password'.! !

!testRun: #StoreFacadeTest #test02ShouldCreateACartAndBeEmptyWhenListed stamp: 'JPF 6/19/2021 09:14:24'!
ERROR!
!StoreFacade methodsFor: 'queries' stamp: 'JPF 6/19/2021 09:14:58'!
listCart: aStoreFacade 
	self shouldBeImplemented.! !
!StoreFacade methodsFor: 'queries' stamp: 'JPF 6/19/2021 09:15:32' prior: 50877599!
listCart: aCartId
	
	^ OrderedCollection new.! !

!testRun: #StoreFacadeTest #test02ShouldCreateACartAndBeEmptyWhenListed stamp: 'JPF 6/19/2021 09:15:44'!
PASSED!

!testRun: #StoreFacadeTest #test01ShouldFailToCreateCartWhenUserIdOrPasswordAreIncorrect stamp: 'JPF 6/19/2021 09:15:44'!
PASSED!

!testRun: #StoreFacadeTest #test02ShouldCreateACartAndBeEmptyWhenListed stamp: 'JPF 6/19/2021 09:15:44'!
PASSED!
!StoreFacadeTest methodsFor: 'tests' stamp: 'JPF 6/19/2021 09:20:13'!
test03ShouldAddAnItemToTheCart

	| storeFacade cart cartId |
	
	storeFacade := StoreFacade validatingWith: self.
	
	cartId := storeFacade createCartFor: testObjectsFactory clientId withPassword: testObjectsFactory password.
	
	storeFacade add: 3 of: testObjectsFactory itemSellByTheStore to: cartId.
	
	cart := storeFacade listCart: cartId.
	
	self assert: cart isEmpty! !
!StoreFacadeTest methodsFor: 'tests' stamp: 'JPF 6/19/2021 09:20:43' prior: 50877619!
test03ShouldAddAnItemToTheCart

	| storeFacade cart cartId |
	
	storeFacade := StoreFacade validatingWith: self.
	
	cartId := storeFacade createCartFor: testObjectsFactory clientId withPassword: testObjectsFactory password.
	
	storeFacade add: 3 of: testObjectsFactory itemSellByTheStore to: cartId.
	
	cart := storeFacade listCart: cartId.
	
	self assert: cart size = 3.! !
!StoreFacadeTest methodsFor: 'tests' stamp: 'JPF 6/19/2021 09:22:40' prior: 50877634!
test03ShouldAddAnItemToTheCart

	| storeFacade cart cartId |
	
	storeFacade := StoreFacade validatingWith: self.
	
	cartId := storeFacade createCartFor: testObjectsFactory clientId withPassword: testObjectsFactory password.
	
	storeFacade add: 3 of: testObjectsFactory itemSellByTheStore to: cartId.
	
	cart := storeFacade listCart: cartId.
	
	self assert: cart size = 3.
	
	cart do: [ :cartItem | self assert: cartItem = testObjectsFactory itemNotSellByTheStore ]! !

!testRun: #StoreFacadeTest #test03ShouldAddAnItemToTheCart stamp: 'JPF 6/19/2021 09:23:12'!
ERROR!
!StoreFacade methodsFor: 'actions' stamp: 'JPF 6/19/2021 09:23:29'!
add: aSmallInteger of: aString to: aStoreFacade 
	self shouldBeImplemented.! !

!classDefinition: #StoreFacade category: 'TusLibros' stamp: 'JPF 6/19/2021 09:28:00'!
Object subclass: #StoreFacade
	instanceVariableNames: 'clientValidator cartRepository'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreFacade methodsFor: 'actions' stamp: 'JPF 6/19/2021 09:27:53' prior: 50877669!
add: aQuantity of: anItem to: aCartId 
	
	| cart |
	cart := cartRepository at: aCartId.
	
	cart add: aQuantity of: anItem.! !
!StoreFacade methodsFor: 'actions' stamp: 'JPF 6/19/2021 09:28:07' prior: 50877682!
add: aQuantity of: anItem to: aCartId 
	
	| cart |
	
	cart := cartRepository at: aCartId.
	
	cart add: aQuantity of: anItem.! !

!testRun: #StoreFacadeTest #test03ShouldAddAnItemToTheCart stamp: 'JPF 6/19/2021 09:28:55'!
ERROR!
!StoreFacade methodsFor: 'initialization' stamp: 'JPF 6/19/2021 09:30:02' prior: 50877376!
initializeValidatingWith: aClientValidator 

	clientValidator := aClientValidator.
	cartRepository := Dictionary new.! !
!StoreFacade methodsFor: 'actions' stamp: 'JPF 6/19/2021 09:32:08' prior: 50877412!
createCartFor: aClientId withPassword: aPassword

	clientValidator validateUser: aClientId withPassword: aPassword.
	
	cartRepository at: self nextCartId put: OrderedCollection new.! !

sequence := 1.!

id := sequence.!

sequence := sequence + 1.!

id.!

sequence.!

!classDefinition: #StoreFacade category: 'TusLibros' stamp: 'JPF 6/19/2021 09:36:30'!
Object subclass: #StoreFacade
	instanceVariableNames: 'clientValidator cartRepository cartSequence'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreFacade methodsFor: 'private' stamp: 'JPF 6/19/2021 09:36:53'!
nextCartId
	
	| cartId |
	cartId := cartSequence.
	cartSequence := cartSequence + 1.
	
	^ cartId! !
!StoreFacade methodsFor: 'private' stamp: 'JPF 6/19/2021 09:36:58' prior: 50877725!
nextCartId
	
	| cartId |
	
	cartId := cartSequence.
	cartSequence := cartSequence + 1.
	
	^ cartId! !
!StoreFacade methodsFor: 'initialization' stamp: 'JPF 6/19/2021 09:37:19' prior: 50877699!
initializeValidatingWith: aClientValidator 

	clientValidator := aClientValidator.
	cartRepository := Dictionary new.
	cartSequence := 1.! !

!classDefinition: #StoreFacade category: 'TusLibros' stamp: 'JPF 6/19/2021 09:37:26'!
Object subclass: #StoreFacade
	instanceVariableNames: 'clientValidator cartRepository cartIdSequence'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreFacade methodsFor: 'as yet unclassified' stamp: 'JPF 6/19/2021 09:37:26' prior: 50877731!
nextCartId
	
	| cartId |
	
	cartId := cartIdSequence.
	cartIdSequence := cartIdSequence + 1.
	
	^ cartId! !
!StoreFacade methodsFor: 'as yet unclassified' stamp: 'JPF 6/19/2021 09:37:26' prior: 50877738!
initializeValidatingWith: aClientValidator 

	clientValidator := aClientValidator.
	cartRepository := Dictionary new.
	cartIdSequence := 1.! !

!testRun: #StoreFacadeTest #test01ShouldFailToCreateCartWhenUserIdOrPasswordAreIncorrect stamp: 'JPF 6/19/2021 09:37:45'!
PASSED!

!testRun: #StoreFacadeTest #test02ShouldCreateACartAndBeEmptyWhenListed stamp: 'JPF 6/19/2021 09:37:45'!
PASSED!

!testRun: #StoreFacadeTest #test03ShouldAddAnItemToTheCart stamp: 'JPF 6/19/2021 09:37:45'!
ERROR!

!testRun: #StoreFacadeTest #test03ShouldAddAnItemToTheCart stamp: 'JPF 6/19/2021 09:37:45'!
ERROR!
!StoreFacade methodsFor: 'actions' stamp: 'JPF 6/19/2021 09:40:09' prior: 50877706!
createCartFor: aClientId withPassword: aPassword

	| cartId |
	clientValidator validateUser: aClientId withPassword: aPassword.
	
	cartId := self nextCartId.
	
	cartRepository at: cartId put: OrderedCollection new.
	
	^ cartId! !
!StoreFacade methodsFor: 'actions' stamp: 'JPF 6/19/2021 09:40:15' prior: 50877782!
createCartFor: aClientId withPassword: aPassword

	| cartId |
	
	clientValidator validateUser: aClientId withPassword: aPassword.
	
	cartId := self nextCartId.
	
	cartRepository at: cartId put: OrderedCollection new.
	
	^ cartId! !

!testRun: #StoreFacadeTest #test01ShouldFailToCreateCartWhenUserIdOrPasswordAreIncorrect stamp: 'JPF 6/19/2021 09:40:45'!
PASSED!

!testRun: #StoreFacadeTest #test02ShouldCreateACartAndBeEmptyWhenListed stamp: 'JPF 6/19/2021 09:40:45'!
PASSED!

!testRun: #StoreFacadeTest #test03ShouldAddAnItemToTheCart stamp: 'JPF 6/19/2021 09:40:45'!
ERROR!

!testRun: #StoreFacadeTest #test03ShouldAddAnItemToTheCart stamp: 'JPF 6/19/2021 09:40:45'!
ERROR!
!StoreFacade methodsFor: 'actions' stamp: 'JPF 6/19/2021 09:41:44' prior: 50877792!
createCartFor: aClientId withPassword: aPassword

	| cartId |
	
	clientValidator validateUser: aClientId withPassword: aPassword.
	
	cartId := self nextCartId.
	
	cartRepository at: cartId put: Cart new.
	
	^ cartId! !

!classDefinition: #StoreFacade category: 'TusLibros' stamp: 'JPF 6/19/2021 09:43:02'!
Object subclass: #StoreFacade
	instanceVariableNames: 'clientValidator cartRepository cartIdSequence catalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreFacade methodsFor: 'actions' stamp: 'JPF 6/19/2021 09:42:56' prior: 50877816!
createCartFor: aClientId withPassword: aPassword

	| cartId |
	
	clientValidator validateUser: aClientId withPassword: aPassword.
	
	cartId := self nextCartId.
	
	cartRepository at: cartId put: (Cart acceptingItemsOf: catalog).
	
	^ cartId! !
!StoreFacade class methodsFor: 'instance creation' stamp: 'JPF 6/19/2021 09:46:42'!
validatingWith: aClientValidator having: aCatalog  
	
	^self new initializeValidatingWith: aClientValidator ! !
!StoreFacadeTest methodsFor: 'as yet unclassified' stamp: 'JPF 6/19/2021 09:46:42' prior: 50877434!
test01ShouldFailToCreateCartWhenUserIdOrPasswordAreIncorrect

	| clientId password validatedClientId validatedPassword storeFacade |
	
	clientId := 'clientId'.
	password := 'password'.
	
	storeFacade := StoreFacade validatingWith: self having: (self halt).
	
	validateUserBehaviour := [ :clientIdArg :passwordArg |
		validatedClientId := clientIdArg.
		validatedPassword := passwordArg.
		self error: ClientValidator clientIdOrPasswordAreIncorrect.
		].
	
	self 
		should: [ storeFacade createCartFor: clientId withPassword: password ] 
		raise: Error - MessageNotUnderstood 
		withMessageText: ClientValidator clientIdOrPasswordAreIncorrect.
		
	self assert: password = validatedPassword.
	self assert: clientId = validatedClientId.! !
!StoreFacadeTest methodsFor: 'as yet unclassified' stamp: 'JPF 6/19/2021 09:46:42' prior: 50877559!
test02ShouldCreateACartAndBeEmptyWhenListed

	| storeFacade cart cartId |
	
	storeFacade := StoreFacade validatingWith: self having: (self halt).
	
	cartId := storeFacade createCartFor: testObjectsFactory clientId withPassword: testObjectsFactory password.
	
	cart := storeFacade listCart: cartId.
	
	self assert: cart isEmpty! !
!StoreFacadeTest methodsFor: 'as yet unclassified' stamp: 'JPF 6/19/2021 09:46:42' prior: 50877649!
test03ShouldAddAnItemToTheCart

	| storeFacade cart cartId |
	
	storeFacade := StoreFacade validatingWith: self having: (self halt).
	
	cartId := storeFacade createCartFor: testObjectsFactory clientId withPassword: testObjectsFactory password.
	
	storeFacade add: 3 of: testObjectsFactory itemSellByTheStore to: cartId.
	
	cart := storeFacade listCart: cartId.
	
	self assert: cart size = 3.
	
	cart do: [ :cartItem | self assert: cartItem = testObjectsFactory itemNotSellByTheStore ]! !

!methodRemoval: StoreFacade class #validatingWith: stamp: 'JPF 6/19/2021 09:46:42'!
validatingWith: aClientValidator 
	
	^self new initializeValidatingWith: aClientValidator !
!StoreFacadeTest methodsFor: 'tests' stamp: 'JPF 6/19/2021 09:47:56' prior: 50877852!
test01ShouldFailToCreateCartWhenUserIdOrPasswordAreIncorrect

	| clientId password validatedClientId validatedPassword storeFacade |
	
	clientId := 'clientId'.
	password := 'password'.
	
	storeFacade := StoreFacade validatingWith: self having: testObjectsFactory defaultCatalog.
	
	validateUserBehaviour := [ :clientIdArg :passwordArg |
		validatedClientId := clientIdArg.
		validatedPassword := passwordArg.
		self error: ClientValidator clientIdOrPasswordAreIncorrect.
		].
	
	self 
		should: [ storeFacade createCartFor: clientId withPassword: password ] 
		raise: Error - MessageNotUnderstood 
		withMessageText: ClientValidator clientIdOrPasswordAreIncorrect.
		
	self assert: password = validatedPassword.
	self assert: clientId = validatedClientId.! !
!StoreFacadeTest methodsFor: 'tests' stamp: 'JPF 6/19/2021 09:48:13' prior: 50877879!
test02ShouldCreateACartAndBeEmptyWhenListed

	| storeFacade cart cartId |
	
	storeFacade := StoreFacade validatingWith: self having: testObjectsFactory defaultCatalog.
	
	cartId := storeFacade createCartFor: testObjectsFactory clientId withPassword: testObjectsFactory password.
	
	cart := storeFacade listCart: cartId.
	
	self assert: cart isEmpty! !
!StoreFacadeTest methodsFor: 'tests' stamp: 'JPF 6/19/2021 09:48:24' prior: 50877893!
test03ShouldAddAnItemToTheCart

	| storeFacade cart cartId |
	
	storeFacade := StoreFacade validatingWith: self having: testObjectsFactory defaultCatalog.
	
	cartId := storeFacade createCartFor: testObjectsFactory clientId withPassword: testObjectsFactory password.
	
	storeFacade add: 3 of: testObjectsFactory itemSellByTheStore to: cartId.
	
	cart := storeFacade listCart: cartId.
	
	self assert: cart size = 3.
	
	cart do: [ :cartItem | self assert: cartItem = testObjectsFactory itemNotSellByTheStore ]! !
!StoreFacade methodsFor: 'initialization' stamp: 'JPF 6/19/2021 09:49:43'!
initializeValidatingWith: aClientValidator having: aCatalog  

	clientValidator := aClientValidator.
	cartRepository := Dictionary new.
	cartIdSequence := 1.! !
!StoreFacade class methodsFor: 'as yet unclassified' stamp: 'JPF 6/19/2021 09:49:43' prior: 50877845!
validatingWith: aClientValidator having: aCatalog  
	
	^self new initializeValidatingWith: aClientValidator having: aCatalog ! !

!methodRemoval: StoreFacade #initializeValidatingWith: stamp: 'JPF 6/19/2021 09:49:43'!
initializeValidatingWith: aClientValidator 

	clientValidator := aClientValidator.
	cartRepository := Dictionary new.
	cartIdSequence := 1.!
!StoreFacade methodsFor: 'initialization' stamp: 'JPF 6/19/2021 09:50:00' prior: 50877977!
initializeValidatingWith: aClientValidator having: aCatalog  

	clientValidator := aClientValidator.
	catalog := aCatalog.
	cartRepository := Dictionary new.
	cartIdSequence := 1.! !

!testRun: #StoreFacadeTest #test01ShouldFailToCreateCartWhenUserIdOrPasswordAreIncorrect stamp: 'JPF 6/19/2021 09:50:17'!
PASSED!

!testRun: #StoreFacadeTest #test02ShouldCreateACartAndBeEmptyWhenListed stamp: 'JPF 6/19/2021 09:50:17'!
PASSED!

!testRun: #StoreFacadeTest #test03ShouldAddAnItemToTheCart stamp: 'JPF 6/19/2021 09:50:17'!
FAILURE!

!testRun: #StoreFacadeTest #test03ShouldAddAnItemToTheCart stamp: 'JPF 6/19/2021 09:50:17'!
FAILURE!
!StoreFacade methodsFor: 'queries' stamp: 'JPF 6/19/2021 09:53:10' prior: 50877604!
listCart: aCartId
	
	^ (cartRepository at: aCartId) items.! !

!testRun: #StoreFacadeTest #test01ShouldFailToCreateCartWhenUserIdOrPasswordAreIncorrect stamp: 'JPF 6/19/2021 09:54:06'!
PASSED!

!testRun: #StoreFacadeTest #test02ShouldCreateACartAndBeEmptyWhenListed stamp: 'JPF 6/19/2021 09:54:06'!
ERROR!

!testRun: #StoreFacadeTest #test03ShouldAddAnItemToTheCart stamp: 'JPF 6/19/2021 09:54:06'!
ERROR!

!testRun: #StoreFacadeTest #test02ShouldCreateACartAndBeEmptyWhenListed stamp: 'JPF 6/19/2021 09:54:18'!
ERROR!
!Cart methodsFor: 'accessing' stamp: 'JPF 6/19/2021 09:54:33'!
items
	self shouldBeImplemented.
	^items! !
!Cart methodsFor: 'accessing' stamp: 'JPF 6/19/2021 09:54:38' prior: 50878043!
items

	^items! !
!Cart methodsFor: 'accessing' stamp: 'JPF 6/19/2021 09:55:04' prior: 50878047!
items

	^items copy! !
!Cart methodsFor: 'accessing' stamp: 'JPF 6/19/2021 09:55:07' prior: 50878051!
items

	^ items copy! !
!Cart methodsFor: 'accessing' stamp: 'JPF 6/19/2021 09:55:09' prior: 50878055!
items

	^ items copy.! !
!Cart methodsFor: 'accessing' stamp: 'JPF 6/19/2021 09:55:11' prior: 50878059!
items

	^ items copy! !

!testRun: #StoreFacadeTest #test01ShouldFailToCreateCartWhenUserIdOrPasswordAreIncorrect stamp: 'JPF 6/19/2021 09:55:16'!
PASSED!

!testRun: #StoreFacadeTest #test02ShouldCreateACartAndBeEmptyWhenListed stamp: 'JPF 6/19/2021 09:55:16'!
PASSED!

!testRun: #StoreFacadeTest #test03ShouldAddAnItemToTheCart stamp: 'JPF 6/19/2021 09:55:16'!
FAILURE!

!testRun: #StoreFacadeTest #test03ShouldAddAnItemToTheCart stamp: 'JPF 6/19/2021 09:55:16'!
FAILURE!
!StoreFacadeTest methodsFor: 'tests' stamp: 'JPF 6/19/2021 09:55:45' prior: 50877958!
test03ShouldAddAnItemToTheCart

	| storeFacade cart cartId |
	
	storeFacade := StoreFacade validatingWith: self having: testObjectsFactory defaultCatalog.
	
	cartId := storeFacade createCartFor: testObjectsFactory clientId withPassword: testObjectsFactory password.
	
	storeFacade add: 3 of: testObjectsFactory itemSellByTheStore to: cartId.
	
	cart := storeFacade listCart: cartId.
	
	self assert: cart size = 3.
	
	cart do: [ :cartItem | self assert: cartItem = testObjectsFactory itemSellByTheStore ]! !
!StoreFacadeTest methodsFor: 'tests' stamp: 'JPF 6/19/2021 09:55:55' prior: 50878081!
test03ShouldAddAnItemToTheCart

	| storeFacade cartItems cartId |
	
	storeFacade := StoreFacade validatingWith: self having: testObjectsFactory defaultCatalog.
	
	cartId := storeFacade createCartFor: testObjectsFactory clientId withPassword: testObjectsFactory password.
	
	storeFacade add: 3 of: testObjectsFactory itemSellByTheStore to: cartId.
	
	cartItems := storeFacade listCart: cartId.
	
	self assert: cartItems size = 3.
	
	cartItems do: [ :cartItem | self assert: cartItem = testObjectsFactory itemSellByTheStore ]! !

!testRun: #StoreFacadeTest #test01ShouldFailToCreateCartWhenUserIdOrPasswordAreIncorrect stamp: 'JPF 6/19/2021 09:56:11'!
PASSED!

!testRun: #StoreFacadeTest #test02ShouldCreateACartAndBeEmptyWhenListed stamp: 'JPF 6/19/2021 09:56:11'!
PASSED!

!testRun: #StoreFacadeTest #test03ShouldAddAnItemToTheCart stamp: 'JPF 6/19/2021 09:56:11'!
PASSED!
!StoreFacadeTest methodsFor: 'tests' stamp: 'JPF 6/19/2021 09:59:36'!
test04ShouldFailWhenAddsItemsToAnInexistentCart

	| storeFacade |
	
	storeFacade := StoreFacade validatingWith: self having: testObjectsFactory defaultCatalog.
	
	self 
		should: [ storeFacade add: 3 of: testObjectsFactory itemSellByTheStore to: 0 ]
		raise: Error - MessageNotUnderstood.
		
	
	! !
!StoreFacadeTest methodsFor: 'tests' stamp: 'JPF 6/19/2021 10:00:37' prior: 50878130!
test04ShouldFailWhenAddsItemsToAnInexistentCart

	| storeFacade |
	
	storeFacade := StoreFacade validatingWith: self having: testObjectsFactory defaultCatalog.
	
	self 
		should: [ storeFacade add: 3 of: testObjectsFactory itemSellByTheStore to: 0 ]
		raise: Error - MessageNotUnderstood
		withMessageText: StoreFacade inexistentCart.
		
	
	! !
!StoreFacadeTest methodsFor: 'tests' stamp: 'JPF 6/19/2021 10:01:01' prior: 50878143!
test04ShouldFailWhenAddsItemsToAnInexistentCart

	| storeFacade |
	
	storeFacade := StoreFacade validatingWith: self having: testObjectsFactory defaultCatalog.
	
	self 
		should: [ storeFacade add: 3 of: testObjectsFactory itemSellByTheStore to: 0 ]
		raise: Error - MessageNotUnderstood
		withMessageText: StoreFacade inexistentCartErrorMessage.
		
	
	! !

!testRun: #StoreFacadeTest #test04ShouldFailWhenAddsItemsToAnInexistentCart stamp: 'JPF 6/19/2021 10:01:06'!
ERROR!

!testRun: #StoreFacadeTest #test04ShouldFailWhenAddsItemsToAnInexistentCart stamp: 'JPF 6/19/2021 10:01:06'!
ERROR!
!StoreFacade class methodsFor: 'error descriptions' stamp: 'JPF 6/19/2021 10:01:18'!
inexistentCartErrorMessage
	self shouldBeImplemented.! !
!StoreFacade class methodsFor: 'error descriptions' stamp: 'JPF 6/19/2021 10:01:36' prior: 50878179!
inexistentCartErrorMessage
	
	^ 'Inexistent cart'! !

!testRun: #StoreFacadeTest #test04ShouldFailWhenAddsItemsToAnInexistentCart stamp: 'JPF 6/19/2021 10:01:40'!
FAILURE!
!StoreFacade methodsFor: 'actions' stamp: 'JPF 6/19/2021 10:02:37' prior: 50877689!
add: aQuantity of: anItem to: aCartId 
	
	| cart |
	
	cart := cartRepository at: aCartId ifAbsent: [ self error: StoreFacade inexistentCartErrorMessage ].
	
	cart add: aQuantity of: anItem.! !

!testRun: #StoreFacadeTest #test01ShouldFailToCreateCartWhenUserIdOrPasswordAreIncorrect stamp: 'JPF 6/19/2021 10:02:53'!
PASSED!

!testRun: #StoreFacadeTest #test02ShouldCreateACartAndBeEmptyWhenListed stamp: 'JPF 6/19/2021 10:02:53'!
PASSED!

!testRun: #StoreFacadeTest #test03ShouldAddAnItemToTheCart stamp: 'JPF 6/19/2021 10:02:53'!
PASSED!

!testRun: #StoreFacadeTest #test04ShouldFailWhenAddsItemsToAnInexistentCart stamp: 'JPF 6/19/2021 10:02:53'!
PASSED!
!StoreFacadeTest methodsFor: 'tests' stamp: 'JPF 6/19/2021 10:03:30'!
test04ShouldFailWhenTryToAddItemsToAnInexistentCart

	| storeFacade |
	
	storeFacade := StoreFacade validatingWith: self having: testObjectsFactory defaultCatalog.
	
	self 
		should: [ storeFacade add: 3 of: testObjectsFactory itemSellByTheStore to: 0 ]
		raise: Error - MessageNotUnderstood
		withMessageText: StoreFacade inexistentCartErrorMessage.
		
	
	! !

!methodRemoval: StoreFacadeTest #test04ShouldFailWhenAddsItemsToAnInexistentCart stamp: 'JPF 6/19/2021 10:03:30'!
test04ShouldFailWhenAddsItemsToAnInexistentCart

	| storeFacade |
	
	storeFacade := StoreFacade validatingWith: self having: testObjectsFactory defaultCatalog.
	
	self 
		should: [ storeFacade add: 3 of: testObjectsFactory itemSellByTheStore to: 0 ]
		raise: Error - MessageNotUnderstood
		withMessageText: StoreFacade inexistentCartErrorMessage.
		
	
	!
!StoreFacadeTest methodsFor: 'tests' stamp: 'JPF 6/19/2021 10:04:05'!
test05ShouldFailWhenTryToListAnInexistentCart

	| storeFacade |
	
	storeFacade := StoreFacade validatingWith: self having: testObjectsFactory defaultCatalog.
	
	self 
		should: [ storeFacade listCart: 0 ]
		raise: Error - MessageNotUnderstood
		withMessageText: StoreFacade inexistentCartErrorMessage.
		
	
	! !

!testRun: #StoreFacadeTest #test01ShouldFailToCreateCartWhenUserIdOrPasswordAreIncorrect stamp: 'JPF 6/19/2021 10:04:10'!
PASSED!

!testRun: #StoreFacadeTest #test02ShouldCreateACartAndBeEmptyWhenListed stamp: 'JPF 6/19/2021 10:04:10'!
PASSED!

!testRun: #StoreFacadeTest #test03ShouldAddAnItemToTheCart stamp: 'JPF 6/19/2021 10:04:10'!
PASSED!

!testRun: #StoreFacadeTest #test04ShouldFailWhenTryToAddItemsToAnInexistentCart stamp: 'JPF 6/19/2021 10:04:10'!
PASSED!

!testRun: #StoreFacadeTest #test05ShouldFailWhenTryToListAnInexistentCart stamp: 'JPF 6/19/2021 10:04:10'!
FAILURE!

!testRun: #StoreFacadeTest #test05ShouldFailWhenTryToListAnInexistentCart stamp: 'JPF 6/19/2021 10:04:10'!
FAILURE!
!StoreFacade methodsFor: 'queries' stamp: 'JPF 6/19/2021 10:05:11' prior: 50878024!
listCart: aCartId
	
	^ (cartRepository at: aCartId ifAbsent: [ self error: self class inexistentCartErrorMessage ]) items.! !

!testRun: #StoreFacadeTest #test01ShouldFailToCreateCartWhenUserIdOrPasswordAreIncorrect stamp: 'JPF 6/19/2021 10:05:20'!
PASSED!

!testRun: #StoreFacadeTest #test02ShouldCreateACartAndBeEmptyWhenListed stamp: 'JPF 6/19/2021 10:05:20'!
PASSED!

!testRun: #StoreFacadeTest #test03ShouldAddAnItemToTheCart stamp: 'JPF 6/19/2021 10:05:20'!
PASSED!

!testRun: #StoreFacadeTest #test04ShouldFailWhenTryToAddItemsToAnInexistentCart stamp: 'JPF 6/19/2021 10:05:20'!
PASSED!

!testRun: #StoreFacadeTest #test05ShouldFailWhenTryToListAnInexistentCart stamp: 'JPF 6/19/2021 10:05:20'!
PASSED!
!StoreFacade methodsFor: 'queries' stamp: 'JPF 6/19/2021 10:05:54'!
findCart: aCartId

	^ cartRepository at: aCartId ifAbsent: [ self error: self class inexistentCartErrorMessage ]! !
!StoreFacade methodsFor: 'queries' stamp: 'JPF 6/19/2021 10:05:54' prior: 50878279!
listCart: aCartId
	
	^ (self findCart: aCartId) items.! !
!StoreFacade methodsFor: 'actions' stamp: 'JPF 6/19/2021 10:06:39' prior: 50878192!
add: aQuantity of: anItem to: aCartId 
	
	| cart |
	
	cart := self findCart: aCartId.
	
	cart add: aQuantity of: anItem.! !

!testRun: #StoreFacadeTest #test01ShouldFailToCreateCartWhenUserIdOrPasswordAreIncorrect stamp: 'JPF 6/19/2021 10:06:45'!
PASSED!

!testRun: #StoreFacadeTest #test02ShouldCreateACartAndBeEmptyWhenListed stamp: 'JPF 6/19/2021 10:06:45'!
PASSED!

!testRun: #StoreFacadeTest #test03ShouldAddAnItemToTheCart stamp: 'JPF 6/19/2021 10:06:45'!
PASSED!

!testRun: #StoreFacadeTest #test04ShouldFailWhenTryToAddItemsToAnInexistentCart stamp: 'JPF 6/19/2021 10:06:45'!
PASSED!

!testRun: #StoreFacadeTest #test05ShouldFailWhenTryToListAnInexistentCart stamp: 'JPF 6/19/2021 10:06:45'!
PASSED!
!StoreFacade methodsFor: 'private' stamp: 'JPF 6/19/2021 10:08:46' prior: 50877754!
nextCartId
	
	"| cartId |
	
	cartId := cartIdSequence.
	cartIdSequence := cartIdSequence + 1.
	
	^ cartId"
	
	^ 1.! !

!testRun: #StoreFacadeTest #test01ShouldFailToCreateCartWhenUserIdOrPasswordAreIncorrect stamp: 'JPF 6/19/2021 10:08:49'!
PASSED!

!testRun: #StoreFacadeTest #test02ShouldCreateACartAndBeEmptyWhenListed stamp: 'JPF 6/19/2021 10:08:49'!
PASSED!

!testRun: #StoreFacadeTest #test03ShouldAddAnItemToTheCart stamp: 'JPF 6/19/2021 10:08:49'!
PASSED!

!testRun: #StoreFacadeTest #test04ShouldFailWhenTryToAddItemsToAnInexistentCart stamp: 'JPF 6/19/2021 10:08:49'!
PASSED!

!testRun: #StoreFacadeTest #test05ShouldFailWhenTryToListAnInexistentCart stamp: 'JPF 6/19/2021 10:08:49'!
PASSED!
!StoreFacadeTest methodsFor: 'tests' stamp: 'JPF 6/19/2021 10:11:50'!
test06ShouldAddAnItemToTheCorrectCart

	| storeFacade cartItemsNotEmpty cartIdToAdd cartIdEmpty cartItemsEmpty |
	
	storeFacade := StoreFacade validatingWith: self having: testObjectsFactory defaultCatalog.
	
	cartIdToAdd := storeFacade createCartFor: testObjectsFactory clientId withPassword: testObjectsFactory password.
	storeFacade add: 3 of: testObjectsFactory itemSellByTheStore to: cartIdToAdd.
	cartItemsNotEmpty := storeFacade listCart: cartIdToAdd.
	
	cartIdEmpty := storeFacade createCartFor: testObjectsFactory clientId withPassword: testObjectsFactory password.
	cartItemsEmpty := storeFacade listCart: cartIdEmpty.
	
	self assert: cartItemsNotEmpty size = 3.
	
	cartItemsNotEmpty do: [ :cartItem | self assert: cartItem = testObjectsFactory itemSellByTheStore ]! !
!StoreFacadeTest methodsFor: 'tests' stamp: 'JPF 6/19/2021 10:12:50' prior: 50878366!
test06ShouldAddAnItemToTheCorrectCart

	| storeFacade cartItemsNotEmpty cartIdToAdd cartIdEmpty cartItemsEmpty |
	
	storeFacade := StoreFacade validatingWith: self having: testObjectsFactory defaultCatalog.
	
	cartIdEmpty := storeFacade createCartFor: testObjectsFactory clientId withPassword: testObjectsFactory password.
	cartIdToAdd := storeFacade createCartFor: testObjectsFactory clientId withPassword: testObjectsFactory password.
	
	storeFacade add: 3 of: testObjectsFactory itemSellByTheStore to: cartIdToAdd.
	cartItemsNotEmpty := storeFacade listCart: cartIdToAdd.
	
	
	cartItemsEmpty := storeFacade listCart: cartIdEmpty.

	self assert: cartItemsNotEmpty size = 3.
	cartItemsNotEmpty do: [ :cartItem | self assert: cartItem = testObjectsFactory itemSellByTheStore ]! !
!StoreFacadeTest methodsFor: 'tests' stamp: 'JPF 6/19/2021 10:13:11' prior: 50878394!
test06ShouldAddAnItemToTheCorrectCart

	| storeFacade cartItemsNotEmpty cartIdToAdd cartIdEmpty cartItemsEmpty |
	
	storeFacade := StoreFacade validatingWith: self having: testObjectsFactory defaultCatalog.
	
	cartIdEmpty := storeFacade createCartFor: testObjectsFactory clientId withPassword: testObjectsFactory password.
	cartIdToAdd := storeFacade createCartFor: testObjectsFactory clientId withPassword: testObjectsFactory password.
	
	storeFacade add: 3 of: testObjectsFactory itemSellByTheStore to: cartIdToAdd.
	cartItemsNotEmpty := storeFacade listCart: cartIdToAdd.
	
	
	cartItemsEmpty := storeFacade listCart: cartIdEmpty.

	self assert: cartItemsNotEmpty size = 3.
	cartItemsNotEmpty do: [ :cartItem | self assert: cartItem = testObjectsFactory itemSellByTheStore ].
	
	self assert: cartItemsEmpty isEmpty! !

!testRun: #StoreFacadeTest #test06ShouldAddAnItemToTheCorrectCart stamp: 'JPF 6/19/2021 10:13:14'!
FAILURE!

!testRun: #StoreFacadeTest #test06ShouldAddAnItemToTheCorrectCart stamp: 'JPF 6/19/2021 10:13:14'!
FAILURE!
!StoreFacadeTest methodsFor: 'tests' stamp: 'JPF 6/19/2021 10:13:39' prior: 50878422!
test06ShouldAddAnItemToTheCorrectCart

	| storeFacade cartItemsNotEmpty cartIdToAdd cartIdEmpty cartItemsEmpty |
	
	storeFacade := StoreFacade validatingWith: self having: testObjectsFactory defaultCatalog.
	
	cartIdEmpty := storeFacade createCartFor: testObjectsFactory clientId withPassword: testObjectsFactory password.
	cartIdToAdd := storeFacade createCartFor: testObjectsFactory clientId withPassword: testObjectsFactory password.
	
	storeFacade add: 3 of: testObjectsFactory itemSellByTheStore to: cartIdToAdd.
	cartItemsNotEmpty := storeFacade listCart: cartIdToAdd.
	
	cartItemsEmpty := storeFacade listCart: cartIdEmpty.

	self assert: cartItemsNotEmpty size = 3.
	cartItemsNotEmpty do: [ :cartItem | self assert: cartItem = testObjectsFactory itemSellByTheStore ].
	
	self assert: cartItemsEmpty isEmpty! !
!StoreFacade methodsFor: 'private' stamp: 'JPF 6/19/2021 10:13:57' prior: 50878341!
nextCartId
	
	| cartId |
	
	cartId := cartIdSequence.
	cartIdSequence := cartIdSequence + 1.
	
	^ cartId! !

!testRun: #StoreFacadeTest #test01ShouldFailToCreateCartWhenUserIdOrPasswordAreIncorrect stamp: 'JPF 6/19/2021 10:14:00'!
PASSED!

!testRun: #StoreFacadeTest #test02ShouldCreateACartAndBeEmptyWhenListed stamp: 'JPF 6/19/2021 10:14:00'!
PASSED!

!testRun: #StoreFacadeTest #test03ShouldAddAnItemToTheCart stamp: 'JPF 6/19/2021 10:14:00'!
PASSED!

!testRun: #StoreFacadeTest #test04ShouldFailWhenTryToAddItemsToAnInexistentCart stamp: 'JPF 6/19/2021 10:14:00'!
PASSED!

!testRun: #StoreFacadeTest #test05ShouldFailWhenTryToListAnInexistentCart stamp: 'JPF 6/19/2021 10:14:00'!
PASSED!

!testRun: #StoreFacadeTest #test06ShouldAddAnItemToTheCorrectCart stamp: 'JPF 6/19/2021 10:14:00'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'JPF 6/19/2021 10:19:18'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'JPF 6/19/2021 10:19:18'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'JPF 6/19/2021 10:19:18'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'JPF 6/19/2021 10:19:18'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'JPF 6/19/2021 10:19:18'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'JPF 6/19/2021 10:19:18'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'JPF 6/19/2021 10:19:18'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'JPF 6/19/2021 10:19:18'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'JPF 6/19/2021 10:19:18'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'JPF 6/19/2021 10:19:18'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'JPF 6/19/2021 10:19:18'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'JPF 6/19/2021 10:19:18'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'JPF 6/19/2021 10:19:18'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'JPF 6/19/2021 10:19:18'!
PASSED!

!testRun: #StoreFacadeTest #test01ShouldFailToCreateCartWhenUserIdOrPasswordAreIncorrect stamp: 'JPF 6/19/2021 10:19:18'!
PASSED!

!testRun: #StoreFacadeTest #test02ShouldCreateACartAndBeEmptyWhenListed stamp: 'JPF 6/19/2021 10:19:18'!
PASSED!

!testRun: #StoreFacadeTest #test03ShouldAddAnItemToTheCart stamp: 'JPF 6/19/2021 10:19:18'!
PASSED!

!testRun: #StoreFacadeTest #test04ShouldFailWhenTryToAddItemsToAnInexistentCart stamp: 'JPF 6/19/2021 10:19:18'!
PASSED!

!testRun: #StoreFacadeTest #test05ShouldFailWhenTryToListAnInexistentCart stamp: 'JPF 6/19/2021 10:19:18'!
PASSED!

!testRun: #StoreFacadeTest #test06ShouldAddAnItemToTheCorrectCart stamp: 'JPF 6/19/2021 10:19:18'!
PASSED!

----SNAPSHOT----(19 June 2021 10:48:13) CaraInternaInterfaz.image priorSource: 17467483!

----QUIT----(19 June 2021 11:06:04) CaraInternaInterfaz.image priorSource: 17501796!

----STARTUP---- (20 June 2021 10:01:03) as /Users/juan.ferrino/CuisUniversity/CaraInternaInterfaz.image!

!StoreTestObjectsFactory methodsFor: 'storeFacade' stamp: 'JPF 6/20/2021 10:06:44'!
createStoreFacade
	
	^self! !
!StoreTestObjectsFactory methodsFor: 'storeFacade' stamp: 'JPF 6/20/2021 10:07:27' prior: 50878591!
createStoreFacade
	
	^ StoreFacade validatingWith: self having: self defaultCatalog.! !

!classDefinition: #StoreTestObjectsFactory category: 'TusLibros' stamp: 'JPF 6/20/2021 10:08:30'!
Object subclass: #StoreTestObjectsFactory
	instanceVariableNames: 'today validateUserBehaviour'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreTestObjectsFactory methodsFor: 'client validator protocol' stamp: 'JPF 6/20/2021 10:08:29'!
validateUser: aClientId withPassword: aPassword

	validateUserBehaviour value: aClientId value: aPassword! !
!StoreFacadeTest methodsFor: 'setUp' stamp: 'JPF 6/20/2021 10:09:01' prior: 50877428 overrides: 16927572!
setUp 

	testObjectsFactory := StoreTestObjectsFactory new.
	! !
!StoreTestObjectsFactory methodsFor: 'initialization' stamp: 'JPF 6/20/2021 10:09:21' prior: 50876887 overrides: 16896425!
initialize

	today := DateAndTime now.
	validateUserBehaviour := [ :clientIdArg :passwordArg | ].! !
!StoreTestObjectsFactory methodsFor: 'client validator protocol' stamp: 'JPF 6/20/2021 10:13:28'!
validateUserBehaviour: aValidateUserBehaviour

	validateUserBehaviour := aValidateUserBehaviour ! !
!StoreFacadeTest methodsFor: 'tests' stamp: 'JPF 6/20/2021 10:14:35' prior: 50877917!
test01ShouldFailToCreateCartWhenUserIdOrPasswordAreIncorrect

	| clientId password validatedClientId validatedPassword storeFacade |
	
	clientId := 'clientId'.
	password := 'password'.
	
	testObjectsFactory validateUserBehaviour: [ :clientIdArg :passwordArg |
		validatedClientId := clientIdArg.
		validatedPassword := passwordArg.
		self error: ClientValidator clientIdOrPasswordAreIncorrect.
		].
	
	storeFacade := StoreFacade validatingWith: self having: testObjectsFactory defaultCatalog.

	
	self 
		should: [ storeFacade createCartFor: clientId withPassword: password ] 
		raise: Error - MessageNotUnderstood 
		withMessageText: ClientValidator clientIdOrPasswordAreIncorrect.
		
	self assert: password = validatedPassword.
	self assert: clientId = validatedClientId.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'JPF 6/20/2021 10:14:47'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'JPF 6/20/2021 10:14:47'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'JPF 6/20/2021 10:14:47'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'JPF 6/20/2021 10:14:47'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'JPF 6/20/2021 10:14:47'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'JPF 6/20/2021 10:14:47'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'JPF 6/20/2021 10:14:47'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'JPF 6/20/2021 10:14:47'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'JPF 6/20/2021 10:14:47'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'JPF 6/20/2021 10:14:47'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'JPF 6/20/2021 10:14:47'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'JPF 6/20/2021 10:14:47'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'JPF 6/20/2021 10:14:47'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'JPF 6/20/2021 10:14:47'!
PASSED!

!testRun: #StoreFacadeTest #test01ShouldFailToCreateCartWhenUserIdOrPasswordAreIncorrect stamp: 'JPF 6/20/2021 10:14:47'!
ERROR!

!testRun: #StoreFacadeTest #test02ShouldCreateACartAndBeEmptyWhenListed stamp: 'JPF 6/20/2021 10:14:47'!
ERROR!

!testRun: #StoreFacadeTest #test03ShouldAddAnItemToTheCart stamp: 'JPF 6/20/2021 10:14:47'!
ERROR!

!testRun: #StoreFacadeTest #test04ShouldFailWhenTryToAddItemsToAnInexistentCart stamp: 'JPF 6/20/2021 10:14:47'!
PASSED!

!testRun: #StoreFacadeTest #test05ShouldFailWhenTryToListAnInexistentCart stamp: 'JPF 6/20/2021 10:14:47'!
PASSED!

!testRun: #StoreFacadeTest #test06ShouldAddAnItemToTheCorrectCart stamp: 'JPF 6/20/2021 10:14:47'!
ERROR!

!testRun: #StoreFacadeTest #test01ShouldFailToCreateCartWhenUserIdOrPasswordAreIncorrect stamp: 'JPF 6/20/2021 10:15:14'!
ERROR!

!methodRemoval: StoreFacadeTest #validateUser:withPassword: stamp: 'JPF 6/20/2021 10:16:25'!
validateUser: aClientId withPassword: aPassword

	validateUserBehaviour value: aClientId value: aPassword!

TestCase subclass: #StoreFacadeTest
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #StoreFacadeTest category: 'TusLibros' stamp: 'JPF 6/20/2021 10:16:37'!
TestCase subclass: #StoreFacadeTest
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreFacadeTest methodsFor: 'tests' stamp: 'JPF 6/20/2021 10:17:14' prior: 50878637!
test01ShouldFailToCreateCartWhenUserIdOrPasswordAreIncorrect

	| clientId password validatedClientId validatedPassword storeFacade |
	
	clientId := 'clientId'.
	password := 'password'.
	
	testObjectsFactory validateUserBehaviour: [ :clientIdArg :passwordArg |
		validatedClientId := clientIdArg.
		validatedPassword := passwordArg.
		self error: ClientValidator clientIdOrPasswordAreIncorrect.
		].
	
	storeFacade := testObjectsFactory createStoreFacade.

	
	self 
		should: [ storeFacade createCartFor: clientId withPassword: password ] 
		raise: Error - MessageNotUnderstood 
		withMessageText: ClientValidator clientIdOrPasswordAreIncorrect.
		
	self assert: password = validatedPassword.
	self assert: clientId = validatedClientId.! !
!StoreFacadeTest methodsFor: 'tests' stamp: 'JPF 6/20/2021 10:17:20' prior: 50878754!
test01ShouldFailToCreateCartWhenUserIdOrPasswordAreIncorrect

	| clientId password validatedClientId validatedPassword storeFacade |
	
	clientId := 'clientId'.
	password := 'password'.
	
	testObjectsFactory validateUserBehaviour: [ :clientIdArg :passwordArg |
		validatedClientId := clientIdArg.
		validatedPassword := passwordArg.
		self error: ClientValidator clientIdOrPasswordAreIncorrect.
		].
	
	storeFacade := testObjectsFactory createStoreFacade.
	
	self 
		should: [ storeFacade createCartFor: clientId withPassword: password ] 
		raise: Error - MessageNotUnderstood 
		withMessageText: ClientValidator clientIdOrPasswordAreIncorrect.
		
	self assert: password = validatedPassword.
	self assert: clientId = validatedClientId.! !
!StoreFacadeTest methodsFor: 'tests' stamp: 'JPF 6/20/2021 10:17:37' prior: 50877944!
test02ShouldCreateACartAndBeEmptyWhenListed

	| storeFacade cart cartId |
	
	storeFacade := testObjectsFactory createStoreFacade.
	
	cartId := storeFacade createCartFor: testObjectsFactory clientId withPassword: testObjectsFactory password.
	
	cart := storeFacade listCart: cartId.
	
	self assert: cart isEmpty! !
!StoreFacadeTest methodsFor: 'tests' stamp: 'JPF 6/20/2021 10:17:45' prior: 50878100!
test03ShouldAddAnItemToTheCart

	| storeFacade cartItems cartId |
	
	storeFacade := testObjectsFactory createStoreFacade.
	
	cartId := storeFacade createCartFor: testObjectsFactory clientId withPassword: testObjectsFactory password.
	
	storeFacade add: 3 of: testObjectsFactory itemSellByTheStore to: cartId.
	
	cartItems := storeFacade listCart: cartId.
	
	self assert: cartItems size = 3.
	
	cartItems do: [ :cartItem | self assert: cartItem = testObjectsFactory itemSellByTheStore ]! !
!StoreFacadeTest methodsFor: 'tests' stamp: 'JPF 6/20/2021 10:17:52' prior: 50878215!
test04ShouldFailWhenTryToAddItemsToAnInexistentCart

	| storeFacade |
	
	storeFacade := testObjectsFactory createStoreFacade.
	
	self 
		should: [ storeFacade add: 3 of: testObjectsFactory itemSellByTheStore to: 0 ]
		raise: Error - MessageNotUnderstood
		withMessageText: StoreFacade inexistentCartErrorMessage.
		
	
	! !
!StoreFacadeTest methodsFor: 'tests' stamp: 'JPF 6/20/2021 10:18:01' prior: 50878244!
test05ShouldFailWhenTryToListAnInexistentCart

	| storeFacade |
	
	storeFacade := testObjectsFactory createStoreFacade.
	
	self 
		should: [ storeFacade listCart: 0 ]
		raise: Error - MessageNotUnderstood
		withMessageText: StoreFacade inexistentCartErrorMessage.
		
	
	! !
!StoreFacadeTest methodsFor: 'tests' stamp: 'JPF 6/20/2021 10:18:09' prior: 50878458!
test06ShouldAddAnItemToTheCorrectCart

	| storeFacade cartItemsNotEmpty cartIdToAdd cartIdEmpty cartItemsEmpty |
	
	storeFacade := testObjectsFactory createStoreFacade.
	
	cartIdEmpty := storeFacade createCartFor: testObjectsFactory clientId withPassword: testObjectsFactory password.
	cartIdToAdd := storeFacade createCartFor: testObjectsFactory clientId withPassword: testObjectsFactory password.
	
	storeFacade add: 3 of: testObjectsFactory itemSellByTheStore to: cartIdToAdd.
	cartItemsNotEmpty := storeFacade listCart: cartIdToAdd.
	
	cartItemsEmpty := storeFacade listCart: cartIdEmpty.

	self assert: cartItemsNotEmpty size = 3.
	cartItemsNotEmpty do: [ :cartItem | self assert: cartItem = testObjectsFactory itemSellByTheStore ].
	
	self assert: cartItemsEmpty isEmpty! !

!testRun: #StoreFacadeTest #test01ShouldFailToCreateCartWhenUserIdOrPasswordAreIncorrect stamp: 'JPF 6/20/2021 10:18:14'!
PASSED!

!testRun: #StoreFacadeTest #test02ShouldCreateACartAndBeEmptyWhenListed stamp: 'JPF 6/20/2021 10:18:14'!
PASSED!

!testRun: #StoreFacadeTest #test03ShouldAddAnItemToTheCart stamp: 'JPF 6/20/2021 10:18:14'!
PASSED!

!testRun: #StoreFacadeTest #test04ShouldFailWhenTryToAddItemsToAnInexistentCart stamp: 'JPF 6/20/2021 10:18:14'!
PASSED!

!testRun: #StoreFacadeTest #test05ShouldFailWhenTryToListAnInexistentCart stamp: 'JPF 6/20/2021 10:18:14'!
PASSED!

!testRun: #StoreFacadeTest #test06ShouldAddAnItemToTheCorrectCart stamp: 'JPF 6/20/2021 10:18:14'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'JPF 6/20/2021 10:18:16'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'JPF 6/20/2021 10:18:16'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'JPF 6/20/2021 10:18:16'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'JPF 6/20/2021 10:18:16'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'JPF 6/20/2021 10:18:16'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'JPF 6/20/2021 10:18:16'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'JPF 6/20/2021 10:18:16'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'JPF 6/20/2021 10:18:16'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'JPF 6/20/2021 10:18:16'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'JPF 6/20/2021 10:18:16'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'JPF 6/20/2021 10:18:16'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'JPF 6/20/2021 10:18:16'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'JPF 6/20/2021 10:18:16'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'JPF 6/20/2021 10:18:16'!
PASSED!

!testRun: #StoreFacadeTest #test01ShouldFailToCreateCartWhenUserIdOrPasswordAreIncorrect stamp: 'JPF 6/20/2021 10:18:16'!
PASSED!

!testRun: #StoreFacadeTest #test02ShouldCreateACartAndBeEmptyWhenListed stamp: 'JPF 6/20/2021 10:18:16'!
PASSED!

!testRun: #StoreFacadeTest #test03ShouldAddAnItemToTheCart stamp: 'JPF 6/20/2021 10:18:16'!
PASSED!

!testRun: #StoreFacadeTest #test04ShouldFailWhenTryToAddItemsToAnInexistentCart stamp: 'JPF 6/20/2021 10:18:16'!
PASSED!

!testRun: #StoreFacadeTest #test05ShouldFailWhenTryToListAnInexistentCart stamp: 'JPF 6/20/2021 10:18:16'!
PASSED!

!testRun: #StoreFacadeTest #test06ShouldAddAnItemToTheCorrectCart stamp: 'JPF 6/20/2021 10:18:16'!
PASSED!
!StoreFacadeTest methodsFor: 'tests' stamp: 'JPF 6/20/2021 10:25:51'!
test06ShouldReturnATransactionIdWhenCheckout

	| storeFacade cartItemsNotEmpty cartIdToAdd |
	
	storeFacade := testObjectsFactory createStoreFacade.

	cartIdToAdd := storeFacade createCartFor: testObjectsFactory clientId withPassword: testObjectsFactory password.
	
	storeFacade add: 3 of: testObjectsFactory itemSellByTheStore to: cartIdToAdd.
	cartItemsNotEmpty := storeFacade listCart: cartIdToAdd.


	self assert: cartItemsNotEmpty size = 3.
	cartItemsNotEmpty do: [ :cartItem | self assert: cartItem = testObjectsFactory itemSellByTheStore ].
! !
!StoreFacadeTest methodsFor: 'tests' stamp: 'JPF 6/20/2021 10:26:03'!
test07ShouldReturnATransactionIdWhenCheckout

	| storeFacade cartItemsNotEmpty cartIdToAdd |
	
	storeFacade := testObjectsFactory createStoreFacade.

	cartIdToAdd := storeFacade createCartFor: testObjectsFactory clientId withPassword: testObjectsFactory password.
	
	storeFacade add: 3 of: testObjectsFactory itemSellByTheStore to: cartIdToAdd.
	cartItemsNotEmpty := storeFacade listCart: cartIdToAdd.


	self assert: cartItemsNotEmpty size = 3.
	cartItemsNotEmpty do: [ :cartItem | self assert: cartItem = testObjectsFactory itemSellByTheStore ].
! !

!methodRemoval: StoreFacadeTest #test06ShouldReturnATransactionIdWhenCheckout stamp: 'JPF 6/20/2021 10:26:03'!
test06ShouldReturnATransactionIdWhenCheckout

	| storeFacade cartItemsNotEmpty cartIdToAdd |
	
	storeFacade := testObjectsFactory createStoreFacade.

	cartIdToAdd := storeFacade createCartFor: testObjectsFactory clientId withPassword: testObjectsFactory password.
	
	storeFacade add: 3 of: testObjectsFactory itemSellByTheStore to: cartIdToAdd.
	cartItemsNotEmpty := storeFacade listCart: cartIdToAdd.


	self assert: cartItemsNotEmpty size = 3.
	cartItemsNotEmpty do: [ :cartItem | self assert: cartItem = testObjectsFactory itemSellByTheStore ].
!
!StoreFacadeTest methodsFor: 'tests' stamp: 'JPF 6/20/2021 10:26:21' prior: 50878998!
test07ShouldReturnATransactionIdWhenCheckout

	| storeFacade cartItemsNotEmpty cartId |
	
	storeFacade := testObjectsFactory createStoreFacade.

	cartId := storeFacade createCartFor: testObjectsFactory clientId withPassword: testObjectsFactory password.
	
	storeFacade add: 3 of: testObjectsFactory itemSellByTheStore to: cartId.
	cartItemsNotEmpty := storeFacade listCart: cartId.


	self assert: cartItemsNotEmpty size = 3.
	cartItemsNotEmpty do: [ :cartItem | self assert: cartItem = testObjectsFactory itemSellByTheStore ].
! !
!StoreFacadeTest methodsFor: 'tests' stamp: 'JPF 6/20/2021 10:26:59' prior: 50879039!
test07ShouldReturnATransactionIdWhenCheckout

	| storeFacade cartId |
	
	storeFacade := testObjectsFactory createStoreFacade.

	cartId := storeFacade createCartFor: testObjectsFactory clientId withPassword: testObjectsFactory password.
	
	storeFacade add: 3 of: testObjectsFactory itemSellByTheStore to: cartId.

! !
!StoreFacadeTest methodsFor: 'tests' stamp: 'JPF 6/20/2021 10:27:53' prior: 50879059!
test07ShouldReturnATransactionIdWhenCheckout

	| storeFacade cartId |
	
	storeFacade := testObjectsFactory createStoreFacade.

	cartId := storeFacade createCartFor: testObjectsFactory clientId withPassword: testObjectsFactory password.
	
	storeFacade add: 3 of: testObjectsFactory itemSellByTheStore to: cartId.
	
	

! !
!StoreFacadeTest methodsFor: 'tests' stamp: 'JPF 6/20/2021 10:28:46'!
test07ShouldReturnADifferentTransactionIdPerCheckout

	| storeFacade cartId |
	
	storeFacade := testObjectsFactory createStoreFacade.

	cartId := storeFacade createCartFor: testObjectsFactory clientId withPassword: testObjectsFactory password.
	
	storeFacade add: 3 of: testObjectsFactory itemSellByTheStore to: cartId.
	
	

! !

!methodRemoval: StoreFacadeTest #test07ShouldReturnATransactionIdWhenCheckout stamp: 'JPF 6/20/2021 10:28:46'!
test07ShouldReturnATransactionIdWhenCheckout

	| storeFacade cartId |
	
	storeFacade := testObjectsFactory createStoreFacade.

	cartId := storeFacade createCartFor: testObjectsFactory clientId withPassword: testObjectsFactory password.
	
	storeFacade add: 3 of: testObjectsFactory itemSellByTheStore to: cartId.
	
	

!
!StoreFacadeTest methodsFor: 'tests' stamp: 'JPF 6/20/2021 10:29:29' prior: 50879085!
test07ShouldReturnADifferentTransactionIdPerCheckout

	| storeFacade cartId |
	
	storeFacade := testObjectsFactory createStoreFacade.

	cartId := storeFacade createCartFor: testObjectsFactory clientId withPassword: testObjectsFactory password.
	storeFacade add: 3 of: testObjectsFactory itemSellByTheStore to: cartId.
	
	

! !
!StoreFacadeTest methodsFor: 'tests' stamp: 'JPF 6/20/2021 10:30:11' prior: 50879112!
test07ShouldReturnADifferentTransactionIdPerCheckout

	| storeFacade cartId cartId2 |
	
	storeFacade := testObjectsFactory createStoreFacade.

	cartId := storeFacade createCartFor: testObjectsFactory clientId withPassword: testObjectsFactory password.
	storeFacade add: 3 of: testObjectsFactory itemSellByTheStore to: cartId.
	
	cartId2 := storeFacade createCartFor: testObjectsFactory clientId withPassword: testObjectsFactory password.
	storeFacade add: 2 of: testObjectsFactory itemSellByTheStore to: cartId2.
	
	

! !
!StoreFacadeTest methodsFor: 'tests' stamp: 'JPF 6/20/2021 10:30:23' prior: 50879125!
test07ShouldReturnADifferentTransactionIdPerCheckout

	| storeFacade cartId1 cartId2 |
	
	storeFacade := testObjectsFactory createStoreFacade.

	cartId1 := storeFacade createCartFor: testObjectsFactory clientId withPassword: testObjectsFactory password.
	storeFacade add: 3 of: testObjectsFactory itemSellByTheStore to: cartId1.
	
	cartId2 := storeFacade createCartFor: testObjectsFactory clientId withPassword: testObjectsFactory password.
	storeFacade add: 2 of: testObjectsFactory itemSellByTheStore to: cartId2.
	
	

! !
!StoreFacadeTest methodsFor: 'tests' stamp: 'JPF 6/20/2021 10:34:57' prior: 50879144!
test07ShouldReturnADifferentTransactionIdPerCheckout

	| storeFacade cartId1 cartId2 transactionId1 |
	
	storeFacade := testObjectsFactory createStoreFacade.

	cartId1 := storeFacade createCartFor: testObjectsFactory clientId withPassword: testObjectsFactory password.
	storeFacade add: 3 of: testObjectsFactory itemSellByTheStore to: cartId1.
	transactionId1 := storeFacade checkOutCart: cartId1 payingWithCardN: '1111888811118888' of: 'Valid Client' expiringOn: ''.
	
	cartId2 := storeFacade createCartFor: testObjectsFactory clientId withPassword: testObjectsFactory password.
	storeFacade add: 2 of: testObjectsFactory itemSellByTheStore to: cartId2.
	
	

! !
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'JPF 6/20/2021 10:36:28'!
notExpiredCreditCardMonth

	^ Month month: today monthIndex year: today yearNumber + 1! !
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'JPF 6/20/2021 10:36:28' prior: 50876873!
notExpiredCreditCard
	
	^CreditCard expiringOn: (self notExpiredCreditCardMonth)! !
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'JPF 6/20/2021 10:36:37' prior: 50879194!
notExpiredCreditCard
	
	^CreditCard expiringOn: self notExpiredCreditCardMonth! !
!StoreFacadeTest methodsFor: 'tests' stamp: 'JPF 6/20/2021 10:37:06' prior: 50879164!
test07ShouldReturnADifferentTransactionIdPerCheckout

	| storeFacade cartId1 cartId2 transactionId1 |
	
	storeFacade := testObjectsFactory createStoreFacade.

	cartId1 := storeFacade createCartFor: testObjectsFactory clientId withPassword: testObjectsFactory password.
	storeFacade add: 3 of: testObjectsFactory itemSellByTheStore to: cartId1.
	transactionId1 := storeFacade checkOutCart: cartId1 payingWithCardN: '1111888811118888' of: testObjectsFactory notExpiredCreditCardMonth.
	
	cartId2 := storeFacade createCartFor: testObjectsFactory clientId withPassword: testObjectsFactory password.
	storeFacade add: 2 of: testObjectsFactory itemSellByTheStore to: cartId2.
	
	

! !
!StoreFacadeTest methodsFor: 'tests' stamp: 'JPF 6/20/2021 10:46:58' prior: 50879206!
test07ShouldReturnADifferentTransactionIdPerCheckout

	| storeFacade cartId1 cartId2 transactionId1 |
	
	storeFacade := testObjectsFactory createStoreFacade.

	cartId1 := storeFacade createCartFor: testObjectsFactory clientId withPassword: testObjectsFactory password.
	storeFacade add: 3 of: testObjectsFactory itemSellByTheStore to: cartId1.
	transactionId1 := storeFacade
		checkOutCart: cartId1
		payingWithCardNumber: testObjectsFactory creditCardNumber
		of: testObjectsFactory creditCardName
		expiringOn: testObjectsFactory notExpiredCreditCardMonth.
	
	cartId2 := storeFacade createCartFor: testObjectsFactory clientId withPassword: testObjectsFactory password.
	storeFacade add: 2 of: testObjectsFactory itemSellByTheStore to: cartId2.
	
	

! !
!StoreFacadeTest methodsFor: 'tests' stamp: 'JPF 6/20/2021 10:47:16' prior: 50879230!
test07ShouldReturnADifferentTransactionIdPerCheckout

	"| storeFacade cartId1 cartId2 transactionId1 |
	
	storeFacade := testObjectsFactory createStoreFacade.

	cartId1 := storeFacade createCartFor: testObjectsFactory clientId withPassword: testObjectsFactory password.
	storeFacade add: 3 of: testObjectsFactory itemSellByTheStore to: cartId1.
	transactionId1 := storeFacade
		checkOutCart: cartId1
		payingWithCardNumber: testObjectsFactory creditCardNumber
		of: testObjectsFactory creditCardName
		expiringOn: testObjectsFactory notExpiredCreditCardMonth.
	
	cartId2 := storeFacade createCartFor: testObjectsFactory clientId withPassword: testObjectsFactory password.
	storeFacade add: 2 of: testObjectsFactory itemSellByTheStore to: cartId2."
	
	

! !

TestCase subclass: #CreditCardTest
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCardTest category: 'TusLibros' stamp: 'JPF 6/20/2021 10:49:49'!
TestCase subclass: #CreditCardTest
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCardTest methodsFor: 'setUp' stamp: 'JPF 6/20/2021 10:50:30' overrides: 16927572!
setUp

	testObjectsFactory := StoreTestObjectsFactory new.! !
!CreditCardTest methodsFor: 'tests' stamp: 'JPF 6/20/2021 10:53:13'!
test01ShouldFailWhenTheNameIsEmpty

	self 
		should: [ 
			CreditCard
				withNumber: testObjectsFactory validCardNumber
				of: ''
				expirationOn: testObjectsFactory notExpiredCreditCardMonth ]
		raise: Error - MessageNotUnderstood 
		withMessageText: CreditCard canNotCreateACreditCardWithEmptyName.! !

!testRun: #CreditCardTest #test01ShouldFailWhenTheNameIsEmpty stamp: 'JPF 6/20/2021 10:53:42'!
ERROR!

!testRun: #CreditCardTest #test01ShouldFailWhenTheNameIsEmpty stamp: 'JPF 6/20/2021 10:53:42'!
ERROR!
!CreditCard class methodsFor: 'error descriptions' stamp: 'JPF 6/20/2021 10:53:56'!
canNotCreateACreditCardWithEmptyName
	self shouldBeImplemented.! !
!CreditCard class methodsFor: 'error descriptions' stamp: 'JPF 6/20/2021 10:54:45' prior: 50879320!
canNotCreateACreditCardWithEmptyName
	
	^ 'Credit card can not have an empty name'! !
!CreditCard class methodsFor: 'instance creation' stamp: 'JPF 6/20/2021 10:56:34'!
of: aName expiringOn: aMonth 
	
	^self new initializeExpiringOn: aMonth! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'JPF 6/20/2021 10:56:34' prior: 50879200!
notExpiredCreditCard
	
	^CreditCard of: aName expiringOn: self notExpiredCreditCardMonth! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'JPF 6/20/2021 10:56:34' prior: 50876880!
expiredCreditCard
	
	^CreditCard of: aName expiringOn: (Month month: today monthIndex year: today yearNumber - 1)! !

!methodRemoval: CreditCard class #expiringOn: stamp: 'JPF 6/20/2021 10:56:34'!
expiringOn: aMonth 
	
	^self new initializeExpiringOn: aMonth!
!CreditCard class methodsFor: 'instance creation' stamp: 'JPF 6/20/2021 10:57:39'!
withNumber: aCreditCardNumber of: aName expiringOn: aMonth 
	
	^self new initializeExpiringOn: aMonth! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'JPF 6/20/2021 10:57:39' prior: 50879338!
notExpiredCreditCard
	
	^CreditCard withNumber: aCreditCardNumber of: aName expiringOn: self notExpiredCreditCardMonth! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'JPF 6/20/2021 10:57:39' prior: 50879345!
expiredCreditCard
	
	^CreditCard withNumber: aCreditCardNumber of: aName expiringOn: (Month month: today monthIndex year: today yearNumber - 1)! !

!methodRemoval: CreditCard class #of:expiringOn: stamp: 'JPF 6/20/2021 10:57:39'!
of: aName expiringOn: aMonth 
	
	^self new initializeExpiringOn: aMonth!
!CreditCard methodsFor: 'initialization' stamp: 'JPF 6/20/2021 10:59:01'!
initializeWithNumber: aCreditCardNumber of: aName expiringOn: aMonth 
	
	expiration := aMonth ! !

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'JPF 6/20/2021 10:59:35'!
Object subclass: #CreditCard
	instanceVariableNames: 'expiration number'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'JPF 6/20/2021 10:59:36'!
Object subclass: #CreditCard
	instanceVariableNames: 'expiration number name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCard methodsFor: 'initialization' stamp: 'JPF 6/20/2021 10:59:33' prior: 50879383!
initializeWithNumber: aCreditCardNumber of: aName expiringOn: aMonth 
	
	expiration := aMonth.
	number := aCreditCardNumber.
	name := aName.! !
!CreditCard class methodsFor: 'instance creation' stamp: 'JPF 6/20/2021 11:00:04' prior: 50879356!
withNumber: aCreditCardNumber of: aName expiringOn: aMonth 
	
	^self new initializeWithNumber: aCreditCardNumber of: aName expiringOn: aMonth.! !

!methodRemoval: CreditCard #initializeExpiringOn: stamp: 'JPF 6/20/2021 11:00:12'!
initializeExpiringOn: aMonth 
	
	expiration := aMonth !
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'JPF 6/20/2021 11:00:52' prior: 50879363!
notExpiredCreditCard
	
	^CreditCard withNumber: self validCreditCardNumber of: self validCreditCardName expiringOn: self notExpiredCreditCardMonth! !
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'JPF 6/20/2021 11:01:12' prior: 50879425!
notExpiredCreditCard
	
	^CreditCard
		withNumber: self validCreditCardNumber
		of: self validCreditCardName
		expiringOn: self notExpiredCreditCardMonth! !
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'JPF 6/20/2021 11:01:38'!
validCreditCardNumber
	
	^ '1111888811118888'! !
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'JPF 6/20/2021 11:01:52'!
validCreditCardName
	
	^ 'Valid Name'! !
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'JPF 6/20/2021 11:02:25' prior: 50879371!
expiredCreditCard
	
	^CreditCard
		withNumber: self validCreditCardNumber 
		of: self validCreditCardNumber
		expiringOn: (Month month: today monthIndex year: today yearNumber - 1)! !
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'JPF 6/20/2021 11:02:41' prior: 50879451!
expiredCreditCard
	
	^ CreditCard
		withNumber: self validCreditCardNumber 
		of: self validCreditCardNumber
		expiringOn: (Month month: today monthIndex year: today yearNumber - 1)! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'JPF 6/20/2021 11:03:02'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'JPF 6/20/2021 11:03:02'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'JPF 6/20/2021 11:03:02'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'JPF 6/20/2021 11:03:02'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'JPF 6/20/2021 11:03:02'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'JPF 6/20/2021 11:03:02'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'JPF 6/20/2021 11:03:02'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'JPF 6/20/2021 11:03:02'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'JPF 6/20/2021 11:03:02'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'JPF 6/20/2021 11:03:02'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'JPF 6/20/2021 11:03:02'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'JPF 6/20/2021 11:03:02'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'JPF 6/20/2021 11:03:02'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'JPF 6/20/2021 11:03:02'!
PASSED!

!testRun: #CreditCardTest #test01ShouldFailWhenTheNameIsEmpty stamp: 'JPF 6/20/2021 11:03:02'!
ERROR!

!testRun: #StoreFacadeTest #test01ShouldFailToCreateCartWhenUserIdOrPasswordAreIncorrect stamp: 'JPF 6/20/2021 11:03:02'!
PASSED!

!testRun: #StoreFacadeTest #test02ShouldCreateACartAndBeEmptyWhenListed stamp: 'JPF 6/20/2021 11:03:02'!
PASSED!

!testRun: #StoreFacadeTest #test03ShouldAddAnItemToTheCart stamp: 'JPF 6/20/2021 11:03:02'!
PASSED!

!testRun: #StoreFacadeTest #test04ShouldFailWhenTryToAddItemsToAnInexistentCart stamp: 'JPF 6/20/2021 11:03:02'!
PASSED!

!testRun: #StoreFacadeTest #test05ShouldFailWhenTryToListAnInexistentCart stamp: 'JPF 6/20/2021 11:03:02'!
PASSED!

!testRun: #StoreFacadeTest #test06ShouldAddAnItemToTheCorrectCart stamp: 'JPF 6/20/2021 11:03:02'!
PASSED!

!testRun: #StoreFacadeTest #test07ShouldReturnADifferentTransactionIdPerCheckout stamp: 'JPF 6/20/2021 11:03:02'!
PASSED!

!testRun: #CreditCardTest #test01ShouldFailWhenTheNameIsEmpty stamp: 'JPF 6/20/2021 11:03:02'!
ERROR!
!CreditCardTest methodsFor: 'tests' stamp: 'JPF 6/20/2021 11:03:29' prior: 50879301!
test01ShouldFailWhenTheNameIsEmpty

	self 
		should: [ 
			CreditCard
				withNumber: testObjectsFactory validCreditCardNumber
				of: ''
				expirationOn: testObjectsFactory notExpiredCreditCardMonth ]
		raise: Error - MessageNotUnderstood 
		withMessageText: CreditCard canNotCreateACreditCardWithEmptyName.! !

!testRun: #CreditCardTest #test01ShouldFailWhenTheNameIsEmpty stamp: 'JPF 6/20/2021 11:03:32'!
ERROR!

!testRun: #CreditCardTest #test01ShouldFailWhenTheNameIsEmpty stamp: 'JPF 6/20/2021 11:03:32'!
ERROR!
!CreditCardTest methodsFor: 'tests' stamp: 'JPF 6/20/2021 11:04:47' prior: 50879546!
test01ShouldFailWhenTheNameIsEmpty

	self 
		should: [ 
			CreditCard
				withNumber: testObjectsFactory validCreditCardNumber
				of: ''
				expiringOn: testObjectsFactory notExpiredCreditCardMonth ]
		raise: Error - MessageNotUnderstood 
		withMessageText: CreditCard canNotCreateACreditCardWithEmptyName.! !

!testRun: #CreditCardTest #test01ShouldFailWhenTheNameIsEmpty stamp: 'JPF 6/20/2021 11:04:52'!
FAILURE!

!testRun: #CreditCardTest #test01ShouldFailWhenTheNameIsEmpty stamp: 'JPF 6/20/2021 11:04:52'!
FAILURE!
!CreditCard methodsFor: 'initialization' stamp: 'JPF 6/20/2021 11:06:42' prior: 50879404!
initializeWithNumber: aCreditCardNumber of: aName expiringOn: aMonth

	aName isEmpty 
		ifTrue: [ self error: self class canNotCreateACreditCardWithEmptyName ].
	
	expiration := aMonth.
	number := aCreditCardNumber.
	name := aName.! !

!testRun: #CreditCardTest #test01ShouldFailWhenTheNameIsEmpty stamp: 'JPF 6/20/2021 11:06:55'!
PASSED!
!CreditCardTest methodsFor: 'tests' stamp: 'JPF 6/20/2021 11:10:50'!
test02ShouldFailWhenTheNameIsAllWithespaceCharacters

	self 
		should: [ 
			CreditCard
				withNumber: testObjectsFactory validCreditCardNumber
				of: '       '
				expiringOn: testObjectsFactory notExpiredCreditCardMonth ]
		raise: Error - MessageNotUnderstood 
		withMessageText: CreditCard canNotCreateACreditCardWithAllWithespaceCharacters! !

!testRun: #CreditCardTest #test02ShouldFailWhenTheNameIsAllWithespaceCharacters stamp: 'JPF 6/20/2021 11:11:07'!
ERROR!

!testRun: #CreditCardTest #test02ShouldFailWhenTheNameIsAllWithespaceCharacters stamp: 'JPF 6/20/2021 11:11:07'!
ERROR!
!CreditCard class methodsFor: 'error descriptions' stamp: 'JPF 6/20/2021 11:11:16'!
canNotCreateACreditCardWithAllWithespaceCharacters
	self shouldBeImplemented.! !
!CreditCard class methodsFor: 'error descriptions' stamp: 'JPF 6/20/2021 11:11:46' prior: 50879620!
canNotCreateACreditCardWithAllWithespaceCharacters
	
	^ 'Credit card can not have a name with all whitespaces characters'! !
!CreditCard methodsFor: 'initialization' stamp: 'JPF 6/20/2021 11:12:37' prior: 50879585!
initializeWithNumber: aCreditCardNumber of: aName expiringOn: aMonth

	aName isEmpty 
		ifTrue: [ self error: self class canNotCreateACreditCardWithEmptyName ].
	aName withBlanksTrimmed isEmpty
		ifTrue: [ self error: self class canNotCreateACreditCardWithAllWithespaceCharacters ].
	
	expiration := aMonth.
	number := aCreditCardNumber.
	name := aName.! !

!testRun: #CreditCardTest #test01ShouldFailWhenTheNameIsEmpty stamp: 'JPF 6/20/2021 11:12:41'!
PASSED!

!testRun: #CreditCardTest #test02ShouldFailWhenTheNameIsAllWithespaceCharacters stamp: 'JPF 6/20/2021 11:12:41'!
PASSED!
!CreditCardTest methodsFor: 'tests' stamp: 'JPF 6/20/2021 11:14:27'!
test03ShouldFailWhenTheNameHasMoreThan30Characters

	self 
		should: [ 
			CreditCard
				withNumber: testObjectsFactory validCreditCardNumber
				of: 'NameWithMoreThanThirtyCharacter'
				expiringOn: testObjectsFactory notExpiredCreditCardMonth ]
		raise: Error - MessageNotUnderstood 
		withMessageText: CreditCard canNotCreateACreditCardWithANameWithMoreThan30Characters.! !

!testRun: #CreditCardTest #test03ShouldFailWhenTheNameHasMoreThan30Characters stamp: 'JPF 6/20/2021 11:14:31'!
ERROR!

!testRun: #CreditCardTest #test03ShouldFailWhenTheNameHasMoreThan30Characters stamp: 'JPF 6/20/2021 11:14:31'!
ERROR!
!CreditCard class methodsFor: 'error descriptions' stamp: 'JPF 6/20/2021 11:14:45'!
canNotCreateACreditCardWithANameWithMoreThan30Characters
	self shouldBeImplemented.! !
!CreditCard class methodsFor: 'error descriptions' stamp: 'JPF 6/20/2021 11:15:08' prior: 50879676!
canNotCreateACreditCardWithANameWithMoreThan30Characters
	
	^ 'Credit card can not have a name with more than 30 characters'! !

!testRun: #CreditCardTest #test01ShouldFailWhenTheNameIsEmpty stamp: 'JPF 6/20/2021 11:15:15'!
PASSED!

!testRun: #CreditCardTest #test02ShouldFailWhenTheNameIsAllWithespaceCharacters stamp: 'JPF 6/20/2021 11:15:15'!
PASSED!

!testRun: #CreditCardTest #test03ShouldFailWhenTheNameHasMoreThan30Characters stamp: 'JPF 6/20/2021 11:15:15'!
FAILURE!

!testRun: #CreditCardTest #test03ShouldFailWhenTheNameHasMoreThan30Characters stamp: 'JPF 6/20/2021 11:15:15'!
FAILURE!
!CreditCard methodsFor: 'initialization' stamp: 'JPF 6/20/2021 11:15:46' prior: 50879633!
initializeWithNumber: aCreditCardNumber of: aName expiringOn: aMonth

	aName isEmpty 
		ifTrue: [ self error: self class canNotCreateACreditCardWithEmptyName ].
	aName withBlanksTrimmed isEmpty
		ifTrue: [ self error: self class canNotCreateACreditCardWithAllWithespaceCharacters ].
	aName size > 30 
		ifTrue: [ self error: self class canNotCreateACreditCardWithANameWithMoreThan30Characters ].
	
	expiration := aMonth.
	number := aCreditCardNumber.
	name := aName.! !

!testRun: #CreditCardTest #test01ShouldFailWhenTheNameIsEmpty stamp: 'JPF 6/20/2021 11:15:51'!
PASSED!

!testRun: #CreditCardTest #test02ShouldFailWhenTheNameIsAllWithespaceCharacters stamp: 'JPF 6/20/2021 11:15:51'!
PASSED!

!testRun: #CreditCardTest #test03ShouldFailWhenTheNameHasMoreThan30Characters stamp: 'JPF 6/20/2021 11:15:51'!
PASSED!
!CreditCardTest methodsFor: 'tests' stamp: 'JPF 6/20/2021 11:17:25'!
test04ShouldFailWhenTheNumberHasNot16Digits

	self 
		should: [ 
			CreditCard
				withNumber: 11118888111188881
				of: testObjectsFactory validCreditCardName
				expiringOn: testObjectsFactory notExpiredCreditCardMonth ]
		raise: Error - MessageNotUnderstood 
		withMessageText: CreditCard canNotCreateACreditCardWithANumberThatHasNot16Digits.
		
	self 
		should: [ 
			CreditCard
				withNumber: 111188881111888
				of: testObjectsFactory validCreditCardName
				expiringOn: testObjectsFactory notExpiredCreditCardMonth ]
		raise: Error - MessageNotUnderstood 
		withMessageText: CreditCard canNotCreateACreditCardWithANumberThatHasNot16Digits.! !

!testRun: #CreditCardTest #test04ShouldFailWhenTheNumberHasNot16Digits stamp: 'JPF 6/20/2021 11:17:30'!
ERROR!

!testRun: #CreditCardTest #test04ShouldFailWhenTheNumberHasNot16Digits stamp: 'JPF 6/20/2021 11:17:30'!
ERROR!

!testRun: #CreditCardTest #test04ShouldFailWhenTheNumberHasNot16Digits stamp: 'JPF 6/20/2021 11:17:38'!
ERROR!

!testRun: #CreditCardTest #test04ShouldFailWhenTheNumberHasNot16Digits stamp: 'JPF 6/20/2021 11:17:38'!
ERROR!
!CreditCard class methodsFor: 'error descriptions' stamp: 'JPF 6/20/2021 11:17:45'!
canNotCreateACreditCardWithANumberThatHasNot16Digits
	self shouldBeImplemented.! !
!CreditCard class methodsFor: 'error descriptions' stamp: 'JPF 6/20/2021 11:18:10' prior: 50879769!
canNotCreateACreditCardWithANumberThatHasNot16Digits
	
	^ 'Credit card number should have 16 digits'! !

!testRun: #CreditCardTest #test04ShouldFailWhenTheNumberHasNot16Digits stamp: 'JPF 6/20/2021 11:18:58'!
FAILURE!

!testRun: #CreditCardTest #test04ShouldFailWhenTheNumberHasNot16Digits stamp: 'JPF 6/20/2021 11:18:58'!
FAILURE!
!CreditCard methodsFor: 'initialization' stamp: 'JPF 6/20/2021 11:19:10' prior: 50879704!
initializeWithNumber: aCreditCardNumber of: aName expiringOn: aMonth

	aName isEmpty 
		ifTrue: [ self error: self class canNotCreateACreditCardWithEmptyName ].
	aName withBlanksTrimmed isEmpty
		ifTrue: [ self error: self class canNotCreateACreditCardWithAllWithespaceCharacters ].
	aName size > 30 
		ifTrue: [ self error: self class canNotCreateACreditCardWithANameWithMoreThan30Characters ].
	(aCreditCardNumber numberOfDigitsInBase: 10) ~= 16
		ifTrue: [ self error: self class canNotCreateACreditCardWithANumberThatHasNot16Digits ].
	
	expiration := aMonth.
	number := aCreditCardNumber.
	name := aName.! !

!testRun: #CreditCardTest #test01ShouldFailWhenTheNameIsEmpty stamp: 'JPF 6/20/2021 11:19:12'!
PASSED!

!testRun: #CreditCardTest #test02ShouldFailWhenTheNameIsAllWithespaceCharacters stamp: 'JPF 6/20/2021 11:19:12'!
PASSED!

!testRun: #CreditCardTest #test03ShouldFailWhenTheNameHasMoreThan30Characters stamp: 'JPF 6/20/2021 11:19:12'!
PASSED!

!testRun: #CreditCardTest #test04ShouldFailWhenTheNumberHasNot16Digits stamp: 'JPF 6/20/2021 11:19:12'!
PASSED!
!CreditCard methodsFor: 'initialization' stamp: 'JPF 6/20/2021 11:19:36'!
assertNameIsValid: aName

	aName isEmpty 
		ifTrue: [ self error: self class canNotCreateACreditCardWithEmptyName ].
	aName withBlanksTrimmed isEmpty
		ifTrue: [ self error: self class canNotCreateACreditCardWithAllWithespaceCharacters ].
	aName size > 30 
		ifTrue: [ self error: self class canNotCreateACreditCardWithANameWithMoreThan30Characters ]! !
!CreditCard methodsFor: 'initialization' stamp: 'JPF 6/20/2021 11:19:36' prior: 50879789!
initializeWithNumber: aCreditCardNumber of: aName expiringOn: aMonth

	self assertNameIsValid: aName.
	(aCreditCardNumber numberOfDigitsInBase: 10) ~= 16
		ifTrue: [ self error: self class canNotCreateACreditCardWithANumberThatHasNot16Digits ].
	
	expiration := aMonth.
	number := aCreditCardNumber.
	name := aName.! !
!CreditCard methodsFor: 'initialization' stamp: 'JPF 6/20/2021 11:20:07'!
assertCreditCardNumberIsValid: aCreditCardNumber

	^ (aCreditCardNumber numberOfDigitsInBase: 10) ~= 16
		ifTrue: [ self error: self class canNotCreateACreditCardWithANumberThatHasNot16Digits ]! !
!CreditCard methodsFor: 'initialization' stamp: 'JPF 6/20/2021 11:20:07' prior: 50879839!
initializeWithNumber: aCreditCardNumber of: aName expiringOn: aMonth

	self assertNameIsValid: aName.
	self assertCreditCardNumberIsValid: aCreditCardNumber.
	
	expiration := aMonth.
	number := aCreditCardNumber.
	name := aName.! !
!CreditCard methodsFor: 'initialization' stamp: 'JPF 6/20/2021 11:20:39'!
assertNameIsNotEmpty: aName

	^ aName isEmpty 
		ifTrue: [ self error: self class canNotCreateACreditCardWithEmptyName ]! !
!CreditCard methodsFor: 'initialization' stamp: 'JPF 6/20/2021 11:20:39' prior: 50879825!
assertNameIsValid: aName

	self assertNameIsNotEmpty: aName.
	aName withBlanksTrimmed isEmpty
		ifTrue: [ self error: self class canNotCreateACreditCardWithAllWithespaceCharacters ].
	aName size > 30 
		ifTrue: [ self error: self class canNotCreateACreditCardWithANameWithMoreThan30Characters ]! !
!CreditCard methodsFor: 'initialization' stamp: 'JPF 6/20/2021 11:21:14'!
assertNameHasNotOnlyWithspaceCharacters: aName

	^ aName withBlanksTrimmed isEmpty
		ifTrue: [ self error: self class canNotCreateACreditCardWithAllWithespaceCharacters ]! !
!CreditCard methodsFor: 'initialization' stamp: 'JPF 6/20/2021 11:21:14' prior: 50879878!
assertNameIsValid: aName

	self assertNameIsNotEmpty: aName.
	self assertNameHasNotOnlyWithspaceCharacters: aName.
	aName size > 30 
		ifTrue: [ self error: self class canNotCreateACreditCardWithANameWithMoreThan30Characters ]! !
!CreditCard methodsFor: 'initialization' stamp: 'JPF 6/20/2021 11:21:40'!
assertNameHasNotMoreThan30Characters: aName

	^ aName size > 30 
		ifTrue: [ self error: self class canNotCreateACreditCardWithANameWithMoreThan30Characters ]! !
!CreditCard methodsFor: 'initialization' stamp: 'JPF 6/20/2021 11:21:40' prior: 50879899!
assertNameIsValid: aName

	self assertNameIsNotEmpty: aName.
	self assertNameHasNotOnlyWithspaceCharacters: aName.
	self assertNameHasNotMoreThan30Characters: aName! !

!testRun: #CreditCardTest #test01ShouldFailWhenTheNameIsEmpty stamp: 'JPF 6/20/2021 11:22:03'!
PASSED!

!testRun: #CreditCardTest #test02ShouldFailWhenTheNameIsAllWithespaceCharacters stamp: 'JPF 6/20/2021 11:22:03'!
PASSED!

!testRun: #CreditCardTest #test03ShouldFailWhenTheNameHasMoreThan30Characters stamp: 'JPF 6/20/2021 11:22:03'!
PASSED!

!testRun: #CreditCardTest #test04ShouldFailWhenTheNumberHasNot16Digits stamp: 'JPF 6/20/2021 11:22:03'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'JPF 6/20/2021 11:22:06'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'JPF 6/20/2021 11:22:06'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'JPF 6/20/2021 11:22:06'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'JPF 6/20/2021 11:22:06'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'JPF 6/20/2021 11:22:06'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'JPF 6/20/2021 11:22:06'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'JPF 6/20/2021 11:22:06'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'JPF 6/20/2021 11:22:06'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'JPF 6/20/2021 11:22:06'!
ERROR!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'JPF 6/20/2021 11:22:06'!
ERROR!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'JPF 6/20/2021 11:22:06'!
ERROR!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'JPF 6/20/2021 11:22:06'!
ERROR!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'JPF 6/20/2021 11:22:06'!
ERROR!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'JPF 6/20/2021 11:22:06'!
ERROR!

!testRun: #CreditCardTest #test01ShouldFailWhenTheNameIsEmpty stamp: 'JPF 6/20/2021 11:22:06'!
PASSED!

!testRun: #CreditCardTest #test02ShouldFailWhenTheNameIsAllWithespaceCharacters stamp: 'JPF 6/20/2021 11:22:06'!
PASSED!

!testRun: #CreditCardTest #test03ShouldFailWhenTheNameHasMoreThan30Characters stamp: 'JPF 6/20/2021 11:22:07'!
PASSED!

!testRun: #CreditCardTest #test04ShouldFailWhenTheNumberHasNot16Digits stamp: 'JPF 6/20/2021 11:22:07'!
PASSED!

!testRun: #StoreFacadeTest #test01ShouldFailToCreateCartWhenUserIdOrPasswordAreIncorrect stamp: 'JPF 6/20/2021 11:22:07'!
PASSED!

!testRun: #StoreFacadeTest #test02ShouldCreateACartAndBeEmptyWhenListed stamp: 'JPF 6/20/2021 11:22:07'!
PASSED!

!testRun: #StoreFacadeTest #test03ShouldAddAnItemToTheCart stamp: 'JPF 6/20/2021 11:22:07'!
PASSED!

!testRun: #StoreFacadeTest #test04ShouldFailWhenTryToAddItemsToAnInexistentCart stamp: 'JPF 6/20/2021 11:22:07'!
PASSED!

!testRun: #StoreFacadeTest #test05ShouldFailWhenTryToListAnInexistentCart stamp: 'JPF 6/20/2021 11:22:07'!
PASSED!

!testRun: #StoreFacadeTest #test06ShouldAddAnItemToTheCorrectCart stamp: 'JPF 6/20/2021 11:22:07'!
PASSED!

!testRun: #StoreFacadeTest #test07ShouldReturnADifferentTransactionIdPerCheckout stamp: 'JPF 6/20/2021 11:22:07'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'JPF 6/20/2021 11:22:21'!
ERROR!
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'JPF 6/20/2021 11:24:53' prior: 50879441!
validCreditCardNumber
	
	^ 1111888811118888! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'JPF 6/20/2021 11:24:56'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'JPF 6/20/2021 11:24:56'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'JPF 6/20/2021 11:24:56'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'JPF 6/20/2021 11:24:56'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'JPF 6/20/2021 11:24:56'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'JPF 6/20/2021 11:24:56'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'JPF 6/20/2021 11:24:56'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'JPF 6/20/2021 11:24:56'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'JPF 6/20/2021 11:24:56'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'JPF 6/20/2021 11:24:56'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'JPF 6/20/2021 11:24:56'!
ERROR!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'JPF 6/20/2021 11:24:56'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'JPF 6/20/2021 11:24:56'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'JPF 6/20/2021 11:24:56'!
PASSED!

!testRun: #CreditCardTest #test01ShouldFailWhenTheNameIsEmpty stamp: 'JPF 6/20/2021 11:24:56'!
PASSED!

!testRun: #CreditCardTest #test02ShouldFailWhenTheNameIsAllWithespaceCharacters stamp: 'JPF 6/20/2021 11:24:56'!
PASSED!

!testRun: #CreditCardTest #test03ShouldFailWhenTheNameHasMoreThan30Characters stamp: 'JPF 6/20/2021 11:24:56'!
PASSED!

!testRun: #CreditCardTest #test04ShouldFailWhenTheNumberHasNot16Digits stamp: 'JPF 6/20/2021 11:24:56'!
PASSED!

!testRun: #StoreFacadeTest #test01ShouldFailToCreateCartWhenUserIdOrPasswordAreIncorrect stamp: 'JPF 6/20/2021 11:24:56'!
PASSED!

!testRun: #StoreFacadeTest #test02ShouldCreateACartAndBeEmptyWhenListed stamp: 'JPF 6/20/2021 11:24:56'!
PASSED!

!testRun: #StoreFacadeTest #test03ShouldAddAnItemToTheCart stamp: 'JPF 6/20/2021 11:24:56'!
PASSED!

!testRun: #StoreFacadeTest #test04ShouldFailWhenTryToAddItemsToAnInexistentCart stamp: 'JPF 6/20/2021 11:24:56'!
PASSED!

!testRun: #StoreFacadeTest #test05ShouldFailWhenTryToListAnInexistentCart stamp: 'JPF 6/20/2021 11:24:56'!
PASSED!

!testRun: #StoreFacadeTest #test06ShouldAddAnItemToTheCorrectCart stamp: 'JPF 6/20/2021 11:24:56'!
PASSED!

!testRun: #StoreFacadeTest #test07ShouldReturnADifferentTransactionIdPerCheckout stamp: 'JPF 6/20/2021 11:24:56'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'JPF 6/20/2021 11:24:56'!
ERROR!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'JPF 6/20/2021 11:26:28'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'JPF 6/20/2021 11:26:28'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'JPF 6/20/2021 11:26:28'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'JPF 6/20/2021 11:26:28'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'JPF 6/20/2021 11:26:28'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'JPF 6/20/2021 11:26:28'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'JPF 6/20/2021 11:26:28'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'JPF 6/20/2021 11:26:28'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'JPF 6/20/2021 11:26:28'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'JPF 6/20/2021 11:26:28'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'JPF 6/20/2021 11:26:28'!
ERROR!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'JPF 6/20/2021 11:26:28'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'JPF 6/20/2021 11:26:28'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'JPF 6/20/2021 11:26:28'!
PASSED!

!testRun: #CreditCardTest #test01ShouldFailWhenTheNameIsEmpty stamp: 'JPF 6/20/2021 11:26:28'!
PASSED!

!testRun: #CreditCardTest #test02ShouldFailWhenTheNameIsAllWithespaceCharacters stamp: 'JPF 6/20/2021 11:26:28'!
PASSED!

!testRun: #CreditCardTest #test03ShouldFailWhenTheNameHasMoreThan30Characters stamp: 'JPF 6/20/2021 11:26:28'!
PASSED!

!testRun: #CreditCardTest #test04ShouldFailWhenTheNumberHasNot16Digits stamp: 'JPF 6/20/2021 11:26:28'!
PASSED!

!testRun: #StoreFacadeTest #test01ShouldFailToCreateCartWhenUserIdOrPasswordAreIncorrect stamp: 'JPF 6/20/2021 11:26:28'!
PASSED!

!testRun: #StoreFacadeTest #test02ShouldCreateACartAndBeEmptyWhenListed stamp: 'JPF 6/20/2021 11:26:28'!
PASSED!

!testRun: #StoreFacadeTest #test03ShouldAddAnItemToTheCart stamp: 'JPF 6/20/2021 11:26:28'!
PASSED!

!testRun: #StoreFacadeTest #test04ShouldFailWhenTryToAddItemsToAnInexistentCart stamp: 'JPF 6/20/2021 11:26:28'!
PASSED!

!testRun: #StoreFacadeTest #test05ShouldFailWhenTryToListAnInexistentCart stamp: 'JPF 6/20/2021 11:26:28'!
PASSED!

!testRun: #StoreFacadeTest #test06ShouldAddAnItemToTheCorrectCart stamp: 'JPF 6/20/2021 11:26:28'!
PASSED!

!testRun: #StoreFacadeTest #test07ShouldReturnADifferentTransactionIdPerCheckout stamp: 'JPF 6/20/2021 11:26:28'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'JPF 6/20/2021 11:26:28'!
ERROR!
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'JPF 6/20/2021 11:27:35' prior: 50879460!
expiredCreditCard
	
	^ CreditCard
		withNumber: self validCreditCardNumber 
		of: self validCreditCardName
		expiringOn: (Month month: today monthIndex year: today yearNumber - 1)! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'JPF 6/20/2021 11:28:03'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'JPF 6/20/2021 11:28:03'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'JPF 6/20/2021 11:28:03'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'JPF 6/20/2021 11:28:03'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'JPF 6/20/2021 11:28:03'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'JPF 6/20/2021 11:28:03'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'JPF 6/20/2021 11:28:03'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'JPF 6/20/2021 11:28:03'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'JPF 6/20/2021 11:28:03'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'JPF 6/20/2021 11:28:03'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'JPF 6/20/2021 11:28:03'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'JPF 6/20/2021 11:28:03'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'JPF 6/20/2021 11:28:03'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'JPF 6/20/2021 11:28:03'!
PASSED!

!testRun: #CreditCardTest #test01ShouldFailWhenTheNameIsEmpty stamp: 'JPF 6/20/2021 11:28:03'!
PASSED!

!testRun: #CreditCardTest #test02ShouldFailWhenTheNameIsAllWithespaceCharacters stamp: 'JPF 6/20/2021 11:28:03'!
PASSED!

!testRun: #CreditCardTest #test03ShouldFailWhenTheNameHasMoreThan30Characters stamp: 'JPF 6/20/2021 11:28:03'!
PASSED!

!testRun: #CreditCardTest #test04ShouldFailWhenTheNumberHasNot16Digits stamp: 'JPF 6/20/2021 11:28:03'!
PASSED!

!testRun: #StoreFacadeTest #test01ShouldFailToCreateCartWhenUserIdOrPasswordAreIncorrect stamp: 'JPF 6/20/2021 11:28:03'!
PASSED!

!testRun: #StoreFacadeTest #test02ShouldCreateACartAndBeEmptyWhenListed stamp: 'JPF 6/20/2021 11:28:03'!
PASSED!

!testRun: #StoreFacadeTest #test03ShouldAddAnItemToTheCart stamp: 'JPF 6/20/2021 11:28:03'!
PASSED!

!testRun: #StoreFacadeTest #test04ShouldFailWhenTryToAddItemsToAnInexistentCart stamp: 'JPF 6/20/2021 11:28:03'!
PASSED!

!testRun: #StoreFacadeTest #test05ShouldFailWhenTryToListAnInexistentCart stamp: 'JPF 6/20/2021 11:28:03'!
PASSED!

!testRun: #StoreFacadeTest #test06ShouldAddAnItemToTheCorrectCart stamp: 'JPF 6/20/2021 11:28:03'!
PASSED!

!testRun: #StoreFacadeTest #test07ShouldReturnADifferentTransactionIdPerCheckout stamp: 'JPF 6/20/2021 11:28:03'!
PASSED!

----SNAPSHOT----(20 June 2021 11:28:08) CaraInternaInterfaz.image priorSource: 17501886!
!StoreFacadeTest methodsFor: 'tests' stamp: 'JPF 6/20/2021 11:48:53' prior: 50879257!
test07ShouldReturnADifferentTransactionIdPerCheckout

	| storeFacade cartId1 cartId2 transactionId1 transactionId2 |
	
	storeFacade := testObjectsFactory createStoreFacade.

	cartId1 := storeFacade createCartFor: testObjectsFactory clientId withPassword: testObjectsFactory password.
	storeFacade add: 3 of: testObjectsFactory itemSellByTheStore to: cartId1.
	transactionId1 := storeFacade
		checkOutCart: cartId1
		payingWithCardNumber: testObjectsFactory validCreditCardNumber 
		of: testObjectsFactory validCreditCardName
		expiringOn: testObjectsFactory notExpiredCreditCardMonth.
	
	cartId2 := storeFacade createCartFor: testObjectsFactory clientId withPassword: testObjectsFactory password.
	storeFacade add: 2 of: testObjectsFactory itemSellByTheStore to: cartId2.
	
	transactionId2 := storeFacade
		checkOutCart: cartId2
		payingWithCardNumber: testObjectsFactory validCreditCardNumber 
		of: testObjectsFactory validCreditCardName
		expiringOn: testObjectsFactory notExpiredCreditCardMonth.
		
	self deny: transactionId1 = transactionId2.
	
	

! !

!testRun: #StoreFacadeTest #test07ShouldReturnADifferentTransactionIdPerCheckout stamp: 'JPF 6/20/2021 11:49:37'!
ERROR!

!testRun: #StoreFacadeTest #test07ShouldReturnADifferentTransactionIdPerCheckout stamp: 'JPF 6/20/2021 11:49:37'!
ERROR!
!StoreFacade methodsFor: 'actions' stamp: 'JPF 6/20/2021 11:50:04'!
checkOutCart: aSmallInteger payingWithCardNumber: aSmallInteger2 of: aString expiringOn: aMonth 
	self shouldBeImplemented.! !
!StoreFacade methodsFor: 'actions' stamp: 'JPF 6/20/2021 11:52:02' prior: 50880351!
checkOutCart: aCartId payingWithCardNumber: aCreditCardNumber of: aName expiringOn: aMonth 
	
	^ self nextTransactionId.! !

!testRun: #StoreFacadeTest #test07ShouldReturnADifferentTransactionIdPerCheckout stamp: 'JPF 6/20/2021 11:52:06'!
ERROR!
!StoreFacade methodsFor: 'private' stamp: 'JPF 6/20/2021 11:52:34'!
nextTransactionId
	self shouldBeImplemented.! !

!classDefinition: #StoreFacade category: 'TusLibros' stamp: 'JPF 6/20/2021 11:54:26'!
Object subclass: #StoreFacade
	instanceVariableNames: 'clientValidator cartRepository cartIdSequence catalog transactionIdSequence'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreFacade methodsFor: 'private' stamp: 'JPF 6/20/2021 11:54:22' prior: 50880368!
nextTransactionId

	| cartId |
	
	cartId := transactionIdSequence.
	transactionIdSequence := transactionIdSequence + 1.
	
	^ cartId! !
!StoreFacade methodsFor: 'private' stamp: 'JPF 6/20/2021 11:54:44' prior: 50880382!
nextTransactionId

	| transactionId |
	
	transactionId := transactionIdSequence.
	transactionIdSequence := transactionIdSequence + 1.
	
	^ transactionId! !
!StoreFacade methodsFor: 'initialization' stamp: 'JPF 6/20/2021 11:55:27' prior: 50878001!
initializeValidatingWith: aClientValidator having: aCatalog  

	clientValidator := aClientValidator.
	catalog := aCatalog.
	cartRepository := Dictionary new.
	cartIdSequence := 1.
	transactionIdSequence :=1.! !

!testRun: #StoreFacadeTest #test07ShouldReturnADifferentTransactionIdPerCheckout stamp: 'JPF 6/20/2021 11:56:08'!
PASSED!

!testRun: #StoreFacadeTest #test01ShouldFailToCreateCartWhenUserIdOrPasswordAreIncorrect stamp: 'JPF 6/20/2021 11:56:12'!
PASSED!

!testRun: #StoreFacadeTest #test02ShouldCreateACartAndBeEmptyWhenListed stamp: 'JPF 6/20/2021 11:56:12'!
PASSED!

!testRun: #StoreFacadeTest #test03ShouldAddAnItemToTheCart stamp: 'JPF 6/20/2021 11:56:12'!
PASSED!

!testRun: #StoreFacadeTest #test04ShouldFailWhenTryToAddItemsToAnInexistentCart stamp: 'JPF 6/20/2021 11:56:12'!
PASSED!

!testRun: #StoreFacadeTest #test05ShouldFailWhenTryToListAnInexistentCart stamp: 'JPF 6/20/2021 11:56:12'!
PASSED!

!testRun: #StoreFacadeTest #test06ShouldAddAnItemToTheCorrectCart stamp: 'JPF 6/20/2021 11:56:12'!
PASSED!

!testRun: #StoreFacadeTest #test07ShouldReturnADifferentTransactionIdPerCheckout stamp: 'JPF 6/20/2021 11:56:12'!
PASSED!
!StoreFacadeTest methodsFor: 'tests' stamp: 'JPF 6/20/2021 11:57:09'!
test08ShouldFailWhenTryToCheckoutTheSameCartTwice

	| storeFacade cartId1 cartId2 transactionId1 transactionId2 |
	
	storeFacade := testObjectsFactory createStoreFacade.

	cartId1 := storeFacade createCartFor: testObjectsFactory clientId withPassword: testObjectsFactory password.
	storeFacade add: 3 of: testObjectsFactory itemSellByTheStore to: cartId1.
	transactionId1 := storeFacade
		checkOutCart: cartId1
		payingWithCardNumber: testObjectsFactory validCreditCardNumber 
		of: testObjectsFactory validCreditCardName
		expiringOn: testObjectsFactory notExpiredCreditCardMonth.
	
	cartId2 := storeFacade createCartFor: testObjectsFactory clientId withPassword: testObjectsFactory password.
	storeFacade add: 2 of: testObjectsFactory itemSellByTheStore to: cartId2.
	
	transactionId2 := storeFacade
		checkOutCart: cartId2
		payingWithCardNumber: testObjectsFactory validCreditCardNumber 
		of: testObjectsFactory validCreditCardName
		expiringOn: testObjectsFactory notExpiredCreditCardMonth.
		
	self deny: transactionId1 = transactionId2.
	
	

! !
!StoreFacadeTest methodsFor: 'tests' stamp: 'JPF 6/20/2021 11:57:42' prior: 50880436!
test08ShouldFailWhenTryToCheckoutTheSameCartTwice

	| storeFacade cartId1  |
	
	storeFacade := testObjectsFactory createStoreFacade.

	cartId1 := storeFacade createCartFor: testObjectsFactory clientId withPassword: testObjectsFactory password.
	storeFacade add: 3 of: testObjectsFactory itemSellByTheStore to: cartId1.
	storeFacade
		checkOutCart: cartId1
		payingWithCardNumber: testObjectsFactory validCreditCardNumber 
		of: testObjectsFactory validCreditCardName
		expiringOn: testObjectsFactory notExpiredCreditCardMonth.
	
	
	

! !
!StoreFacadeTest methodsFor: 'tests' stamp: 'JPF 6/20/2021 11:57:50' prior: 50880472!
test08ShouldFailWhenTryToCheckoutTheSameCartTwice

	| storeFacade cartId  |
	
	storeFacade := testObjectsFactory createStoreFacade.

	cartId := storeFacade createCartFor: testObjectsFactory clientId withPassword: testObjectsFactory password.
	storeFacade add: 3 of: testObjectsFactory itemSellByTheStore to: cartId.
	storeFacade
		checkOutCart: cartId
		payingWithCardNumber: testObjectsFactory validCreditCardNumber 
		of: testObjectsFactory validCreditCardName
		expiringOn: testObjectsFactory notExpiredCreditCardMonth.
	
	
	

! !
!StoreFacadeTest methodsFor: 'tests' stamp: 'JPF 6/20/2021 11:59:46' prior: 50880492!
test08ShouldFailWhenTryToCheckoutTheSameCartTwice

	| storeFacade cartId  |
	
	storeFacade := testObjectsFactory createStoreFacade.

	cartId := storeFacade createCartFor: testObjectsFactory clientId withPassword: testObjectsFactory password.
	storeFacade add: 3 of: testObjectsFactory itemSellByTheStore to: cartId.
	storeFacade
		checkOutCart: cartId
		payingWithCardNumber: testObjectsFactory validCreditCardNumber 
		of: testObjectsFactory validCreditCardName
		expiringOn: testObjectsFactory notExpiredCreditCardMonth.
		
	self
		should: [
		storeFacade
			checkOutCart: cartId
			payingWithCardNumber: testObjectsFactory validCreditCardNumber 
			of: testObjectsFactory validCreditCardName
			expiringOn: testObjectsFactory notExpiredCreditCardMonth ]
		raise: Error - MessageNotUnderstood 
		withMessageText: StoreFacade inexistentCartErrorMessage
	
	
	

! !

!testRun: #StoreFacadeTest #test08ShouldFailWhenTryToCheckoutTheSameCartTwice stamp: 'JPF 6/20/2021 12:00:06'!
FAILURE!

!testRun: #StoreFacadeTest #test08ShouldFailWhenTryToCheckoutTheSameCartTwice stamp: 'JPF 6/20/2021 12:00:06'!
FAILURE!
!StoreFacade methodsFor: 'actions' stamp: 'JPF 6/20/2021 12:01:22' prior: 50880358!
checkOutCart: aCartId payingWithCardNumber: aCreditCardNumber of: aName expiringOn: aMonth

	cartRepository removeKey: aCartId.
	
	^ self nextTransactionId.! !

!testRun: #StoreFacadeTest #test01ShouldFailToCreateCartWhenUserIdOrPasswordAreIncorrect stamp: 'JPF 6/20/2021 12:01:30'!
PASSED!

!testRun: #StoreFacadeTest #test02ShouldCreateACartAndBeEmptyWhenListed stamp: 'JPF 6/20/2021 12:01:30'!
PASSED!

!testRun: #StoreFacadeTest #test03ShouldAddAnItemToTheCart stamp: 'JPF 6/20/2021 12:01:30'!
PASSED!

!testRun: #StoreFacadeTest #test04ShouldFailWhenTryToAddItemsToAnInexistentCart stamp: 'JPF 6/20/2021 12:01:30'!
PASSED!

!testRun: #StoreFacadeTest #test05ShouldFailWhenTryToListAnInexistentCart stamp: 'JPF 6/20/2021 12:01:30'!
PASSED!

!testRun: #StoreFacadeTest #test06ShouldAddAnItemToTheCorrectCart stamp: 'JPF 6/20/2021 12:01:30'!
PASSED!

!testRun: #StoreFacadeTest #test07ShouldReturnADifferentTransactionIdPerCheckout stamp: 'JPF 6/20/2021 12:01:30'!
PASSED!

!testRun: #StoreFacadeTest #test08ShouldFailWhenTryToCheckoutTheSameCartTwice stamp: 'JPF 6/20/2021 12:01:30'!
FAILURE!

!testRun: #StoreFacadeTest #test08ShouldFailWhenTryToCheckoutTheSameCartTwice stamp: 'JPF 6/20/2021 12:01:30'!
FAILURE!
!StoreFacade methodsFor: 'actions' stamp: 'JPF 6/20/2021 12:03:24' prior: 50880550!
checkOutCart: aCartId payingWithCardNumber: aCreditCardNumber of: aName expiringOn: aMonth

	| cart |
	
	cart := self findCart: aCartId.
	cartRepository removeKey: aCartId.
	
	^ self nextTransactionId.! !
!StoreFacade methodsFor: 'actions' stamp: 'JPF 6/20/2021 12:03:40' prior: 50880591!
checkOutCart: aCartId payingWithCardNumber: aCreditCardNumber of: aName expiringOn: aMonth

	self findCart: aCartId.
	cartRepository removeKey: aCartId.
	
	^ self nextTransactionId.! !

!testRun: #StoreFacadeTest #test01ShouldFailToCreateCartWhenUserIdOrPasswordAreIncorrect stamp: 'JPF 6/20/2021 12:03:43'!
PASSED!

!testRun: #StoreFacadeTest #test02ShouldCreateACartAndBeEmptyWhenListed stamp: 'JPF 6/20/2021 12:03:43'!
PASSED!

!testRun: #StoreFacadeTest #test03ShouldAddAnItemToTheCart stamp: 'JPF 6/20/2021 12:03:43'!
PASSED!

!testRun: #StoreFacadeTest #test04ShouldFailWhenTryToAddItemsToAnInexistentCart stamp: 'JPF 6/20/2021 12:03:43'!
PASSED!

!testRun: #StoreFacadeTest #test05ShouldFailWhenTryToListAnInexistentCart stamp: 'JPF 6/20/2021 12:03:43'!
PASSED!

!testRun: #StoreFacadeTest #test06ShouldAddAnItemToTheCorrectCart stamp: 'JPF 6/20/2021 12:03:43'!
PASSED!

!testRun: #StoreFacadeTest #test07ShouldReturnADifferentTransactionIdPerCheckout stamp: 'JPF 6/20/2021 12:03:43'!
PASSED!

!testRun: #StoreFacadeTest #test08ShouldFailWhenTryToCheckoutTheSameCartTwice stamp: 'JPF 6/20/2021 12:03:43'!
PASSED!
!StoreFacade methodsFor: 'actions' stamp: 'JPF 6/20/2021 12:04:05'!
removeCart: aCartId

	^ cartRepository removeKey: aCartId! !
!StoreFacade methodsFor: 'actions' stamp: 'JPF 6/20/2021 12:04:05' prior: 50880601!
checkOutCart: aCartId payingWithCardNumber: aCreditCardNumber of: aName expiringOn: aMonth

	self findCart: aCartId.
	self removeCart: aCartId.
	
	^ self nextTransactionId.! !
!StoreFacadeTest methodsFor: 'tests' stamp: 'JPF 6/20/2021 12:08:14'!
test09ShouldFailWhenListPurchasesForAnIncorrectClientIdOrPassword

	| storeFacade cartId  |
	
	storeFacade := testObjectsFactory createStoreFacade.

	cartId := storeFacade createCartFor: testObjectsFactory clientId withPassword: testObjectsFactory password.
	storeFacade add: 3 of: testObjectsFactory itemSellByTheStore to: cartId.
	storeFacade
		checkOutCart: cartId
		payingWithCardNumber: testObjectsFactory validCreditCardNumber 
		of: testObjectsFactory validCreditCardName
		expiringOn: testObjectsFactory notExpiredCreditCardMonth.
		
	self
		should: [
		storeFacade
			checkOutCart: cartId
			payingWithCardNumber: testObjectsFactory validCreditCardNumber 
			of: testObjectsFactory validCreditCardName
			expiringOn: testObjectsFactory notExpiredCreditCardMonth ]
		raise: Error - MessageNotUnderstood 
		withMessageText: StoreFacade inexistentCartErrorMessage
	
	
	

! !
!StoreFacadeTest methodsFor: 'tests' stamp: 'JPF 6/20/2021 12:08:30'!
test01ShouldFailToCreateCartWhenClientIdOrPasswordAreIncorrect

	| clientId password validatedClientId validatedPassword storeFacade |
	
	clientId := 'clientId'.
	password := 'password'.
	
	testObjectsFactory validateUserBehaviour: [ :clientIdArg :passwordArg |
		validatedClientId := clientIdArg.
		validatedPassword := passwordArg.
		self error: ClientValidator clientIdOrPasswordAreIncorrect.
		].
	
	storeFacade := testObjectsFactory createStoreFacade.
	
	self 
		should: [ storeFacade createCartFor: clientId withPassword: password ] 
		raise: Error - MessageNotUnderstood 
		withMessageText: ClientValidator clientIdOrPasswordAreIncorrect.
		
	self assert: password = validatedPassword.
	self assert: clientId = validatedClientId.! !

!methodRemoval: StoreFacadeTest #test01ShouldFailToCreateCartWhenUserIdOrPasswordAreIncorrect stamp: 'JPF 6/20/2021 12:08:30'!
test01ShouldFailToCreateCartWhenUserIdOrPasswordAreIncorrect

	| clientId password validatedClientId validatedPassword storeFacade |
	
	clientId := 'clientId'.
	password := 'password'.
	
	testObjectsFactory validateUserBehaviour: [ :clientIdArg :passwordArg |
		validatedClientId := clientIdArg.
		validatedPassword := passwordArg.
		self error: ClientValidator clientIdOrPasswordAreIncorrect.
		].
	
	storeFacade := testObjectsFactory createStoreFacade.
	
	self 
		should: [ storeFacade createCartFor: clientId withPassword: password ] 
		raise: Error - MessageNotUnderstood 
		withMessageText: ClientValidator clientIdOrPasswordAreIncorrect.
		
	self assert: password = validatedPassword.
	self assert: clientId = validatedClientId.!
!StoreFacadeTest methodsFor: 'tests' stamp: 'JPF 6/20/2021 12:09:50' prior: 50880652!
test09ShouldFailWhenListPurchasesForAnIncorrectClientIdOrPassword

	| clientId password validatedClientId validatedPassword storeFacade |
	
	clientId := 'clientId'.
	password := 'password'.
	
	testObjectsFactory validateUserBehaviour: [ :clientIdArg :passwordArg |
		validatedClientId := clientIdArg.
		validatedPassword := passwordArg.
		self error: ClientValidator clientIdOrPasswordAreIncorrect.
		].
	
	storeFacade := testObjectsFactory createStoreFacade.
	
	self 
		should: [ storeFacade listPurchasesOf: clientId withPassword: password ] 
		raise: Error - MessageNotUnderstood 
		withMessageText: ClientValidator clientIdOrPasswordAreIncorrect.
		
	self assert: password = validatedPassword.
	self assert: clientId = validatedClientId.
	
	
	

! !

!testRun: #StoreFacadeTest #test09ShouldFailWhenListPurchasesForAnIncorrectClientIdOrPassword stamp: 'JPF 6/20/2021 12:09:58'!
ERROR!

!testRun: #StoreFacadeTest #test09ShouldFailWhenListPurchasesForAnIncorrectClientIdOrPassword stamp: 'JPF 6/20/2021 12:09:58'!
ERROR!
!StoreFacade methodsFor: 'actions' stamp: 'JPF 6/20/2021 12:10:04'!
listPurchasesOf: aString withPassword: aString2 
	self shouldBeImplemented.! !
!StoreFacade methodsFor: 'actions' stamp: 'JPF 6/20/2021 12:11:05' prior: 50880770!
listPurchasesOf: aClientId withPassword: aPassword

	clientValidator validateUser: aClientId withPassword: aPassword! !

!testRun: #StoreFacadeTest #test09ShouldFailWhenListPurchasesForAnIncorrectClientIdOrPassword stamp: 'JPF 6/20/2021 12:11:20'!
PASSED!

!testRun: #StoreFacadeTest #test09ShouldFailWhenListPurchasesForAnIncorrectClientIdOrPassword stamp: 'JPF 6/20/2021 12:11:23'!
PASSED!
!ClientValidator methodsFor: 'validation' stamp: 'JPF 6/20/2021 12:12:26'!
validateClient: aClientId withPassword: aPassword

	self subclassResponsibility! !
!StoreTestObjectsFactory methodsFor: 'client validator protocol' stamp: 'JPF 6/20/2021 12:12:26'!
validateClient: aClientId withPassword: aPassword

	validateUserBehaviour value: aClientId value: aPassword! !
!StoreFacade methodsFor: 'as yet unclassified' stamp: 'JPF 6/20/2021 12:12:26' prior: 50877834!
createCartFor: aClientId withPassword: aPassword

	| cartId |
	
	clientValidator validateClient: aClientId withPassword: aPassword.
	
	cartId := self nextCartId.
	
	cartRepository at: cartId put: (Cart acceptingItemsOf: catalog).
	
	^ cartId! !
!StoreFacade methodsFor: 'as yet unclassified' stamp: 'JPF 6/20/2021 12:12:26' prior: 50880776!
listPurchasesOf: aClientId withPassword: aPassword

	clientValidator validateClient: aClientId withPassword: aPassword! !

!methodRemoval: ClientValidator #validateUser:withPassword: stamp: 'JPF 6/20/2021 12:12:26'!
validateUser: aClientId withPassword: aPassword

	self subclassResponsibility!

!methodRemoval: StoreTestObjectsFactory #validateUser:withPassword: stamp: 'JPF 6/20/2021 12:12:26'!
validateUser: aClientId withPassword: aPassword

	validateUserBehaviour value: aClientId value: aPassword!

!classDefinition: #StoreTestObjectsFactory category: 'TusLibros' stamp: 'JPF 6/20/2021 12:12:58'!
Object subclass: #StoreTestObjectsFactory
	instanceVariableNames: 'today validateClientBehaviour'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'JPF 6/20/2021 12:12:58' prior: 50880797!
validateClient: aClientId withPassword: aPassword

	validateClientBehaviour value: aClientId value: aPassword! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'JPF 6/20/2021 12:12:58' prior: 50878624 overrides: 16896425!
initialize

	today := DateAndTime now.
	validateClientBehaviour := [ :clientIdArg :passwordArg | ].! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'JPF 6/20/2021 12:12:58' prior: 50878631!
validateUserBehaviour: aValidateUserBehaviour

	validateClientBehaviour := aValidateUserBehaviour ! !
!StoreTestObjectsFactory methodsFor: 'client validator protocol' stamp: 'JPF 6/20/2021 12:13:08' prior: 50880858!
validateUserBehaviour: aValidateClientBehaviour

	validateClientBehaviour := aValidateClientBehaviour ! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'JPF 6/20/2021 12:13:11'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'JPF 6/20/2021 12:13:11'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'JPF 6/20/2021 12:13:11'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'JPF 6/20/2021 12:13:11'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'JPF 6/20/2021 12:13:11'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'JPF 6/20/2021 12:13:11'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'JPF 6/20/2021 12:13:11'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'JPF 6/20/2021 12:13:11'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'JPF 6/20/2021 12:13:11'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'JPF 6/20/2021 12:13:11'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'JPF 6/20/2021 12:13:11'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'JPF 6/20/2021 12:13:11'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'JPF 6/20/2021 12:13:11'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'JPF 6/20/2021 12:13:11'!
PASSED!

!testRun: #CreditCardTest #test01ShouldFailWhenTheNameIsEmpty stamp: 'JPF 6/20/2021 12:13:11'!
PASSED!

!testRun: #CreditCardTest #test02ShouldFailWhenTheNameIsAllWithespaceCharacters stamp: 'JPF 6/20/2021 12:13:11'!
PASSED!

!testRun: #CreditCardTest #test03ShouldFailWhenTheNameHasMoreThan30Characters stamp: 'JPF 6/20/2021 12:13:11'!
PASSED!

!testRun: #CreditCardTest #test04ShouldFailWhenTheNumberHasNot16Digits stamp: 'JPF 6/20/2021 12:13:11'!
PASSED!

!testRun: #StoreFacadeTest #test01ShouldFailToCreateCartWhenClientIdOrPasswordAreIncorrect stamp: 'JPF 6/20/2021 12:13:11'!
PASSED!

!testRun: #StoreFacadeTest #test02ShouldCreateACartAndBeEmptyWhenListed stamp: 'JPF 6/20/2021 12:13:11'!
PASSED!

!testRun: #StoreFacadeTest #test03ShouldAddAnItemToTheCart stamp: 'JPF 6/20/2021 12:13:11'!
PASSED!

!testRun: #StoreFacadeTest #test04ShouldFailWhenTryToAddItemsToAnInexistentCart stamp: 'JPF 6/20/2021 12:13:11'!
PASSED!

!testRun: #StoreFacadeTest #test05ShouldFailWhenTryToListAnInexistentCart stamp: 'JPF 6/20/2021 12:13:11'!
PASSED!

!testRun: #StoreFacadeTest #test06ShouldAddAnItemToTheCorrectCart stamp: 'JPF 6/20/2021 12:13:11'!
PASSED!

!testRun: #StoreFacadeTest #test07ShouldReturnADifferentTransactionIdPerCheckout stamp: 'JPF 6/20/2021 12:13:11'!
PASSED!

!testRun: #StoreFacadeTest #test08ShouldFailWhenTryToCheckoutTheSameCartTwice stamp: 'JPF 6/20/2021 12:13:11'!
PASSED!

!testRun: #StoreFacadeTest #test09ShouldFailWhenListPurchasesForAnIncorrectClientIdOrPassword stamp: 'JPF 6/20/2021 12:13:11'!
PASSED!
!StoreFacadeTest methodsFor: 'tests' stamp: 'JPF 6/20/2021 12:13:43'!
test10ShouldListClientPurchases

	| clientId password validatedClientId validatedPassword storeFacade |
	
	clientId := 'clientId'.
	password := 'password'.
	
	testObjectsFactory validateUserBehaviour: [ :clientIdArg :passwordArg |
		validatedClientId := clientIdArg.
		validatedPassword := passwordArg.
		self error: ClientValidator clientIdOrPasswordAreIncorrect.
		].
	
	storeFacade := testObjectsFactory createStoreFacade.
	
	self 
		should: [ storeFacade listPurchasesOf: clientId withPassword: password ] 
		raise: Error - MessageNotUnderstood 
		withMessageText: ClientValidator clientIdOrPasswordAreIncorrect.
		
	self assert: password = validatedPassword.
	self assert: clientId = validatedClientId.
	
	
	

! !
!StoreFacadeTest methodsFor: 'tests' stamp: 'JPF 6/20/2021 12:14:06' prior: 50880964!
test10ShouldListClientPurchases

	| storeFacade cartId  |
	
	storeFacade := testObjectsFactory createStoreFacade.

	cartId := storeFacade createCartFor: testObjectsFactory clientId withPassword: testObjectsFactory password.
	storeFacade add: 3 of: testObjectsFactory itemSellByTheStore to: cartId.
	storeFacade
		checkOutCart: cartId
		payingWithCardNumber: testObjectsFactory validCreditCardNumber 
		of: testObjectsFactory validCreditCardName
		expiringOn: testObjectsFactory notExpiredCreditCardMonth.! !
!StoreFacadeTest methodsFor: 'tests' stamp: 'JPF 6/20/2021 12:14:42' prior: 50880990!
test10ShouldListClientPurchases

	| storeFacade cartId  |
	
	storeFacade := testObjectsFactory createStoreFacade.

	cartId := storeFacade createCartFor: testObjectsFactory clientId withPassword: testObjectsFactory password.
	storeFacade add: 3 of: testObjectsFactory itemSellByTheStore to: cartId.
	storeFacade add: 1 of: testObjectsFactory itemSellByTheStore2 to: cartId.
	storeFacade
		checkOutCart: cartId
		payingWithCardNumber: testObjectsFactory validCreditCardNumber 
		of: testObjectsFactory validCreditCardName
		expiringOn: testObjectsFactory notExpiredCreditCardMonth.! !
!StoreFacadeTest methodsFor: 'tests' stamp: 'JPF 6/20/2021 12:16:48' prior: 50881009!
test10ShouldListClientPurchases

	| storeFacade cartId  cartId2 |
	
	storeFacade := testObjectsFactory createStoreFacade.

	cartId := storeFacade createCartFor: testObjectsFactory clientId withPassword: testObjectsFactory password.
	storeFacade add: 3 of: testObjectsFactory itemSellByTheStore to: cartId.
	storeFacade add: 1 of: testObjectsFactory itemSellByTheStore2 to: cartId.
	storeFacade
		checkOutCart: cartId
		payingWithCardNumber: testObjectsFactory validCreditCardNumber 
		of: testObjectsFactory validCreditCardName
		expiringOn: testObjectsFactory notExpiredCreditCardMonth.
		
	cartId2 := storeFacade createCartFor: testObjectsFactory clientId withPassword: testObjectsFactory password.
	storeFacade add: 1 of: testObjectsFactory itemSellByTheStore to: cartId2.
	storeFacade add: 2 of: testObjectsFactory itemSellByTheStore2 to: cartId2.
	storeFacade
		checkOutCart: cartId2
		payingWithCardNumber: testObjectsFactory validCreditCardNumber 
		of: testObjectsFactory validCreditCardName
		expiringOn: testObjectsFactory notExpiredCreditCardMonth.
		
	! !
!StoreFacadeTest methodsFor: 'tests' stamp: 'JPF 6/20/2021 12:17:03' prior: 50881030!
test10ShouldListClientPurchases

	| storeFacade cartId1  cartId2 |
	
	storeFacade := testObjectsFactory createStoreFacade.

	cartId1 := storeFacade createCartFor: testObjectsFactory clientId withPassword: testObjectsFactory password.
	storeFacade add: 3 of: testObjectsFactory itemSellByTheStore to: cartId1.
	storeFacade add: 1 of: testObjectsFactory itemSellByTheStore2 to: cartId1.
	storeFacade
		checkOutCart: cartId1
		payingWithCardNumber: testObjectsFactory validCreditCardNumber 
		of: testObjectsFactory validCreditCardName
		expiringOn: testObjectsFactory notExpiredCreditCardMonth.
		
	cartId2 := storeFacade createCartFor: testObjectsFactory clientId withPassword: testObjectsFactory password.
	storeFacade add: 1 of: testObjectsFactory itemSellByTheStore to: cartId2.
	storeFacade add: 2 of: testObjectsFactory itemSellByTheStore2 to: cartId2.
	storeFacade
		checkOutCart: cartId2
		payingWithCardNumber: testObjectsFactory validCreditCardNumber 
		of: testObjectsFactory validCreditCardName
		expiringOn: testObjectsFactory notExpiredCreditCardMonth.
		
	! !
!StoreFacadeTest methodsFor: 'tests' stamp: 'JPF 6/20/2021 12:21:29' prior: 50881067!
test10ShouldListClientPurchases

	| storeFacade cartId1  cartId2 purchases |
	
	storeFacade := testObjectsFactory createStoreFacade.

	cartId1 := storeFacade createCartFor: testObjectsFactory clientId withPassword: testObjectsFactory password.
	storeFacade add: 3 of: testObjectsFactory itemSellByTheStore to: cartId1.
	storeFacade add: 1 of: testObjectsFactory itemSellByTheStore2 to: cartId1.
	storeFacade
		checkOutCart: cartId1
		payingWithCardNumber: testObjectsFactory validCreditCardNumber 
		of: testObjectsFactory validCreditCardName
		expiringOn: testObjectsFactory notExpiredCreditCardMonth.
		
	cartId2 := storeFacade createCartFor: testObjectsFactory clientId withPassword: testObjectsFactory password.
	storeFacade add: 1 of: testObjectsFactory itemSellByTheStore to: cartId2.
	storeFacade add: 2 of: testObjectsFactory itemSellByTheStore2 to: cartId2.
	storeFacade
		checkOutCart: cartId2
		payingWithCardNumber: testObjectsFactory validCreditCardNumber 
		of: testObjectsFactory validCreditCardName
		expiringOn: testObjectsFactory notExpiredCreditCardMonth.
		
	purchases := storeFacade
		listPurchasesOf: testObjectsFactory
		clientId withPassword: testObjectsFactory password.
		
	self assert: 2 equals: purchases size.
	
		
	! !
!StoreFacadeTest methodsFor: 'tests' stamp: 'JPF 6/20/2021 12:21:44' prior: 50881104!
test10ShouldListClientPurchases

	| storeFacade cartId1  cartId2 purchasesByClient |
	
	storeFacade := testObjectsFactory createStoreFacade.

	cartId1 := storeFacade createCartFor: testObjectsFactory clientId withPassword: testObjectsFactory password.
	storeFacade add: 3 of: testObjectsFactory itemSellByTheStore to: cartId1.
	storeFacade add: 1 of: testObjectsFactory itemSellByTheStore2 to: cartId1.
	storeFacade
		checkOutCart: cartId1
		payingWithCardNumber: testObjectsFactory validCreditCardNumber 
		of: testObjectsFactory validCreditCardName
		expiringOn: testObjectsFactory notExpiredCreditCardMonth.
		
	cartId2 := storeFacade createCartFor: testObjectsFactory clientId withPassword: testObjectsFactory password.
	storeFacade add: 1 of: testObjectsFactory itemSellByTheStore to: cartId2.
	storeFacade add: 2 of: testObjectsFactory itemSellByTheStore2 to: cartId2.
	storeFacade
		checkOutCart: cartId2
		payingWithCardNumber: testObjectsFactory validCreditCardNumber 
		of: testObjectsFactory validCreditCardName
		expiringOn: testObjectsFactory notExpiredCreditCardMonth.
		
	purchasesByClient := storeFacade
		listPurchasesOf: testObjectsFactory
		clientId withPassword: testObjectsFactory password.
		
	self assert: 2 equals: purchasesByClient size.
	
		
	! !
!StoreFacadeTest methodsFor: 'tests' stamp: 'JPF 6/20/2021 12:23:27' prior: 50881146!
test10ShouldListClientPurchases

	| storeFacade cartId1  cartId2 purchasesByClient |
	
	storeFacade := testObjectsFactory createStoreFacade.

	cartId1 := storeFacade createCartFor: testObjectsFactory clientId withPassword: testObjectsFactory password.
	storeFacade add: 3 of: testObjectsFactory itemSellByTheStore to: cartId1.
	storeFacade add: 1 of: testObjectsFactory itemSellByTheStore2 to: cartId1.
	storeFacade
		checkOutCart: cartId1
		payingWithCardNumber: testObjectsFactory validCreditCardNumber 
		of: testObjectsFactory validCreditCardName
		expiringOn: testObjectsFactory notExpiredCreditCardMonth.
		
	cartId2 := storeFacade createCartFor: testObjectsFactory clientId withPassword: testObjectsFactory password.
	storeFacade add: 1 of: testObjectsFactory itemSellByTheStore to: cartId2.
	storeFacade add: 2 of: testObjectsFactory itemSellByTheStore2 to: cartId2.
	storeFacade
		checkOutCart: cartId2
		payingWithCardNumber: testObjectsFactory validCreditCardNumber 
		of: testObjectsFactory validCreditCardName
		expiringOn: testObjectsFactory notExpiredCreditCardMonth.
		
	purchasesByClient := storeFacade
		listPurchasesOf: testObjectsFactory
		clientId withPassword: testObjectsFactory password.
		
	self assert: 2 equals: purchasesByClient size.
	self assert: 300 equals: purchasesByClient first total.
	self assert: 300 equals: purchasesByClient second total.
	
		
	! !
!StoreTestObjectsFactory methodsFor: 'items' stamp: 'JPF 6/20/2021 12:23:57'!
itemSellByTheStore2
	
	^ 'validBook2'! !
!StoreTestObjectsFactory methodsFor: 'items' stamp: 'JPF 6/20/2021 12:24:09'!
itemSellByTheStore2Price
	
	^20! !
!StoreTestObjectsFactory methodsFor: 'cart' stamp: 'JPF 6/20/2021 12:24:34' prior: 50876866!
defaultCatalog
	
	^ Dictionary new
		at: self itemSellByTheStore put: self itemSellByTheStorePrice;
		at: self itemSellByTheStore2 put: self itemSellByTheStore2Price;
		yourself ! !
!StoreFacadeTest methodsFor: 'tests' stamp: 'JPF 6/20/2021 12:25:40' prior: 50881189!
test10ShouldListClientPurchases

	| storeFacade cartId1  cartId2 purchasesByClient |
	
	storeFacade := testObjectsFactory createStoreFacade.

	cartId1 := storeFacade createCartFor: testObjectsFactory clientId withPassword: testObjectsFactory password.
	storeFacade add: 3 of: testObjectsFactory itemSellByTheStore to: cartId1.
	storeFacade add: 1 of: testObjectsFactory itemSellByTheStore2 to: cartId1.
	storeFacade
		checkOutCart: cartId1
		payingWithCardNumber: testObjectsFactory validCreditCardNumber 
		of: testObjectsFactory validCreditCardName
		expiringOn: testObjectsFactory notExpiredCreditCardMonth.
		
	cartId2 := storeFacade createCartFor: testObjectsFactory clientId withPassword: testObjectsFactory password.
	storeFacade add: 1 of: testObjectsFactory itemSellByTheStore to: cartId2.
	storeFacade add: 2 of: testObjectsFactory itemSellByTheStore2 to: cartId2.
	storeFacade
		checkOutCart: cartId2
		payingWithCardNumber: testObjectsFactory validCreditCardNumber 
		of: testObjectsFactory validCreditCardName
		expiringOn: testObjectsFactory notExpiredCreditCardMonth.
		
	purchasesByClient := storeFacade
		listPurchasesOf: testObjectsFactory
		clientId withPassword: testObjectsFactory password.
		
	self assert: 2 equals: purchasesByClient size.
	self assert: 40 equals: purchasesByClient first total.
	self assert: 50 equals: purchasesByClient second total.
	
		
	! !
!StoreFacadeTest methodsFor: 'tests' stamp: 'JPF 6/20/2021 12:26:24' prior: 50881252!
test10ShouldListClientPurchases

	"| storeFacade cartId1  cartId2 purchasesByClient |
	
	storeFacade := testObjectsFactory createStoreFacade.

	cartId1 := storeFacade createCartFor: testObjectsFactory clientId withPassword: testObjectsFactory password.
	storeFacade add: 3 of: testObjectsFactory itemSellByTheStore to: cartId1.
	storeFacade add: 1 of: testObjectsFactory itemSellByTheStore2 to: cartId1.
	storeFacade
		checkOutCart: cartId1
		payingWithCardNumber: testObjectsFactory validCreditCardNumber 
		of: testObjectsFactory validCreditCardName
		expiringOn: testObjectsFactory notExpiredCreditCardMonth.
		
	cartId2 := storeFacade createCartFor: testObjectsFactory clientId withPassword: testObjectsFactory password.
	storeFacade add: 1 of: testObjectsFactory itemSellByTheStore to: cartId2.
	storeFacade add: 2 of: testObjectsFactory itemSellByTheStore2 to: cartId2.
	storeFacade
		checkOutCart: cartId2
		payingWithCardNumber: testObjectsFactory validCreditCardNumber 
		of: testObjectsFactory validCreditCardName
		expiringOn: testObjectsFactory notExpiredCreditCardMonth.
		
	purchasesByClient := storeFacade
		listPurchasesOf: testObjectsFactory
		clientId withPassword: testObjectsFactory password.
		
	self assert: 2 equals: purchasesByClient size.
	self assert: 40 equals: purchasesByClient first total.
	self assert: 50 equals: purchasesByClient second total."
	
		
	! !
!StoreFacadeTest methodsFor: 'tests' stamp: 'JPF 6/20/2021 12:26:33'!
test11ShouldListClientPurchases

	"| storeFacade cartId1  cartId2 purchasesByClient |
	
	storeFacade := testObjectsFactory createStoreFacade.

	cartId1 := storeFacade createCartFor: testObjectsFactory clientId withPassword: testObjectsFactory password.
	storeFacade add: 3 of: testObjectsFactory itemSellByTheStore to: cartId1.
	storeFacade add: 1 of: testObjectsFactory itemSellByTheStore2 to: cartId1.
	storeFacade
		checkOutCart: cartId1
		payingWithCardNumber: testObjectsFactory validCreditCardNumber 
		of: testObjectsFactory validCreditCardName
		expiringOn: testObjectsFactory notExpiredCreditCardMonth.
		
	cartId2 := storeFacade createCartFor: testObjectsFactory clientId withPassword: testObjectsFactory password.
	storeFacade add: 1 of: testObjectsFactory itemSellByTheStore to: cartId2.
	storeFacade add: 2 of: testObjectsFactory itemSellByTheStore2 to: cartId2.
	storeFacade
		checkOutCart: cartId2
		payingWithCardNumber: testObjectsFactory validCreditCardNumber 
		of: testObjectsFactory validCreditCardName
		expiringOn: testObjectsFactory notExpiredCreditCardMonth.
		
	purchasesByClient := storeFacade
		listPurchasesOf: testObjectsFactory
		clientId withPassword: testObjectsFactory password.
		
	self assert: 2 equals: purchasesByClient size.
	self assert: 40 equals: purchasesByClient first total.
	self assert: 50 equals: purchasesByClient second total."
	
		
	! !

!methodRemoval: StoreFacadeTest #test10ShouldListClientPurchases stamp: 'JPF 6/20/2021 12:26:33'!
test10ShouldListClientPurchases

	"| storeFacade cartId1  cartId2 purchasesByClient |
	
	storeFacade := testObjectsFactory createStoreFacade.

	cartId1 := storeFacade createCartFor: testObjectsFactory clientId withPassword: testObjectsFactory password.
	storeFacade add: 3 of: testObjectsFactory itemSellByTheStore to: cartId1.
	storeFacade add: 1 of: testObjectsFactory itemSellByTheStore2 to: cartId1.
	storeFacade
		checkOutCart: cartId1
		payingWithCardNumber: testObjectsFactory validCreditCardNumber 
		of: testObjectsFactory validCreditCardName
		expiringOn: testObjectsFactory notExpiredCreditCardMonth.
		
	cartId2 := storeFacade createCartFor: testObjectsFactory clientId withPassword: testObjectsFactory password.
	storeFacade add: 1 of: testObjectsFactory itemSellByTheStore to: cartId2.
	storeFacade add: 2 of: testObjectsFactory itemSellByTheStore2 to: cartId2.
	storeFacade
		checkOutCart: cartId2
		payingWithCardNumber: testObjectsFactory validCreditCardNumber 
		of: testObjectsFactory validCreditCardName
		expiringOn: testObjectsFactory notExpiredCreditCardMonth.
		
	purchasesByClient := storeFacade
		listPurchasesOf: testObjectsFactory
		clientId withPassword: testObjectsFactory password.
		
	self assert: 2 equals: purchasesByClient size.
	self assert: 40 equals: purchasesByClient first total.
	self assert: 50 equals: purchasesByClient second total."
	
		
	!
!StoreFacadeTest methodsFor: 'tests' stamp: 'JPF 6/20/2021 12:28:30'!
test10ShouldReturnEmptyListOfPurchasesWhenClientDidNotMakeAnyPurchase

	| storeFacade cartId1  purchasesByClient |
	
	storeFacade := testObjectsFactory createStoreFacade.

	cartId1 := storeFacade createCartFor: testObjectsFactory clientId withPassword: testObjectsFactory password.
	storeFacade add: 3 of: testObjectsFactory itemSellByTheStore to: cartId1.
	storeFacade add: 1 of: testObjectsFactory itemSellByTheStore2 to: cartId1.

	purchasesByClient := storeFacade
		listPurchasesOf: testObjectsFactory
		clientId withPassword: testObjectsFactory password.
		
	self assert: purchasesByClient isEmpty.
	
		
	! !
!StoreFacadeTest methodsFor: 'tests' stamp: 'JPF 6/20/2021 12:28:41' prior: 50881436!
test10ShouldReturnEmptyListOfPurchasesWhenClientDidNotMakeAnyPurchase

	| storeFacade cartId  purchasesByClient |
	
	storeFacade := testObjectsFactory createStoreFacade.

	cartId := storeFacade createCartFor: testObjectsFactory clientId withPassword: testObjectsFactory password.
	storeFacade add: 3 of: testObjectsFactory itemSellByTheStore to: cartId.
	storeFacade add: 1 of: testObjectsFactory itemSellByTheStore2 to: cartId.

	purchasesByClient := storeFacade
		listPurchasesOf: testObjectsFactory
		clientId withPassword: testObjectsFactory password.
		
	self assert: purchasesByClient isEmpty.
	
		
	! !

!testRun: #StoreFacadeTest #test10ShouldReturnEmptyListOfPurchasesWhenClientDidNotMakeAnyPurchase stamp: 'JPF 6/20/2021 12:29:03'!
ERROR!

!testRun: #StoreFacadeTest #test10ShouldReturnEmptyListOfPurchasesWhenClientDidNotMakeAnyPurchase stamp: 'JPF 6/20/2021 12:29:03'!
ERROR!
!StoreFacade methodsFor: 'actions' stamp: 'JPF 6/20/2021 12:29:32' prior: 50880815!
listPurchasesOf: aClientId withPassword: aPassword

	clientValidator validateClient: aClientId withPassword: aPassword.
	
	^ OrderedCollection new.! !

!testRun: #StoreFacadeTest #test10ShouldReturnEmptyListOfPurchasesWhenClientDidNotMakeAnyPurchase stamp: 'JPF 6/20/2021 12:29:34'!
PASSED!

!testRun: #StoreFacadeTest #test10ShouldReturnEmptyListOfPurchasesWhenClientDidNotMakeAnyPurchase stamp: 'JPF 6/20/2021 12:29:37'!
PASSED!
!StoreFacadeTest methodsFor: 'tests' stamp: 'JPF 6/20/2021 12:29:45' prior: 50881344!
test11ShouldListClientPurchases

	| storeFacade cartId1  cartId2 purchasesByClient |
	
	storeFacade := testObjectsFactory createStoreFacade.

	cartId1 := storeFacade createCartFor: testObjectsFactory clientId withPassword: testObjectsFactory password.
	storeFacade add: 3 of: testObjectsFactory itemSellByTheStore to: cartId1.
	storeFacade add: 1 of: testObjectsFactory itemSellByTheStore2 to: cartId1.
	storeFacade
		checkOutCart: cartId1
		payingWithCardNumber: testObjectsFactory validCreditCardNumber 
		of: testObjectsFactory validCreditCardName
		expiringOn: testObjectsFactory notExpiredCreditCardMonth.
		
	cartId2 := storeFacade createCartFor: testObjectsFactory clientId withPassword: testObjectsFactory password.
	storeFacade add: 1 of: testObjectsFactory itemSellByTheStore to: cartId2.
	storeFacade add: 2 of: testObjectsFactory itemSellByTheStore2 to: cartId2.
	storeFacade
		checkOutCart: cartId2
		payingWithCardNumber: testObjectsFactory validCreditCardNumber 
		of: testObjectsFactory validCreditCardName
		expiringOn: testObjectsFactory notExpiredCreditCardMonth.
		
	purchasesByClient := storeFacade
		listPurchasesOf: testObjectsFactory
		clientId withPassword: testObjectsFactory password.
		
	self assert: 2 equals: purchasesByClient size.
	self assert: 40 equals: purchasesByClient first total.
	self assert: 50 equals: purchasesByClient second total.
	
		
	! !
!StoreFacadeTest methodsFor: 'tests' stamp: 'JPF 6/20/2021 12:30:19' prior: 50881506!
test11ShouldListClientPurchases

	| storeFacade cartId1  cartId2 purchasesByClient |
	
	storeFacade := testObjectsFactory createStoreFacade.

	cartId1 := storeFacade createCartFor: testObjectsFactory clientId withPassword: testObjectsFactory password.
	storeFacade add: 3 of: testObjectsFactory itemSellByTheStore to: cartId1.
	storeFacade add: 1 of: testObjectsFactory itemSellByTheStore2 to: cartId1.
	storeFacade
		checkOutCart: cartId1
		payingWithCardNumber: testObjectsFactory validCreditCardNumber 
		of: testObjectsFactory validCreditCardName
		expiringOn: testObjectsFactory notExpiredCreditCardMonth.
		
	cartId2 := storeFacade createCartFor: testObjectsFactory clientId withPassword: testObjectsFactory password.
	storeFacade add: 1 of: testObjectsFactory itemSellByTheStore to: cartId2.
	storeFacade add: 2 of: testObjectsFactory itemSellByTheStore2 to: cartId2.
	storeFacade
		checkOutCart: cartId2
		payingWithCardNumber: testObjectsFactory validCreditCardNumber 
		of: testObjectsFactory validCreditCardName
		expiringOn: testObjectsFactory notExpiredCreditCardMonth.
		
	purchasesByClient := storeFacade
		listPurchasesOf: testObjectsFactory
		clientId withPassword: testObjectsFactory password.
		
	self assert: 2 equals: purchasesByClient size.
	self assert: 40 equals: purchasesByClient first total.
	self assert: 50 equals: purchasesByClient second total.
	
		
	! !
!StoreFacadeTest methodsFor: 'tests' stamp: 'JPF 6/20/2021 12:30:34' prior: 50881552!
test11ShouldListClientPurchases

	| storeFacade cartId1  cartId2 purchasesByClient firstPurchase |
	
	storeFacade := testObjectsFactory createStoreFacade.

	cartId1 := storeFacade createCartFor: testObjectsFactory clientId withPassword: testObjectsFactory password.
	storeFacade add: 3 of: testObjectsFactory itemSellByTheStore to: cartId1.
	storeFacade add: 1 of: testObjectsFactory itemSellByTheStore2 to: cartId1.
	storeFacade
		checkOutCart: cartId1
		payingWithCardNumber: testObjectsFactory validCreditCardNumber 
		of: testObjectsFactory validCreditCardName
		expiringOn: testObjectsFactory notExpiredCreditCardMonth.
		
	cartId2 := storeFacade createCartFor: testObjectsFactory clientId withPassword: testObjectsFactory password.
	storeFacade add: 1 of: testObjectsFactory itemSellByTheStore to: cartId2.
	storeFacade add: 2 of: testObjectsFactory itemSellByTheStore2 to: cartId2.
	storeFacade
		checkOutCart: cartId2
		payingWithCardNumber: testObjectsFactory validCreditCardNumber 
		of: testObjectsFactory validCreditCardName
		expiringOn: testObjectsFactory notExpiredCreditCardMonth.
		
	purchasesByClient := storeFacade
		listPurchasesOf: testObjectsFactory
		clientId withPassword: testObjectsFactory password.
		
	self assert: 2 equals: purchasesByClient size.
	firstPurchase _ purchasesByClient first total.
	self assert: 40 equals: firstPurchase.
	self assert: 50 equals: purchasesByClient second total.
	
		
	! !
!StoreFacadeTest methodsFor: 'tests' stamp: 'JPF 6/20/2021 12:31:40' prior: 50881598!
test11ShouldListClientPurchases

	| storeFacade cartId1  cartId2 purchasesByClient firstPurchase secondPurchase |
	
	storeFacade := testObjectsFactory createStoreFacade.

	cartId1 := storeFacade createCartFor: testObjectsFactory clientId withPassword: testObjectsFactory password.
	storeFacade add: 3 of: testObjectsFactory itemSellByTheStore to: cartId1.
	storeFacade add: 1 of: testObjectsFactory itemSellByTheStore2 to: cartId1.
	storeFacade
		checkOutCart: cartId1
		payingWithCardNumber: testObjectsFactory validCreditCardNumber 
		of: testObjectsFactory validCreditCardName
		expiringOn: testObjectsFactory notExpiredCreditCardMonth.
		
	cartId2 := storeFacade createCartFor: testObjectsFactory clientId withPassword: testObjectsFactory password.
	storeFacade add: 1 of: testObjectsFactory itemSellByTheStore to: cartId2.
	storeFacade add: 2 of: testObjectsFactory itemSellByTheStore2 to: cartId2.
	storeFacade
		checkOutCart: cartId2
		payingWithCardNumber: testObjectsFactory validCreditCardNumber 
		of: testObjectsFactory validCreditCardName
		expiringOn: testObjectsFactory notExpiredCreditCardMonth.
		
	purchasesByClient := storeFacade
		listPurchasesOf: testObjectsFactory
		clientId withPassword: testObjectsFactory password.
		
	firstPurchase := purchasesByClient first total.
	secondPurchase := purchasesByClient second.
		
	self assert: 2 equals: purchasesByClient size.
	
	self assert: 40 equals: firstPurchase total.
	self assert: 50 equals: secondPurchase total.
	
		
	! !
!StoreFacadeTest methodsFor: 'tests' stamp: 'JPF 6/20/2021 12:34:29' prior: 50881646!
test11ShouldListClientPurchases

	| storeFacade cartId1  cartId2 purchasesByClient firstPurchase secondPurchase |
	
	storeFacade := testObjectsFactory createStoreFacade.

	cartId1 := storeFacade createCartFor: testObjectsFactory clientId withPassword: testObjectsFactory password.
	storeFacade add: 3 of: testObjectsFactory itemSellByTheStore to: cartId1.
	storeFacade add: 1 of: testObjectsFactory itemSellByTheStore2 to: cartId1.
	storeFacade
		checkOutCart: cartId1
		payingWithCardNumber: testObjectsFactory validCreditCardNumber 
		of: testObjectsFactory validCreditCardName
		expiringOn: testObjectsFactory notExpiredCreditCardMonth.
		
	cartId2 := storeFacade createCartFor: testObjectsFactory clientId withPassword: testObjectsFactory password.
	storeFacade add: 1 of: testObjectsFactory itemSellByTheStore to: cartId2.
	storeFacade add: 2 of: testObjectsFactory itemSellByTheStore2 to: cartId2.
	storeFacade
		checkOutCart: cartId2
		payingWithCardNumber: testObjectsFactory validCreditCardNumber 
		of: testObjectsFactory validCreditCardName
		expiringOn: testObjectsFactory notExpiredCreditCardMonth.
		
	purchasesByClient := storeFacade
		listPurchasesOf: testObjectsFactory
		clientId withPassword: testObjectsFactory password.
		
	self assert: 2 equals: purchasesByClient size.
	
	firstPurchase := purchasesByClient first total.
	secondPurchase := purchasesByClient second.
	
	self assert: 40 equals: firstPurchase total.
	self assert: 50 equals: secondPurchase total.
	
	self assert: testObjectsFactory itemSellByTheStore equals: firstPurchase first item.
	self assert: 3 equals: firstPurchase first quantity.
	
		
	! !
!StoreFacadeTest methodsFor: 'tests' stamp: 'JPF 6/20/2021 12:35:42' prior: 50881696!
test11ShouldListClientPurchases

	| storeFacade cartId1  cartId2 purchasesByClient firstPurchase secondPurchase |
	
	storeFacade := testObjectsFactory createStoreFacade.

	cartId1 := storeFacade createCartFor: testObjectsFactory clientId withPassword: testObjectsFactory password.
	storeFacade add: 3 of: testObjectsFactory itemSellByTheStore to: cartId1.
	storeFacade add: 1 of: testObjectsFactory itemSellByTheStore2 to: cartId1.
	storeFacade
		checkOutCart: cartId1
		payingWithCardNumber: testObjectsFactory validCreditCardNumber 
		of: testObjectsFactory validCreditCardName
		expiringOn: testObjectsFactory notExpiredCreditCardMonth.
		
	cartId2 := storeFacade createCartFor: testObjectsFactory clientId withPassword: testObjectsFactory password.
	storeFacade add: 1 of: testObjectsFactory itemSellByTheStore to: cartId2.
	storeFacade add: 2 of: testObjectsFactory itemSellByTheStore2 to: cartId2.
	storeFacade
		checkOutCart: cartId2
		payingWithCardNumber: testObjectsFactory validCreditCardNumber 
		of: testObjectsFactory validCreditCardName
		expiringOn: testObjectsFactory notExpiredCreditCardMonth.
		
	purchasesByClient := storeFacade
		listPurchasesOf: testObjectsFactory
		clientId withPassword: testObjectsFactory password.
		
	self assert: 2 equals: purchasesByClient size.
	
	firstPurchase := purchasesByClient first total.
	secondPurchase := purchasesByClient second.
	
	self assert: 40 equals: firstPurchase total.
	self assert: 50 equals: secondPurchase total.
	
	self assert: testObjectsFactory itemSellByTheStore equals: firstPurchase first item.
	self assert: 3 equals: firstPurchase first quantity.
	self assert: testObjectsFactory itemSellByTheStore2 equals: firstPurchase second item.
	self assert: 1 equals: firstPurchase second quantity.
	
	self assert: testObjectsFactory itemSellByTheStore equals: secondPurchase first item.
	self assert: 1 equals: firstPurchase first quantity.
	self assert: testObjectsFactory itemSellByTheStore2 equals: secondPurchase second item.
	self assert: 2 equals: firstPurchase second quantity.
	
		
	! !

!testRun: #StoreFacadeTest #test11ShouldListClientPurchases stamp: 'JPF 6/20/2021 12:36:06'!
FAILURE!

!testRun: #StoreFacadeTest #test11ShouldListClientPurchases stamp: 'JPF 6/20/2021 12:36:06'!
FAILURE!
!StoreFacade methodsFor: 'actions' stamp: 'JPF 6/20/2021 12:37:11' prior: 50880644!
checkOutCart: aCartId payingWithCardNumber: aCreditCardNumber of: aName expiringOn: aMonth

	self findCart: aCartId.
	
	
	
	
	self removeCart: aCartId.
	
	^ self nextTransactionId.! !

!classDefinition: #StoreFacade category: 'TusLibros' stamp: 'JPF 6/20/2021 12:48:57'!
Object subclass: #StoreFacade
	instanceVariableNames: 'clientValidator cartRepository cartIdSequence catalog transactionIdSequence merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #StoreFacade category: 'TusLibros' stamp: 'JPF 6/20/2021 12:49:15'!
Object subclass: #StoreFacade
	instanceVariableNames: 'clientValidator cartRepository cartIdSequence catalog transactionIdSequence merchantProcessor salesBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreFacade methodsFor: 'actions' stamp: 'JPF 6/20/2021 12:48:53' prior: 50881824!
checkOutCart: aCartId payingWithCardNumber: aCreditCardNumber of: aName expiringOn: aMonth

	| cart cashier aDateAndTime |

	cart := self findCart: aCartId.
	
	cashier:= Cashier 
		toCheckout: cart 
		charging: (CreditCard 
			withNumber: aCreditCardNumber
			of: aName
			expiringOn: aMonth)
		throught: merchantProcessor
		on: aDateAndTime
		registeringOn: salesBook.
	
	self removeCart: aCartId.
	
	^ self nextTransactionId.! !
!StoreFacade methodsFor: 'actions' stamp: 'JPF 6/20/2021 12:50:01' prior: 50881852!
checkOutCart: aCartId payingWithCardNumber: aCreditCardNumber of: aName expiringOn: aMonth

	| cart cashier aDateAndTime |
	
	aDateAndTime := DateAndTime now.

	cart := self findCart: aCartId.
	
	cashier:= Cashier 
		toCheckout: cart 
		charging: (CreditCard 
			withNumber: aCreditCardNumber
			of: aName
			expiringOn: aMonth)
		throught: merchantProcessor
		on: aDateAndTime
		registeringOn: salesBook.
	
	self removeCart: aCartId.
	
	^ self nextTransactionId.! !
!StoreFacade methodsFor: 'actions' stamp: 'JPF 6/20/2021 12:50:11' prior: 50881869!
checkOutCart: aCartId payingWithCardNumber: aCreditCardNumber of: aName expiringOn: aMonth

	| cart cashier aDateAndTime |
	
	aDateAndTime := DateAndTime now.

	cart := self findCart: aCartId.
	
	cashier := Cashier 
		toCheckout: cart 
		charging: (CreditCard 
			withNumber: aCreditCardNumber
			of: aName
			expiringOn: aMonth)
		throught: merchantProcessor
		on: aDateAndTime
		registeringOn: salesBook.
	
	self removeCart: aCartId.
	
	^ self nextTransactionId.! !
!StoreFacade methodsFor: 'actions' stamp: 'JPF 6/20/2021 12:51:30' prior: 50881887!
checkOutCart: aCartId payingWithCardNumber: aCreditCardNumber of: aName expiringOn: aMonth

	| cart cashier aDateAndTime |
	
	aDateAndTime := DateAndTime now.

	cart := self findCart: aCartId.
	
	cashier := Cashier 
		toCheckout: cart 
		charging: (CreditCard 
			withNumber: aCreditCardNumber
			of: aName
			expiringOn: aMonth)
		throught: merchantProcessor
		on: aDateAndTime
		registeringOn: salesBook.
		
	
	self removeCart: aCartId.
	
	^ self nextTransactionId.! !
!StoreFacade methodsFor: 'actions' stamp: 'JPF 6/20/2021 12:52:02' prior: 50881905!
checkOutCart: aCartId payingWithCardNumber: aCreditCardNumber of: aName expiringOn: aMonth

	| cart cashier aDateAndTime |
	
	aDateAndTime := DateAndTime now.

	cart := self findCart: aCartId.
	
	cashier := Cashier 
		toCheckout: cart 
		charging: (CreditCard 
			withNumber: aCreditCardNumber
			of: aName
			expiringOn: aMonth)
		throught: merchantProcessor
		on: aDateAndTime
		registeringOn: salesBook.
		
	
		
	
	self removeCart: aCartId.
	
	^ self nextTransactionId.! !
!StoreFacade methodsFor: 'actions' stamp: 'JPF 6/20/2021 12:55:34' prior: 50881923!
checkOutCart: aCartId payingWithCardNumber: aCreditCardNumber of: aName expiringOn: aMonth

	| cart cashier aDateAndTime sale |
	
	aDateAndTime := DateAndTime now.

	cart := self findCart: aCartId.
	
	cashier := Cashier 
		toCheckout: cart 
		charging: (CreditCard 
			withNumber: aCreditCardNumber
			of: aName
			expiringOn: aMonth)
		throught: merchantProcessor
		on: aDateAndTime
		registeringOn: salesBook.
		
	sale := cashier checkout.
		
	
	self removeCart: aCartId.
	
	^ self nextTransactionId.! !
!StoreFacade methodsFor: 'actions' stamp: 'JPF 6/20/2021 12:56:37' prior: 50881941!
checkOutCart: aCartId payingWithCardNumber: aCreditCardNumber of: aName expiringOn: aMonth

	| cart cashier aDateAndTime sale |
	
	aDateAndTime := DateAndTime now.

	cart := self findCart: aCartId.
	
	cashier := Cashier 
		toCheckout: cart 
		charging: (CreditCard 
			withNumber: aCreditCardNumber
			of: aName
			expiringOn: aMonth)
		throught: merchantProcessor
		on: aDateAndTime
		registeringOn: salesBook.
		
	sale := cashier checkOut.
		
	self removeCart: aCartId.
	
	^ sale transactionId.! !
!Sale class methodsFor: 'instance creation' stamp: 'JPF 6/20/2021 13:02:27'!
of: items totalizing: aTotal

	"should assert total is not negative or 0!!"
	^self new initializeTotal: aTotal ! !

!methodRemoval: Sale class #of: stamp: 'JPF 6/20/2021 13:02:33'!
of: aTotal

	"should assert total is not negative or 0!!"
	^self new initializeTotal: aTotal !
!Sale class methodsFor: 'instance creation' stamp: 'JPF 6/20/2021 13:03:02' prior: 50881979!
of: items totalizing: aTotal

	"should assert total is not negative or 0!!"
	^self new initializeOf: items totalizing: aTotal! !

!classDefinition: #Sale category: 'TusLibros' stamp: 'JPF 6/20/2021 13:04:55'!
Object subclass: #Sale
	instanceVariableNames: 'total items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Sale methodsFor: 'initialization' stamp: 'JPF 6/20/2021 13:04:54'!
initializeOfItems: itemsOfSale totalizing: aTotal

	total := aTotal.
	items := itemsOfSale.
	! !

!methodRemoval: Sale #initializeTotal: stamp: 'JPF 6/20/2021 13:05:00'!
initializeTotal: aTotal

	total := aTotal !
!Cashier methodsFor: 'checkout - private' stamp: 'JPF 6/20/2021 13:09:58' prior: 50876541!
createSale

	^ Sale of: (self salesItemsFor: cart items) totalizing: total.
! !

!testRun: #StoreFacadeTest #test11ShouldListClientPurchases stamp: 'JPF 6/20/2021 13:10:26'!
ERROR!

!testRun: #StoreFacadeTest #test11ShouldListClientPurchases stamp: 'JPF 6/20/2021 13:10:26'!
ERROR!
!StoreFacade methodsFor: 'initialization' stamp: 'JPF 6/20/2021 13:12:25' prior: 50880397!
initializeValidatingWith: aClientValidator having: aCatalog  

	| aMerchantProcessor |
	clientValidator := aClientValidator.
	catalog := aCatalog.
	cartRepository := Dictionary new.
	cartIdSequence := 1.
	transactionIdSequence :=1.
	merchantProcessor := aMerchantProcessor.
	salesBook := OrderedCollection new.! !
!StoreFacade class methodsFor: 'instance creation' stamp: 'JPF 6/20/2021 13:14:34'!
validatingWith: aClientValidator having: aCatalog processingPaymentsWith: aMerchantProcessor   
	
	^self new initializeValidatingWith: aClientValidator having: aCatalog ! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'JPF 6/20/2021 13:14:34' prior: 50878596!
createStoreFacade
	
	^ StoreFacade validatingWith: self having: self defaultCatalog processingPaymentsWith: aMerchantProcessor.! !

!methodRemoval: StoreFacade class #validatingWith:having: stamp: 'JPF 6/20/2021 13:14:34'!
validatingWith: aClientValidator having: aCatalog  
	
	^self new initializeValidatingWith: aClientValidator having: aCatalog !

!classDefinition: #StoreTestObjectsFactory category: 'TusLibros' stamp: 'JPF 6/20/2021 13:16:41'!
Object subclass: #StoreTestObjectsFactory
	instanceVariableNames: 'today validateClientBehaviour debitBehavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreTestObjectsFactory methodsFor: 'merchant processor protocol' stamp: 'JPF 6/20/2021 13:16:36'!
debit: anAmount from: aCreditCard 

	^debitBehavior value: anAmount value: aCreditCard ! !
!CashierTest methodsFor: 'setup' stamp: 'JPF 6/20/2021 13:16:56' prior: 50876756 overrides: 16927572!
setUp 

	testObjectsFactory := StoreTestObjectsFactory new! !
!StoreTestObjectsFactory methodsFor: 'initialization' stamp: 'JPF 6/20/2021 13:17:12' prior: 50880851 overrides: 16896425!
initialize

	today := DateAndTime now.
	validateClientBehaviour := [ :clientIdArg :passwordArg | ].
	debitBehavior := [ :anAmount :aCreditCard | ]! !
!StoreTestObjectsFactory methodsFor: 'merchant processor protocol' stamp: 'JPF 6/20/2021 13:18:01'!
debitBehavior: aDebitBehavior

	debitBehavior := aDebitBehavior! !
!StoreTestObjectsFactory methodsFor: 'merchantProcessor' stamp: 'JPF 6/20/2021 13:20:14'!
merchantProcessor

	^ self! !
!CashierTest methodsFor: 'tests' stamp: 'JPF 6/20/2021 13:20:42' prior: 50876721!
test01CanNotCheckoutAnEmptyCart

	| salesBook |
	
	salesBook := OrderedCollection new.
	self 
		should: [ Cashier 
			toCheckout: testObjectsFactory createCart 
			charging: testObjectsFactory notExpiredCreditCard 
			throught: testObjectsFactory merchantProcessor
			on: testObjectsFactory today
			registeringOn:  salesBook ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier cartCanNotBeEmptyErrorMessage.
			self assert: salesBook isEmpty ]! !
!StoreTestObjectsFactory methodsFor: 'merchantProcessor' stamp: 'JPF 6/20/2021 13:21:05'!
createMerchantProcessor

	^ self! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'JPF 6/20/2021 13:21:05' prior: 50882101!
test01CanNotCheckoutAnEmptyCart

	| salesBook |
	
	salesBook := OrderedCollection new.
	self 
		should: [ Cashier 
			toCheckout: testObjectsFactory createCart 
			charging: testObjectsFactory notExpiredCreditCard 
			throught: testObjectsFactory createMerchantProcessor
			on: testObjectsFactory today
			registeringOn:  salesBook ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier cartCanNotBeEmptyErrorMessage.
			self assert: salesBook isEmpty ]! !

!methodRemoval: StoreTestObjectsFactory #merchantProcessor stamp: 'JPF 6/20/2021 13:21:05'!
merchantProcessor

	^ self!
!CashierTest methodsFor: 'tests' stamp: 'JPF 6/20/2021 13:21:21' prior: 50876739!
test02CalculatedTotalIsCorrect

	| cart cashier |
	
	cart := testObjectsFactory createCart.
	cart add: 2 of: testObjectsFactory itemSellByTheStore.
	
	cashier :=  Cashier
		toCheckout: cart 
		charging: testObjectsFactory notExpiredCreditCard 
		throught: testObjectsFactory createMerchantProcessor
		on: testObjectsFactory today 
		registeringOn: OrderedCollection new.
		
	self assert: cashier checkOut = (testObjectsFactory itemSellByTheStorePrice * 2)! !
!CashierTest methodsFor: 'tests' stamp: 'JPF 6/20/2021 13:21:28' prior: 50876632!
test03CanNotCheckoutWithAnExpiredCreditCart

	| cart salesBook |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	salesBook := OrderedCollection new.
	
	self
		should: [ Cashier 
				toCheckout: cart 
				charging: testObjectsFactory expiredCreditCard 
				throught: testObjectsFactory createMerchantProcessor
				on: testObjectsFactory today
				registeringOn: salesBook ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = Cashier canNotChargeAnExpiredCreditCardErrorMessage.
			self assert: salesBook isEmpty ]! !
!CashierTest methodsFor: 'tests' stamp: 'JPF 6/20/2021 13:21:33' prior: 50876653!
test04CheckoutRegistersASale

	| cart cashier salesBook total |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	salesBook := OrderedCollection new.
 
	cashier:= Cashier 
		toCheckout: cart 
		charging: testObjectsFactory notExpiredCreditCard
		throught: testObjectsFactory createMerchantProcessor
		on: testObjectsFactory today
		registeringOn: salesBook.
		
	total := cashier checkOut.
					
	self assert: salesBook size = 1.
	self assert: salesBook first total = total.! !
!CashierTest methodsFor: 'tests' stamp: 'JPF 6/20/2021 13:22:05' prior: 50876697!
test05CashierChargesCreditCardUsingMerchantProcessor

	| cart cashier salesBook total creditCard debitedAmout debitedCreditCard  |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	salesBook := OrderedCollection new.
	
	testObjectsFactory debitBehavior: [ :anAmount :aCreditCard | 
		debitedAmout := anAmount.
		debitedCreditCard := aCreditCard ].
	total := cashier checkOut.
 
	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: testObjectsFactory createMerchantProcessor
		on: testObjectsFactory today
		registeringOn: salesBook.	
					
	self assert: debitedCreditCard = creditCard.
	self assert: debitedAmout = total.! !
!CashierTest methodsFor: 'tests' stamp: 'JPF 6/20/2021 13:22:48' prior: 50882206!
test05CashierChargesCreditCardUsingMerchantProcessor

	| cart cashier salesBook total creditCard debitedAmout debitedCreditCard  |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	salesBook := OrderedCollection new.
	
	testObjectsFactory debitBehavior: [ :anAmount :aCreditCard | 
		debitedAmout := anAmount.
		debitedCreditCard := aCreditCard ].
	
 	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: testObjectsFactory createMerchantProcessor
		on: testObjectsFactory today
		registeringOn: salesBook.	
		
	total := cashier checkOut.
					
	self assert: debitedCreditCard = creditCard.
	self assert: debitedAmout = total.! !
!CashierTest methodsFor: 'tests' stamp: 'JPF 6/20/2021 13:23:05' prior: 50876671!
test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit

	| cart cashier salesBook creditCard |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	salesBook := OrderedCollection new.
 	debitBehavior := [ :anAmount :aCreditCard | self error: Cashier creditCardHasNoCreditErrorMessage].
	
	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: testObjectsFactory createMerchantProcessor
		on: testObjectsFactory today
		registeringOn: salesBook.
		
	self 
		should: [cashier checkOut ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier creditCardHasNoCreditErrorMessage.
			self assert: salesBook isEmpty ]! !

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'JPF 6/20/2021 13:23:23'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'JPF 6/20/2021 13:23:23'!
ERROR!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'JPF 6/20/2021 13:23:23'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'JPF 6/20/2021 13:23:23'!
ERROR!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'JPF 6/20/2021 13:23:23'!
ERROR!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'JPF 6/20/2021 13:23:23'!
ERROR!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'JPF 6/20/2021 13:23:27'!
ERROR!
!Cashier methodsFor: 'private' stamp: 'JPF 6/20/2021 13:23:43'!
salesItemsFor: anOrderedCollection 
	self shouldBeImplemented.! !

!methodRemoval: Cashier #salesItemsFor: stamp: 'JPF 6/20/2021 13:27:38'!
salesItemsFor: anOrderedCollection 
	self shouldBeImplemented.!
!Cashier methodsFor: 'checkout - private' stamp: 'JPF 6/20/2021 13:27:53' prior: 50882014!
createSale

	^ Sale of: cart items totalizing: total.
! !

dict := OrderedDictionary new.!

dict at: 4 put: 'a'.
dict at: 1 put: 'b'.
dict at: 6 put: 'c'.!

list := OrderedCollection new.!

list := dict keysDo: [ :key | list add: (dict at: key)]!

list!

list := dict keysDo: [ :key | list add: (dict valueAt: key)]!

bag := Bag new.

bag add: 1.
bag add: 2.
bag add: 2.
bag add: 3.
bag add: 3.
bag add: 3.!

bag occurrencesOf: 1!

bag occurrencesOf: 2!
!Cart methodsFor: 'accessing' stamp: 'JPF 6/20/2021 13:49:50' prior: 50878063!
items

	^ items copy! !
!Cart methodsFor: 'initialization' stamp: 'JPF 6/20/2021 13:51:17' prior: 50876377!
initializeAcceptingItemsOf: aCatalog

	catalog := aCatalog.
	items := Bag new.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'JPF 6/20/2021 13:51:22'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'JPF 6/20/2021 13:51:22'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'JPF 6/20/2021 13:51:22'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'JPF 6/20/2021 13:51:22'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'JPF 6/20/2021 13:51:22'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'JPF 6/20/2021 13:51:22'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'JPF 6/20/2021 13:51:22'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'JPF 6/20/2021 13:51:22'!
PASSED!
!Cart methodsFor: 'initialization' stamp: 'JPF 6/20/2021 13:52:16' prior: 50882339!
initializeAcceptingItemsOf: aCatalog

	catalog := aCatalog.
	items := OrderedCollection new.! !
!Cart methodsFor: 'accessing' stamp: 'JPF 6/20/2021 13:52:56' prior: 50882335!
items

	^ items copy! !
!Cart methodsFor: 'accessing' stamp: 'JPF 6/21/2021 10:04:02'!
cartDetail

	^ items copy! !
!StoreFacade methodsFor: 'as yet unclassified' stamp: 'JPF 6/21/2021 10:04:02' prior: 50878311!
listCart: aCartId
	
	^ (self findCart: aCartId) cartDetail.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'JPF 6/21/2021 10:04:02' prior: 50882318!
createSale

	^ Sale of: cart cartDetail totalizing: total.
! !

!methodRemoval: Cart #items stamp: 'JPF 6/21/2021 10:04:02'!
items

	^ items copy!
!Cart methodsFor: 'accessing' stamp: 'JPF 6/21/2021 10:08:03' prior: 50882379!
cartDetail

	| cartDetail |
	
	cartDetail := OrderedDictionary new.

	items do: [ :item |
		cartDetail at: item put: (items occurrencesOf: item)
		].
	
	^ cartDetail! !

list := OrderedCollection with: 'a' with: 'a' with: 'a'.!

dict := OrderedDictionary new.!

dict := OrderedDictionary new.!

list do: [ :item | dict at: item put: (list occurrencesOf: item) ]!

dict!

list := OrderedCollection with: 'a' with: 'a' with: 'a' with: 'b' with: 'b' with: 'a'.!

dict := OrderedDictionary new.!

list do: [ :item | dict at: item put: (list occurrencesOf: item) ].!

dict!

dict!
!StoreFacadeTest methodsFor: 'tests' stamp: 'JPF 6/21/2021 10:14:40' prior: 50881750!
test11ShouldListClientPurchases

	| storeFacade cartId1  cartId2 purchasesByClient firstPurchase secondPurchase |
	
	storeFacade := testObjectsFactory createStoreFacade.

	cartId1 := storeFacade createCartFor: testObjectsFactory clientId withPassword: testObjectsFactory password.
	storeFacade add: 3 of: testObjectsFactory itemSellByTheStore to: cartId1.
	storeFacade add: 1 of: testObjectsFactory itemSellByTheStore2 to: cartId1.
	storeFacade
		checkOutCart: cartId1
		payingWithCardNumber: testObjectsFactory validCreditCardNumber 
		of: testObjectsFactory validCreditCardName
		expiringOn: testObjectsFactory notExpiredCreditCardMonth.
		
	cartId2 := storeFacade createCartFor: testObjectsFactory clientId withPassword: testObjectsFactory password.
	storeFacade add: 1 of: testObjectsFactory itemSellByTheStore to: cartId2.
	storeFacade add: 2 of: testObjectsFactory itemSellByTheStore2 to: cartId2.
	storeFacade
		checkOutCart: cartId2
		payingWithCardNumber: testObjectsFactory validCreditCardNumber 
		of: testObjectsFactory validCreditCardName
		expiringOn: testObjectsFactory notExpiredCreditCardMonth.
		
	purchasesByClient := storeFacade
		listPurchasesOf: testObjectsFactory
		clientId withPassword: testObjectsFactory password.
		
	self assert: 2 equals: purchasesByClient size.
	
	firstPurchase := purchasesByClient first.
	secondPurchase := purchasesByClient second.
	
	self assert: 40 equals: firstPurchase total.
	self assert: 50 equals: secondPurchase total.
	
	self assert: testObjectsFactory itemSellByTheStore equals: firstPurchase first item.
	self assert: 3 equals: firstPurchase first quantity.
	self assert: testObjectsFactory itemSellByTheStore2 equals: firstPurchase second item.
	self assert: 1 equals: firstPurchase second quantity.
	
	self assert: testObjectsFactory itemSellByTheStore equals: secondPurchase first item.
	self assert: 1 equals: firstPurchase first quantity.
	self assert: testObjectsFactory itemSellByTheStore2 equals: secondPurchase second item.
	self assert: 2 equals: firstPurchase second quantity.
	
		
	! !

dict at: 'a'!
!StoreFacadeTest methodsFor: 'tests' stamp: 'JPF 6/21/2021 10:31:46' prior: 50882417!
test11ShouldListClientPurchases

	| storeFacade cartId1  cartId2 purchasesByClient firstPurchase secondPurchase |
	
	storeFacade := testObjectsFactory createStoreFacade.

	cartId1 := storeFacade createCartFor: testObjectsFactory clientId withPassword: testObjectsFactory password.
	storeFacade add: 3 of: testObjectsFactory itemSellByTheStore to: cartId1.
	storeFacade add: 1 of: testObjectsFactory itemSellByTheStore2 to: cartId1.
	storeFacade
		checkOutCart: cartId1
		payingWithCardNumber: testObjectsFactory validCreditCardNumber 
		of: testObjectsFactory validCreditCardName
		expiringOn: testObjectsFactory notExpiredCreditCardMonth.
		
	cartId2 := storeFacade createCartFor: testObjectsFactory clientId withPassword: testObjectsFactory password.
	storeFacade add: 1 of: testObjectsFactory itemSellByTheStore to: cartId2.
	storeFacade add: 2 of: testObjectsFactory itemSellByTheStore2 to: cartId2.
	storeFacade
		checkOutCart: cartId2
		payingWithCardNumber: testObjectsFactory validCreditCardNumber 
		of: testObjectsFactory validCreditCardName
		expiringOn: testObjectsFactory notExpiredCreditCardMonth.
		
	purchasesByClient := storeFacade
		listPurchasesOf: testObjectsFactory
		clientId withPassword: testObjectsFactory password.
		
	self assert: 2 equals: purchasesByClient size.
	
	firstPurchase := purchasesByClient first.
	secondPurchase := purchasesByClient second.
	
	self assert: 40 equals: firstPurchase total.
	self assert: 50 equals: secondPurchase total.
	
	self assert: 3 equals: (firstPurchase at: testObjectsFactory itemSellByTheStore).
	self assert: 1 equals: (firstPurchase at: testObjectsFactory itemSellByTheStore2).
	
	self assert: testObjectsFactory itemSellByTheStore equals: secondPurchase first item.
	self assert: 1 equals: firstPurchase first quantity.
	self assert: testObjectsFactory itemSellByTheStore2 equals: secondPurchase second item.
	self assert: 2 equals: firstPurchase second quantity.
	
		
	! !
!StoreFacadeTest methodsFor: 'tests' stamp: 'JPF 6/21/2021 10:32:24' prior: 50882485!
test11ShouldListClientPurchases

	| storeFacade cartId1  cartId2 purchasesByClient firstPurchase secondPurchase |
	
	storeFacade := testObjectsFactory createStoreFacade.

	cartId1 := storeFacade createCartFor: testObjectsFactory clientId withPassword: testObjectsFactory password.
	storeFacade add: 3 of: testObjectsFactory itemSellByTheStore to: cartId1.
	storeFacade add: 1 of: testObjectsFactory itemSellByTheStore2 to: cartId1.
	storeFacade
		checkOutCart: cartId1
		payingWithCardNumber: testObjectsFactory validCreditCardNumber 
		of: testObjectsFactory validCreditCardName
		expiringOn: testObjectsFactory notExpiredCreditCardMonth.
		
	cartId2 := storeFacade createCartFor: testObjectsFactory clientId withPassword: testObjectsFactory password.
	storeFacade add: 1 of: testObjectsFactory itemSellByTheStore to: cartId2.
	storeFacade add: 2 of: testObjectsFactory itemSellByTheStore2 to: cartId2.
	storeFacade
		checkOutCart: cartId2
		payingWithCardNumber: testObjectsFactory validCreditCardNumber 
		of: testObjectsFactory validCreditCardName
		expiringOn: testObjectsFactory notExpiredCreditCardMonth.
		
	purchasesByClient := storeFacade
		listPurchasesOf: testObjectsFactory
		clientId withPassword: testObjectsFactory password.
		
	self assert: 2 equals: purchasesByClient size.
	
	firstPurchase := purchasesByClient first.
	secondPurchase := purchasesByClient second.
	
	self assert: 40 equals: firstPurchase total.
	self assert: 50 equals: secondPurchase total.
	
	self assert: 3 equals: (firstPurchase at: testObjectsFactory itemSellByTheStore).
	self assert: 1 equals: (firstPurchase at: testObjectsFactory itemSellByTheStore2).
	
	self assert: 1 equals: (secondPurchase at: testObjectsFactory itemSellByTheStore).
	self assert: 2 equals: (secondPurchase at: testObjectsFactory itemSellByTheStore2).
		
	! !

!classDefinition: #Cashier category: 'TusLibros' stamp: 'JPF 6/21/2021 10:39:17'!
Object subclass: #Cashier
	instanceVariableNames: 'cart salesBook merchantProcessor creditCard total transactionIdGenerator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'checkout - private' stamp: 'JPF 6/21/2021 10:38:54' prior: 50876536!
registerSale

	| sale |
	
	sale := self createSale.

	salesBook at: transactionIdGenerator nextId put: sale.! !
!Cashier methodsFor: 'checkout - private' stamp: 'JPF 6/21/2021 10:42:42' prior: 50882618!
registerSale

	| sale transactionId |
	
	sale := self createSale.
	transactionId := transactionIdGenerator nextId.

	salesBook at: transactionId put: sale.
	
	^ transactionId.! !
!Cashier methodsFor: 'checkout' stamp: 'JPF 6/21/2021 10:48:17' prior: 50876554!
checkOut

	| transactionId |
	self calculateTotal.
	self debitTotal.
	transactionId := self registerSale.

	^ transactionId.! !
!Cashier methodsFor: 'checkout' stamp: 'JPF 6/21/2021 10:48:29' prior: 50882634!
checkOut

	| transactionId |
	
	self calculateTotal.
	self debitTotal.
	transactionId := self registerSale.

	^ transactionId.! !

!classDefinition: #StoreFacade category: 'TusLibros' stamp: 'JPF 6/21/2021 10:56:47'!
Object subclass: #StoreFacade
	instanceVariableNames: 'clientValidator cartRepository cartIdSequence catalog transactionIdSequence merchantProcessor salesBook transactionsByClient'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreFacade methodsFor: 'actions' stamp: 'JPF 6/21/2021 10:56:29' prior: 50881960!
checkOutCart: aCartId payingWithCardNumber: aCreditCardNumber of: aName expiringOn: aMonth

	| cart cashier aDateAndTime clientId transactionId transactionsOfClient |
	
	aDateAndTime := DateAndTime now.

	cart := self findCart: aCartId.
	
	cashier := Cashier 
		toCheckout: cart 
		charging: (CreditCard 
			withNumber: aCreditCardNumber
			of: aName
			expiringOn: aMonth)
		throught: merchantProcessor
		on: aDateAndTime
		registeringOn: salesBook.
		
	transactionId := cashier checkOut.
	
	transactionsOfClient := transactionsByClient at: clientId ifAbsent: [ OrderedCollection new ].
	transactionsOfClient add: transactionId.
	transactionsByClient at: clientId put: transactionsOfClient.
		
	self removeCart: aCartId.
	
	^ transactionId.! !
!StoreFacade methodsFor: 'actions' stamp: 'JPF 6/21/2021 10:59:11'!
checkOutCart: aCartId payingWithCardNumber: aCreditCardNumber of: aName expiringOn: aMonth for: aClientId 

	| cart cashier aDateAndTime clientId transactionId transactionsOfClient |
	
	aDateAndTime := DateAndTime now.

	cart := self findCart: aCartId.
	
	cashier := Cashier 
		toCheckout: cart 
		charging: (CreditCard 
			withNumber: aCreditCardNumber
			of: aName
			expiringOn: aMonth)
		throught: merchantProcessor
		on: aDateAndTime
		registeringOn: salesBook.
		
	transactionId := cashier checkOut.
	
	transactionsOfClient := transactionsByClient at: clientId ifAbsent: [ OrderedCollection new ].
	transactionsOfClient add: transactionId.
	transactionsByClient at: clientId put: transactionsOfClient.
		
	self removeCart: aCartId.
	
	^ transactionId.! !
!StoreFacadeTest methodsFor: 'as yet unclassified' stamp: 'JPF 6/21/2021 10:59:11' prior: 50882549!
test11ShouldListClientPurchases

	| storeFacade cartId1  cartId2 purchasesByClient firstPurchase secondPurchase |
	
	storeFacade := testObjectsFactory createStoreFacade.

	cartId1 := storeFacade createCartFor: testObjectsFactory clientId withPassword: testObjectsFactory password.
	storeFacade add: 3 of: testObjectsFactory itemSellByTheStore to: cartId1.
	storeFacade add: 1 of: testObjectsFactory itemSellByTheStore2 to: cartId1.
	storeFacade
		checkOutCart: cartId1
		payingWithCardNumber: testObjectsFactory validCreditCardNumber 
		of: testObjectsFactory validCreditCardName
		expiringOn: testObjectsFactory notExpiredCreditCardMonth for: clientId.
		
	cartId2 := storeFacade createCartFor: testObjectsFactory clientId withPassword: testObjectsFactory password.
	storeFacade add: 1 of: testObjectsFactory itemSellByTheStore to: cartId2.
	storeFacade add: 2 of: testObjectsFactory itemSellByTheStore2 to: cartId2.
	storeFacade
		checkOutCart: cartId2
		payingWithCardNumber: testObjectsFactory validCreditCardNumber 
		of: testObjectsFactory validCreditCardName
		expiringOn: testObjectsFactory notExpiredCreditCardMonth for: clientId.
		
	purchasesByClient := storeFacade
		listPurchasesOf: testObjectsFactory
		clientId withPassword: testObjectsFactory password.
		
	self assert: 2 equals: purchasesByClient size.
	
	firstPurchase := purchasesByClient first.
	secondPurchase := purchasesByClient second.
	
	self assert: 40 equals: firstPurchase total.
	self assert: 50 equals: secondPurchase total.
	
	self assert: 3 equals: (firstPurchase at: testObjectsFactory itemSellByTheStore).
	self assert: 1 equals: (firstPurchase at: testObjectsFactory itemSellByTheStore2).
	
	self assert: 1 equals: (secondPurchase at: testObjectsFactory itemSellByTheStore).
	self assert: 2 equals: (secondPurchase at: testObjectsFactory itemSellByTheStore2).
		
	! !
!StoreFacadeTest methodsFor: 'as yet unclassified' stamp: 'JPF 6/21/2021 10:59:11' prior: 50880308!
test07ShouldReturnADifferentTransactionIdPerCheckout

	| storeFacade cartId1 cartId2 transactionId1 transactionId2 |
	
	storeFacade := testObjectsFactory createStoreFacade.

	cartId1 := storeFacade createCartFor: testObjectsFactory clientId withPassword: testObjectsFactory password.
	storeFacade add: 3 of: testObjectsFactory itemSellByTheStore to: cartId1.
	transactionId1 := storeFacade
		checkOutCart: cartId1
		payingWithCardNumber: testObjectsFactory validCreditCardNumber 
		of: testObjectsFactory validCreditCardName
		expiringOn: testObjectsFactory notExpiredCreditCardMonth for: clientId.
	
	cartId2 := storeFacade createCartFor: testObjectsFactory clientId withPassword: testObjectsFactory password.
	storeFacade add: 2 of: testObjectsFactory itemSellByTheStore to: cartId2.
	
	transactionId2 := storeFacade
		checkOutCart: cartId2
		payingWithCardNumber: testObjectsFactory validCreditCardNumber 
		of: testObjectsFactory validCreditCardName
		expiringOn: testObjectsFactory notExpiredCreditCardMonth for: clientId.
		
	self deny: transactionId1 = transactionId2.
	
	

! !
!StoreFacadeTest methodsFor: 'as yet unclassified' stamp: 'JPF 6/21/2021 10:59:11' prior: 50880512!
test08ShouldFailWhenTryToCheckoutTheSameCartTwice

	| storeFacade cartId  |
	
	storeFacade := testObjectsFactory createStoreFacade.

	cartId := storeFacade createCartFor: testObjectsFactory clientId withPassword: testObjectsFactory password.
	storeFacade add: 3 of: testObjectsFactory itemSellByTheStore to: cartId.
	storeFacade
		checkOutCart: cartId
		payingWithCardNumber: testObjectsFactory validCreditCardNumber 
		of: testObjectsFactory validCreditCardName
		expiringOn: testObjectsFactory notExpiredCreditCardMonth for: clientId.
		
	self
		should: [
		storeFacade
			checkOutCart: cartId
			payingWithCardNumber: testObjectsFactory validCreditCardNumber 
			of: testObjectsFactory validCreditCardName
			expiringOn: testObjectsFactory notExpiredCreditCardMonth for: clientId ]
		raise: Error - MessageNotUnderstood 
		withMessageText: StoreFacade inexistentCartErrorMessage
	
	
	

! !

!methodRemoval: StoreFacade #checkOutCart:payingWithCardNumber:of:expiringOn: stamp: 'JPF 6/21/2021 10:59:11'!
checkOutCart: aCartId payingWithCardNumber: aCreditCardNumber of: aName expiringOn: aMonth

	| cart cashier aDateAndTime clientId transactionId transactionsOfClient |
	
	aDateAndTime := DateAndTime now.

	cart := self findCart: aCartId.
	
	cashier := Cashier 
		toCheckout: cart 
		charging: (CreditCard 
			withNumber: aCreditCardNumber
			of: aName
			expiringOn: aMonth)
		throught: merchantProcessor
		on: aDateAndTime
		registeringOn: salesBook.
		
	transactionId := cashier checkOut.
	
	transactionsOfClient := transactionsByClient at: clientId ifAbsent: [ OrderedCollection new ].
	transactionsOfClient add: transactionId.
	transactionsByClient at: clientId put: transactionsOfClient.
		
	self removeCart: aCartId.
	
	^ transactionId.!
!StoreFacade methodsFor: 'actions' stamp: 'JPF 6/21/2021 10:59:38' prior: 50882685!
checkOutCart: aCartId payingWithCardNumber: aCreditCardNumber of: aName expiringOn: aMonth for: aClientId 

	| cart cashier aDateAndTime transactionId transactionsOfClient |
	
	aDateAndTime := DateAndTime now.

	cart := self findCart: aCartId.
	
	cashier := Cashier 
		toCheckout: cart 
		charging: (CreditCard 
			withNumber: aCreditCardNumber
			of: aName
			expiringOn: aMonth)
		throught: merchantProcessor
		on: aDateAndTime
		registeringOn: salesBook.
		
	transactionId := cashier checkOut.
	
	transactionsOfClient := transactionsByClient at: aClientId ifAbsent: [ OrderedCollection new ].
	transactionsOfClient add: transactionId.
	transactionsByClient at: aClientId put: transactionsOfClient.
		
	self removeCart: aCartId.
	
	^ transactionId.! !
!StoreFacadeTest methodsFor: 'tests' stamp: 'JPF 6/21/2021 11:00:19' prior: 50882774!
test07ShouldReturnADifferentTransactionIdPerCheckout

	| storeFacade cartId1 cartId2 transactionId1 transactionId2 clientId |
	
	clientId := testObjectsFactory clientId.
	
	storeFacade := testObjectsFactory createStoreFacade.

	cartId1 := storeFacade createCartFor: testObjectsFactory clientId withPassword: testObjectsFactory password.
	storeFacade add: 3 of: testObjectsFactory itemSellByTheStore to: cartId1.
	transactionId1 := storeFacade
		checkOutCart: cartId1
		payingWithCardNumber: testObjectsFactory validCreditCardNumber 
		of: testObjectsFactory validCreditCardName
		expiringOn: testObjectsFactory notExpiredCreditCardMonth for: clientId.
	
	cartId2 := storeFacade createCartFor: testObjectsFactory clientId withPassword: testObjectsFactory password.
	storeFacade add: 2 of: testObjectsFactory itemSellByTheStore to: cartId2.
	
	transactionId2 := storeFacade
		checkOutCart: cartId2
		payingWithCardNumber: testObjectsFactory validCreditCardNumber 
		of: testObjectsFactory validCreditCardName
		expiringOn: testObjectsFactory notExpiredCreditCardMonth for: clientId.
		
	self deny: transactionId1 = transactionId2.
	
	

! !
!StoreFacadeTest methodsFor: 'tests' stamp: 'JPF 6/21/2021 11:01:08' prior: 50882897!
test07ShouldReturnADifferentTransactionIdPerCheckout

	| storeFacade cartId1 cartId2 transactionId1 transactionId2 clientId |
	
	clientId := testObjectsFactory clientId.
	
	storeFacade := testObjectsFactory createStoreFacade.

	cartId1 := storeFacade createCartFor: clientId withPassword: testObjectsFactory password.
	storeFacade add: 3 of: testObjectsFactory itemSellByTheStore to: cartId1.
	transactionId1 := storeFacade
		checkOutCart: cartId1
		payingWithCardNumber: testObjectsFactory validCreditCardNumber 
		of: testObjectsFactory validCreditCardName
		expiringOn: testObjectsFactory notExpiredCreditCardMonth
		for: clientId.
	
	cartId2 := storeFacade createCartFor: clientId withPassword: testObjectsFactory password.
	storeFacade add: 2 of: testObjectsFactory itemSellByTheStore to: cartId2.
	
	transactionId2 := storeFacade
		checkOutCart: cartId2
		payingWithCardNumber: testObjectsFactory validCreditCardNumber 
		of: testObjectsFactory validCreditCardName
		expiringOn: testObjectsFactory notExpiredCreditCardMonth
		for: clientId.
		
	self deny: transactionId1 = transactionId2.
	
	

! !
!StoreFacadeTest methodsFor: 'tests' stamp: 'JPF 6/21/2021 11:02:17' prior: 50882812!
test08ShouldFailWhenTryToCheckoutTheSameCartTwice

	| storeFacade cartId clientId |
	
	clientId := testObjectsFactory clientId.
	storeFacade := testObjectsFactory createStoreFacade.

	cartId := storeFacade createCartFor: clientId withPassword: testObjectsFactory password.
	storeFacade add: 3 of: testObjectsFactory itemSellByTheStore to: cartId.
	storeFacade
		checkOutCart: cartId
		payingWithCardNumber: testObjectsFactory validCreditCardNumber 
		of: testObjectsFactory validCreditCardName
		expiringOn: testObjectsFactory notExpiredCreditCardMonth
		for: clientId.
		
	self
		should: [
		storeFacade
			checkOutCart: cartId
			payingWithCardNumber: testObjectsFactory validCreditCardNumber 
			of: testObjectsFactory validCreditCardName
			expiringOn: testObjectsFactory notExpiredCreditCardMonth
			for: clientId ]
		raise: Error - MessageNotUnderstood 
		withMessageText: StoreFacade inexistentCartErrorMessage
	
	
	

! !
!StoreFacadeTest methodsFor: 'tests' stamp: 'JPF 6/21/2021 11:02:42' prior: 50882712!
test11ShouldListClientPurchases

	| storeFacade cartId1  cartId2 purchasesByClient firstPurchase secondPurchase clientId |
	
	clientId := testObjectsFactory clientId.
	storeFacade := testObjectsFactory createStoreFacade.

	cartId1 := storeFacade createCartFor: testObjectsFactory clientId withPassword: testObjectsFactory password.
	storeFacade add: 3 of: testObjectsFactory itemSellByTheStore to: cartId1.
	storeFacade add: 1 of: testObjectsFactory itemSellByTheStore2 to: cartId1.
	storeFacade
		checkOutCart: cartId1
		payingWithCardNumber: testObjectsFactory validCreditCardNumber 
		of: testObjectsFactory validCreditCardName
		expiringOn: testObjectsFactory notExpiredCreditCardMonth for: clientId.
		
	cartId2 := storeFacade createCartFor: testObjectsFactory clientId withPassword: testObjectsFactory password.
	storeFacade add: 1 of: testObjectsFactory itemSellByTheStore to: cartId2.
	storeFacade add: 2 of: testObjectsFactory itemSellByTheStore2 to: cartId2.
	storeFacade
		checkOutCart: cartId2
		payingWithCardNumber: testObjectsFactory validCreditCardNumber 
		of: testObjectsFactory validCreditCardName
		expiringOn: testObjectsFactory notExpiredCreditCardMonth for: clientId.
		
	purchasesByClient := storeFacade
		listPurchasesOf: testObjectsFactory
		clientId withPassword: testObjectsFactory password.
		
	self assert: 2 equals: purchasesByClient size.
	
	firstPurchase := purchasesByClient first.
	secondPurchase := purchasesByClient second.
	
	self assert: 40 equals: firstPurchase total.
	self assert: 50 equals: secondPurchase total.
	
	self assert: 3 equals: (firstPurchase at: testObjectsFactory itemSellByTheStore).
	self assert: 1 equals: (firstPurchase at: testObjectsFactory itemSellByTheStore2).
	
	self assert: 1 equals: (secondPurchase at: testObjectsFactory itemSellByTheStore).
	self assert: 2 equals: (secondPurchase at: testObjectsFactory itemSellByTheStore2).
		
	! !
!StoreFacadeTest methodsFor: 'tests' stamp: 'JPF 6/21/2021 11:02:59' prior: 50883006!
test11ShouldListClientPurchases

	| storeFacade cartId1  cartId2 purchasesByClient firstPurchase secondPurchase clientId |
	
	clientId := testObjectsFactory clientId.
	storeFacade := testObjectsFactory createStoreFacade.

	cartId1 := storeFacade createCartFor: clientId withPassword: testObjectsFactory password.
	storeFacade add: 3 of: testObjectsFactory itemSellByTheStore to: cartId1.
	storeFacade add: 1 of: testObjectsFactory itemSellByTheStore2 to: cartId1.
	storeFacade
		checkOutCart: cartId1
		payingWithCardNumber: testObjectsFactory validCreditCardNumber 
		of: testObjectsFactory validCreditCardName
		expiringOn: testObjectsFactory notExpiredCreditCardMonth
		for: clientId.
		
	cartId2 := storeFacade createCartFor: clientId withPassword: testObjectsFactory password.
	storeFacade add: 1 of: testObjectsFactory itemSellByTheStore to: cartId2.
	storeFacade add: 2 of: testObjectsFactory itemSellByTheStore2 to: cartId2.
	storeFacade
		checkOutCart: cartId2
		payingWithCardNumber: testObjectsFactory validCreditCardNumber 
		of: testObjectsFactory validCreditCardName
		expiringOn: testObjectsFactory notExpiredCreditCardMonth for: clientId.
		
	purchasesByClient := storeFacade
		listPurchasesOf: testObjectsFactory
		clientId withPassword: testObjectsFactory password.
		
	self assert: 2 equals: purchasesByClient size.
	
	firstPurchase := purchasesByClient first.
	secondPurchase := purchasesByClient second.
	
	self assert: 40 equals: firstPurchase total.
	self assert: 50 equals: secondPurchase total.
	
	self assert: 3 equals: (firstPurchase at: testObjectsFactory itemSellByTheStore).
	self assert: 1 equals: (firstPurchase at: testObjectsFactory itemSellByTheStore2).
	
	self assert: 1 equals: (secondPurchase at: testObjectsFactory itemSellByTheStore).
	self assert: 2 equals: (secondPurchase at: testObjectsFactory itemSellByTheStore2).
		
	! !
!StoreFacadeTest methodsFor: 'tests' stamp: 'JPF 6/21/2021 11:03:04' prior: 50883069!
test11ShouldListClientPurchases

	| storeFacade cartId1  cartId2 purchasesByClient firstPurchase secondPurchase clientId |
	
	clientId := testObjectsFactory clientId.
	storeFacade := testObjectsFactory createStoreFacade.

	cartId1 := storeFacade createCartFor: clientId withPassword: testObjectsFactory password.
	storeFacade add: 3 of: testObjectsFactory itemSellByTheStore to: cartId1.
	storeFacade add: 1 of: testObjectsFactory itemSellByTheStore2 to: cartId1.
	storeFacade
		checkOutCart: cartId1
		payingWithCardNumber: testObjectsFactory validCreditCardNumber 
		of: testObjectsFactory validCreditCardName
		expiringOn: testObjectsFactory notExpiredCreditCardMonth
		for: clientId.
		
	cartId2 := storeFacade createCartFor: clientId withPassword: testObjectsFactory password.
	storeFacade add: 1 of: testObjectsFactory itemSellByTheStore to: cartId2.
	storeFacade add: 2 of: testObjectsFactory itemSellByTheStore2 to: cartId2.
	storeFacade
		checkOutCart: cartId2
		payingWithCardNumber: testObjectsFactory validCreditCardNumber 
		of: testObjectsFactory validCreditCardName
		expiringOn: testObjectsFactory notExpiredCreditCardMonth
		for: clientId.
		
	purchasesByClient := storeFacade
		listPurchasesOf: testObjectsFactory
		clientId withPassword: testObjectsFactory password.
		
	self assert: 2 equals: purchasesByClient size.
	
	firstPurchase := purchasesByClient first.
	secondPurchase := purchasesByClient second.
	
	self assert: 40 equals: firstPurchase total.
	self assert: 50 equals: secondPurchase total.
	
	self assert: 3 equals: (firstPurchase at: testObjectsFactory itemSellByTheStore).
	self assert: 1 equals: (firstPurchase at: testObjectsFactory itemSellByTheStore2).
	
	self assert: 1 equals: (secondPurchase at: testObjectsFactory itemSellByTheStore).
	self assert: 2 equals: (secondPurchase at: testObjectsFactory itemSellByTheStore2).
		
	! !
!Cashier class methodsFor: 'instance creation' stamp: 'JPF 6/21/2021 11:11:19'!
toCheckout: aCart charging: aCreditCard throught: aMerchantProcessor on: aDate registeringOn: aSalesBook generatingTransactionIdWith: aTransactionIdGenerator 
	
	self assertIsNotEmpty: aCart.
	self assertIsNotExpired: aCreditCard on: aDate.
	
	^self new initializeToCheckout: aCart charging: aCreditCard throught: aMerchantProcessor registeringOn: aSalesBook! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'JPF 6/21/2021 11:11:19' prior: 50882187!
test04CheckoutRegistersASale

	| cart cashier salesBook total |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	salesBook := OrderedCollection new.
 
	cashier:= Cashier 
		toCheckout: cart 
		charging: testObjectsFactory notExpiredCreditCard
		throught: testObjectsFactory createMerchantProcessor
		on: testObjectsFactory today
		registeringOn: salesBook generatingTransactionIdWith: testObjectFactory transactionIdGenerator.
		
	total := cashier checkOut.
					
	self assert: salesBook size = 1.
	self assert: salesBook first total = total.! !
!StoreFacade methodsFor: 'as yet unclassified' stamp: 'JPF 6/21/2021 11:11:19' prior: 50882870!
checkOutCart: aCartId payingWithCardNumber: aCreditCardNumber of: aName expiringOn: aMonth for: aClientId 

	| cart cashier aDateAndTime transactionId transactionsOfClient |
	
	aDateAndTime := DateAndTime now.

	cart := self findCart: aCartId.
	
	cashier := Cashier 
		toCheckout: cart 
		charging: (CreditCard 
			withNumber: aCreditCardNumber
			of: aName
			expiringOn: aMonth)
		throught: merchantProcessor
		on: aDateAndTime
		registeringOn: salesBook generatingTransactionIdWith: testObjectFactory transactionIdGenerator.
		
	transactionId := cashier checkOut.
	
	transactionsOfClient := transactionsByClient at: aClientId ifAbsent: [ OrderedCollection new ].
	transactionsOfClient add: transactionId.
	transactionsByClient at: aClientId put: transactionsOfClient.
		
	self removeCart: aCartId.
	
	^ transactionId.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'JPF 6/21/2021 11:11:19' prior: 50882148!
test02CalculatedTotalIsCorrect

	| cart cashier |
	
	cart := testObjectsFactory createCart.
	cart add: 2 of: testObjectsFactory itemSellByTheStore.
	
	cashier :=  Cashier
		toCheckout: cart 
		charging: testObjectsFactory notExpiredCreditCard 
		throught: testObjectsFactory createMerchantProcessor
		on: testObjectsFactory today 
		registeringOn: OrderedCollection new generatingTransactionIdWith: testObjectFactory transactionIdGenerator.
		
	self assert: cashier checkOut = (testObjectsFactory itemSellByTheStorePrice * 2)! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'JPF 6/21/2021 11:11:19' prior: 50882258!
test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit

	| cart cashier salesBook creditCard |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	salesBook := OrderedCollection new.
 	debitBehavior := [ :anAmount :aCreditCard | self error: Cashier creditCardHasNoCreditErrorMessage].
	
	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: testObjectsFactory createMerchantProcessor
		on: testObjectsFactory today
		registeringOn: salesBook generatingTransactionIdWith: testObjectFactory transactionIdGenerator.
		
	self 
		should: [cashier checkOut ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier creditCardHasNoCreditErrorMessage.
			self assert: salesBook isEmpty ]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'JPF 6/21/2021 11:11:19' prior: 50882125!
test01CanNotCheckoutAnEmptyCart

	| salesBook |
	
	salesBook := OrderedCollection new.
	self 
		should: [ Cashier 
			toCheckout: testObjectsFactory createCart 
			charging: testObjectsFactory notExpiredCreditCard 
			throught: testObjectsFactory createMerchantProcessor
			on: testObjectsFactory today
			registeringOn:  salesBook generatingTransactionIdWith: testObjectFactory transactionIdGenerator ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier cartCanNotBeEmptyErrorMessage.
			self assert: salesBook isEmpty ]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'JPF 6/21/2021 11:11:19' prior: 50882232!
test05CashierChargesCreditCardUsingMerchantProcessor

	| cart cashier salesBook total creditCard debitedAmout debitedCreditCard  |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	salesBook := OrderedCollection new.
	
	testObjectsFactory debitBehavior: [ :anAmount :aCreditCard | 
		debitedAmout := anAmount.
		debitedCreditCard := aCreditCard ].
	
 	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: testObjectsFactory createMerchantProcessor
		on: testObjectsFactory today
		registeringOn: salesBook generatingTransactionIdWith: testObjectFactory transactionIdGenerator.	
		
	total := cashier checkOut.
					
	self assert: debitedCreditCard = creditCard.
	self assert: debitedAmout = total.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'JPF 6/21/2021 11:11:19' prior: 50882165!
test03CanNotCheckoutWithAnExpiredCreditCart

	| cart salesBook |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	salesBook := OrderedCollection new.
	
	self
		should: [ Cashier 
				toCheckout: cart 
				charging: testObjectsFactory expiredCreditCard 
				throught: testObjectsFactory createMerchantProcessor
				on: testObjectsFactory today
				registeringOn: salesBook generatingTransactionIdWith: testObjectFactory transactionIdGenerator ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = Cashier canNotChargeAnExpiredCreditCardErrorMessage.
			self assert: salesBook isEmpty ]! !

!methodRemoval: Cashier class #toCheckout:charging:throught:on:registeringOn: stamp: 'JPF 6/21/2021 11:11:19'!
toCheckout: aCart charging: aCreditCard throught: aMerchantProcessor on: aDate registeringOn: aSalesBook
	
	self assertIsNotEmpty: aCart.
	self assertIsNotExpired: aCreditCard on: aDate.
	
	^self new initializeToCheckout: aCart charging: aCreditCard throught: aMerchantProcessor registeringOn: aSalesBook!
!CashierTest methodsFor: 'tests' stamp: 'JPF 6/21/2021 11:11:52' prior: 50883308!
test01CanNotCheckoutAnEmptyCart

	| salesBook |
	
	salesBook := OrderedCollection new.
	self 
		should: [ Cashier 
			toCheckout: testObjectsFactory createCart 
			charging: testObjectsFactory notExpiredCreditCard 
			throught: testObjectsFactory createMerchantProcessor
			on: testObjectsFactory today
			registeringOn:  salesBook generatingTransactionIdWith: testObjectsFactory transactionIdGenerator ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier cartCanNotBeEmptyErrorMessage.
			self assert: salesBook isEmpty ]! !
!CashierTest methodsFor: 'tests' stamp: 'JPF 6/21/2021 11:12:01' prior: 50883258!
test02CalculatedTotalIsCorrect

	| cart cashier |
	
	cart := testObjectsFactory createCart.
	cart add: 2 of: testObjectsFactory itemSellByTheStore.
	
	cashier :=  Cashier
		toCheckout: cart 
		charging: testObjectsFactory notExpiredCreditCard 
		throught: testObjectsFactory createMerchantProcessor
		on: testObjectsFactory today 
		registeringOn: OrderedCollection new generatingTransactionIdWith: testObjectsFactory transactionIdGenerator.
		
	self assert: cashier checkOut = (testObjectsFactory itemSellByTheStorePrice * 2)! !
!CashierTest methodsFor: 'tests' stamp: 'JPF 6/21/2021 11:12:10' prior: 50883359!
test03CanNotCheckoutWithAnExpiredCreditCart

	| cart salesBook |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	salesBook := OrderedCollection new.
	
	self
		should: [ Cashier 
				toCheckout: cart 
				charging: testObjectsFactory expiredCreditCard 
				throught: testObjectsFactory createMerchantProcessor
				on: testObjectsFactory today
				registeringOn: salesBook generatingTransactionIdWith: testObjectsFactory transactionIdGenerator ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = Cashier canNotChargeAnExpiredCreditCardErrorMessage.
			self assert: salesBook isEmpty ]! !
!CashierTest methodsFor: 'tests' stamp: 'JPF 6/21/2021 11:12:14' prior: 50883207!
test04CheckoutRegistersASale

	| cart cashier salesBook total |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	salesBook := OrderedCollection new.
 
	cashier:= Cashier 
		toCheckout: cart 
		charging: testObjectsFactory notExpiredCreditCard
		throught: testObjectsFactory createMerchantProcessor
		on: testObjectsFactory today
		registeringOn: salesBook generatingTransactionIdWith: testObjectsFactory transactionIdGenerator.
		
	total := cashier checkOut.
					
	self assert: salesBook size = 1.
	self assert: salesBook first total = total.! !
!CashierTest methodsFor: 'tests' stamp: 'JPF 6/21/2021 11:12:18' prior: 50883330!
test05CashierChargesCreditCardUsingMerchantProcessor

	| cart cashier salesBook total creditCard debitedAmout debitedCreditCard  |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	salesBook := OrderedCollection new.
	
	testObjectsFactory debitBehavior: [ :anAmount :aCreditCard | 
		debitedAmout := anAmount.
		debitedCreditCard := aCreditCard ].
	
 	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: testObjectsFactory createMerchantProcessor
		on: testObjectsFactory today
		registeringOn: salesBook generatingTransactionIdWith: testObjectsFactory transactionIdGenerator.	
		
	total := cashier checkOut.
					
	self assert: debitedCreditCard = creditCard.
	self assert: debitedAmout = total.! !
!CashierTest methodsFor: 'tests' stamp: 'JPF 6/21/2021 11:12:25' prior: 50883278!
test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit

	| cart cashier salesBook creditCard |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	salesBook := OrderedCollection new.
 	debitBehavior := [ :anAmount :aCreditCard | self error: Cashier creditCardHasNoCreditErrorMessage].
	
	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: testObjectsFactory createMerchantProcessor
		on: testObjectsFactory today
		registeringOn: salesBook generatingTransactionIdWith: testObjectsFactory transactionIdGenerator.
		
	self 
		should: [cashier checkOut ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier creditCardHasNoCreditErrorMessage.
			self assert: salesBook isEmpty ]! !

!classDefinition: #StoreFacade category: 'TusLibros' stamp: 'JPF 6/21/2021 11:13:56'!
Object subclass: #StoreFacade
	instanceVariableNames: 'clientValidator cartRepository cartIdSequence catalog transactionIdSequence merchantProcessor salesBook transactionsByClient transactionIdGenerator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreFacade methodsFor: 'actions' stamp: 'JPF 6/21/2021 11:13:54' prior: 50883229!
checkOutCart: aCartId payingWithCardNumber: aCreditCardNumber of: aName expiringOn: aMonth for: aClientId 

	| cart cashier aDateAndTime transactionId transactionsOfClient |
	
	aDateAndTime := DateAndTime now.

	cart := self findCart: aCartId.
	
	cashier := Cashier 
		toCheckout: cart 
		charging: (CreditCard 
			withNumber: aCreditCardNumber
			of: aName
			expiringOn: aMonth)
		throught: merchantProcessor
		on: aDateAndTime
		registeringOn: salesBook generatingTransactionIdWith: transactionIdGenerator.
		
	transactionId := cashier checkOut.
	
	transactionsOfClient := transactionsByClient at: aClientId ifAbsent: [ OrderedCollection new ].
	transactionsOfClient add: transactionId.
	transactionsByClient at: aClientId put: transactionsOfClient.
		
	self removeCart: aCartId.
	
	^ transactionId.! !
!StoreFacade methodsFor: 'actions' stamp: 'JPF 6/21/2021 11:15:59' prior: 50883555!
checkOutCart: aCartId payingWithCardNumber: aCreditCardNumber of: aName expiringOn: aMonth for: aClientId 

	| cart cashier aDateAndTime transactionId transactionsOfClient |
	
	aDateAndTime := DateAndTime now.

	cart := self findCart: aCartId.
	
	cashier := Cashier 
		toCheckout: cart 
		charging: (CreditCard 
			withNumber: aCreditCardNumber
			of: aName
			expiringOn: aMonth)
		throught: merchantProcessor
		on: aDateAndTime
		registeringOn: salesBook generatingTransactionIdWith: self.
		
	transactionId := cashier checkOut.
	
	transactionsOfClient := transactionsByClient at: aClientId ifAbsent: [ OrderedCollection new ].
	transactionsOfClient add: transactionId.
	transactionsByClient at: aClientId put: transactionsOfClient.
		
	self removeCart: aCartId.
	
	^ transactionId.! !
!StoreFacade methodsFor: 'actions' stamp: 'JPF 6/21/2021 11:16:04' prior: 50883583!
checkOutCart: aCartId payingWithCardNumber: aCreditCardNumber of: aName expiringOn: aMonth for: aClientId 

	| cart cashier aDateAndTime transactionId transactionsOfClient |
	
	aDateAndTime := DateAndTime now.

	cart := self findCart: aCartId.
	
	cashier := Cashier 
		toCheckout: cart 
		charging: (CreditCard 
			withNumber: aCreditCardNumber
			of: aName
			expiringOn: aMonth)
		throught: merchantProcessor
		on: aDateAndTime
		registeringOn: salesBook
		generatingTransactionIdWith: self.
		
	transactionId := cashier checkOut.
	
	transactionsOfClient := transactionsByClient at: aClientId ifAbsent: [ OrderedCollection new ].
	transactionsOfClient add: transactionId.
	transactionsByClient at: aClientId put: transactionsOfClient.
		
	self removeCart: aCartId.
	
	^ transactionId.! !
!Cashier methodsFor: 'checkout - private' stamp: 'JPF 6/21/2021 11:16:32' prior: 50882625!
registerSale

	| sale transactionId |
	
	sale := self createSale.
	transactionId := transactionIdGenerator nextTransactionId.

	salesBook at: transactionId put: sale.
	
	^ transactionId.! !
!StoreTestObjectsFactory methodsFor: 'transaction id generator protocol' stamp: 'JPF 6/21/2021 11:18:04'!
nextTransactionId

	! !

!classDefinition: #StoreTestObjectsFactory category: 'TusLibros' stamp: 'JPF 6/21/2021 11:18:51'!
Object subclass: #StoreTestObjectsFactory
	instanceVariableNames: 'today validateClientBehaviour debitBehavior transactionIdSequence'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreTestObjectsFactory methodsFor: 'transaction id generator protocol' stamp: 'JPF 6/21/2021 11:18:49' prior: 50883649!
nextTransactionId

	| transactionId |
	
	transactionId := transactionIdSequence.
	transactionIdSequence := transactionIdSequence + 1.
	
	^ transactionId

	! !
!StoreTestObjectsFactory methodsFor: 'initialization' stamp: 'JPF 6/21/2021 11:19:12' prior: 50882084 overrides: 16896425!
initialize

	today := DateAndTime now.
	validateClientBehaviour := [ :clientIdArg :passwordArg | ].
	debitBehavior := [ :anAmount :aCreditCard | ].
	transactionIdSequence := 1.! !
!StoreTestObjectsFactory methodsFor: 'transactionIdGenerator' stamp: 'JPF 6/21/2021 11:20:00'!
transactionIdGenerator

	^ self! !
!CashierTest methodsFor: 'tests' stamp: 'JPF 6/21/2021 11:20:31' prior: 50883419!
test02CalculatedTotalIsCorrect

	| cart cashier |
	
	cart := testObjectsFactory createCart.
	cart add: 2 of: testObjectsFactory itemSellByTheStore.
	
	cashier :=  Cashier
		toCheckout: cart 
		charging: testObjectsFactory notExpiredCreditCard 
		throught: testObjectsFactory createMerchantProcessor
		on: testObjectsFactory today 
		registeringOn: OrderedCollection new
		generatingTransactionIdWith: testObjectsFactory transactionIdGenerator.
		
	self assert: cashier checkOut = (testObjectsFactory itemSellByTheStorePrice * 2)! !
!CashierTest methodsFor: 'tests' stamp: 'JPF 6/21/2021 11:20:37' prior: 50883397!
test01CanNotCheckoutAnEmptyCart

	| salesBook |
	
	salesBook := OrderedCollection new.
	self 
		should: [ Cashier 
			toCheckout: testObjectsFactory createCart 
			charging: testObjectsFactory notExpiredCreditCard 
			throught: testObjectsFactory createMerchantProcessor
			on: testObjectsFactory today
			registeringOn:  salesBook
			generatingTransactionIdWith: testObjectsFactory transactionIdGenerator ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier cartCanNotBeEmptyErrorMessage.
			self assert: salesBook isEmpty ]! !
!CashierTest methodsFor: 'tests' stamp: 'JPF 6/21/2021 11:20:42' prior: 50883439!
test03CanNotCheckoutWithAnExpiredCreditCart

	| cart salesBook |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	salesBook := OrderedCollection new.
	
	self
		should: [ Cashier 
				toCheckout: cart 
				charging: testObjectsFactory expiredCreditCard 
				throught: testObjectsFactory createMerchantProcessor
				on: testObjectsFactory today
				registeringOn: salesBook
				generatingTransactionIdWith: testObjectsFactory transactionIdGenerator ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = Cashier canNotChargeAnExpiredCreditCardErrorMessage.
			self assert: salesBook isEmpty ]! !
!CashierTest methodsFor: 'tests' stamp: 'JPF 6/21/2021 11:20:47' prior: 50883464!
test04CheckoutRegistersASale

	| cart cashier salesBook total |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	salesBook := OrderedCollection new.
 
	cashier:= Cashier 
		toCheckout: cart 
		charging: testObjectsFactory notExpiredCreditCard
		throught: testObjectsFactory createMerchantProcessor
		on: testObjectsFactory today
		registeringOn: salesBook
		generatingTransactionIdWith: testObjectsFactory transactionIdGenerator.
		
	total := cashier checkOut.
					
	self assert: salesBook size = 1.
	self assert: salesBook first total = total.! !
!CashierTest methodsFor: 'tests' stamp: 'JPF 6/21/2021 11:20:53' prior: 50883485!
test05CashierChargesCreditCardUsingMerchantProcessor

	| cart cashier salesBook total creditCard debitedAmout debitedCreditCard  |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	salesBook := OrderedCollection new.
	
	testObjectsFactory debitBehavior: [ :anAmount :aCreditCard | 
		debitedAmout := anAmount.
		debitedCreditCard := aCreditCard ].
	
 	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: testObjectsFactory createMerchantProcessor
		on: testObjectsFactory today
		registeringOn: salesBook
		generatingTransactionIdWith: testObjectsFactory transactionIdGenerator.	
		
	total := cashier checkOut.
					
	self assert: debitedCreditCard = creditCard.
	self assert: debitedAmout = total.! !
!CashierTest methodsFor: 'tests' stamp: 'JPF 6/21/2021 11:21:03' prior: 50883514!
test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit

	| cart cashier salesBook creditCard |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	salesBook := OrderedCollection new.
 	debitBehavior := [ :anAmount :aCreditCard | self error: Cashier creditCardHasNoCreditErrorMessage].
	
	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: testObjectsFactory createMerchantProcessor
		on: testObjectsFactory today
		registeringOn: salesBook
		generatingTransactionIdWith: testObjectsFactory transactionIdGenerator.
		
	self 
		should: [cashier checkOut ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier creditCardHasNoCreditErrorMessage.
			self assert: salesBook isEmpty ]! !

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'JPF 6/21/2021 11:21:11'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'JPF 6/21/2021 11:21:13'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'JPF 6/21/2021 11:21:15'!
ERROR!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'JPF 6/21/2021 11:21:15'!
ERROR!
!Sale methodsFor: 'initialization' stamp: 'JPF 6/21/2021 11:23:15'!
initializeOf: itemsOfSale totalizing: aTotal

	total := aTotal.
	items := itemsOfSale.
	! !

!methodRemoval: Sale #initializeOfItems:totalizing: stamp: 'JPF 6/21/2021 11:23:15'!
initializeOfItems: itemsOfSale totalizing: aTotal

	total := aTotal.
	items := itemsOfSale.
	!
!StoreFacadeTest methodsFor: 'tests' stamp: 'JPF 6/21/2021 11:23:56' prior: 50883131!
test11ShouldListClientPurchases

	| storeFacade cartId1  cartId2 purchasesByClient firstPurchase secondPurchase clientId |
	
	clientId := testObjectsFactory clientId.
	storeFacade := testObjectsFactory createStoreFacade.

	cartId1 := storeFacade createCartFor: clientId withPassword: testObjectsFactory password.
	storeFacade add: 3 of: testObjectsFactory itemSellByTheStore to: cartId1.
	storeFacade add: 1 of: testObjectsFactory itemSellByTheStore2 to: cartId1.
	storeFacade
		checkOutCart: cartId1
		payingWithCardNumber: testObjectsFactory validCreditCardNumber 
		of: testObjectsFactory validCreditCardName
		expiringOn: testObjectsFactory notExpiredCreditCardMonth
		for: clientId.
		
	cartId2 := storeFacade createCartFor: clientId withPassword: testObjectsFactory password.
	storeFacade add: 1 of: testObjectsFactory itemSellByTheStore to: cartId2.
	storeFacade add: 2 of: testObjectsFactory itemSellByTheStore2 to: cartId2.
	storeFacade
		checkOutCart: cartId2
		payingWithCardNumber: testObjectsFactory validCreditCardNumber 
		of: testObjectsFactory validCreditCardName
		expiringOn: testObjectsFactory notExpiredCreditCardMonth
		for: clientId.
		
	purchasesByClient := storeFacade
		listPurchasesOf: testObjectsFactory
		clientId withPassword: testObjectsFactory password.
		
	self assert: 2 equals: purchasesByClient size.
	
	firstPurchase := purchasesByClient first.
	secondPurchase := purchasesByClient second.
	
	self assert: 40 equals: firstPurchase total.
	self assert: 50 equals: secondPurchase total.
	
	self assert: 3 equals: (firstPurchase items at: testObjectsFactory itemSellByTheStore).
	self assert: 1 equals: (firstPurchase items at: testObjectsFactory itemSellByTheStore2).
	
	self assert: 1 equals: (secondPurchase items at: testObjectsFactory itemSellByTheStore).
	self assert: 2 equals: (secondPurchase items at: testObjectsFactory itemSellByTheStore2).
		
	! !

!testRun: #StoreFacadeTest #test11ShouldListClientPurchases stamp: 'JPF 6/21/2021 11:24:00'!
ERROR!

!testRun: #StoreFacadeTest #test11ShouldListClientPurchases stamp: 'JPF 6/21/2021 11:24:00'!
ERROR!
!StoreTestObjectsFactory methodsFor: 'storeFacade' stamp: 'JPF 6/21/2021 11:25:59' prior: 50882048!
createStoreFacade
	
	^ StoreFacade validatingWith: self having: self defaultCatalog processingPaymentsWith: self.! !

!testRun: #StoreFacadeTest #test11ShouldListClientPurchases stamp: 'JPF 6/21/2021 11:26:25'!
ERROR!

!testRun: #StoreFacadeTest #test11ShouldListClientPurchases stamp: 'JPF 6/21/2021 11:26:25'!
ERROR!
!StoreFacade methodsFor: 'initialization' stamp: 'JPF 6/21/2021 11:27:25' prior: 50882026!
initializeValidatingWith: aClientValidator having: aCatalog

	| aMerchantProcessor |
	clientValidator := aClientValidator.
	catalog := aCatalog.
	cartRepository := Dictionary new.
	cartIdSequence := 1.
	transactionIdSequence :=1.
	merchantProcessor := aMerchantProcessor.
	salesBook := OrderedCollection new.! !
!StoreFacade methodsFor: 'initialization' stamp: 'JPF 6/21/2021 11:28:45' prior: 50883940!
initializeValidatingWith: aClientValidator having: aCatalog

	clientValidator := aClientValidator.
	catalog := aCatalog.
	cartRepository := Dictionary new.
	cartIdSequence := 1.
	transactionIdSequence :=1.
	salesBook := OrderedCollection new.! !
!StoreFacade methodsFor: 'initialization' stamp: 'JPF 6/21/2021 11:29:15'!
initializeValidatingWith: aClientValidator having: aCatalog processingPaymentsWith: aMerchantProcessor 

	clientValidator := aClientValidator.
	catalog := aCatalog.
	cartRepository := Dictionary new.
	cartIdSequence := 1.
	transactionIdSequence :=1.
	salesBook := OrderedCollection new.! !
!StoreFacade class methodsFor: 'as yet unclassified' stamp: 'JPF 6/21/2021 11:29:15' prior: 50882039!
validatingWith: aClientValidator having: aCatalog processingPaymentsWith: aMerchantProcessor   
	
	^self new initializeValidatingWith: aClientValidator having: aCatalog processingPaymentsWith: aMerchantProcessor ! !

!methodRemoval: StoreFacade #initializeValidatingWith:having: stamp: 'JPF 6/21/2021 11:29:15'!
initializeValidatingWith: aClientValidator having: aCatalog

	clientValidator := aClientValidator.
	catalog := aCatalog.
	cartRepository := Dictionary new.
	cartIdSequence := 1.
	transactionIdSequence :=1.
	salesBook := OrderedCollection new.!
!StoreFacade methodsFor: 'initialization' stamp: 'JPF 6/21/2021 11:29:29' prior: 50883964!
initializeValidatingWith: aClientValidator having: aCatalog processingPaymentsWith: aMerchantProcessor 

	clientValidator := aClientValidator.
	catalog := aCatalog.
	cartRepository := Dictionary new.
	cartIdSequence := 1.
	transactionIdSequence :=1.
	salesBook := OrderedCollection new.
	merchantProcessor := aMerchantProcessor.! !

!testRun: #StoreFacadeTest #test11ShouldListClientPurchases stamp: 'JPF 6/21/2021 11:29:37'!
ERROR!

!testRun: #StoreFacadeTest #test11ShouldListClientPurchases stamp: 'JPF 6/21/2021 11:29:37'!
ERROR!
!Cashier methodsFor: 'initialization' stamp: 'JPF 6/21/2021 11:31:57'!
initializeToCheckout: aCart charging: aCreditCard throught: aMerchantProcessor registeringOn: aSalesBook generatingTransactionIdWith: aTransactionIdGenerator 
	
	cart := aCart.
	creditCard := aCreditCard.
	merchantProcessor := aMerchantProcessor.
	salesBook := aSalesBook! !
!Cashier class methodsFor: 'as yet unclassified' stamp: 'JPF 6/21/2021 11:31:57' prior: 50883192!
toCheckout: aCart charging: aCreditCard throught: aMerchantProcessor on: aDate registeringOn: aSalesBook generatingTransactionIdWith: aTransactionIdGenerator 
	
	self assertIsNotEmpty: aCart.
	self assertIsNotExpired: aCreditCard on: aDate.
	
	^self new initializeToCheckout: aCart charging: aCreditCard throught: aMerchantProcessor registeringOn: aSalesBook generatingTransactionIdWith: aTransactionIdGenerator! !

!methodRemoval: Cashier #initializeToCheckout:charging:throught:registeringOn: stamp: 'JPF 6/21/2021 11:31:57'!
initializeToCheckout: aCart charging: aCreditCard throught: aMerchantProcessor registeringOn: aSalesBook
	
	cart := aCart.
	creditCard := aCreditCard.
	merchantProcessor := aMerchantProcessor.
	salesBook := aSalesBook!

!testRun: #StoreFacadeTest #test11ShouldListClientPurchases stamp: 'JPF 6/21/2021 11:32:13'!
ERROR!

!testRun: #StoreFacadeTest #test11ShouldListClientPurchases stamp: 'JPF 6/21/2021 11:32:13'!
ERROR!
!Cashier methodsFor: 'initialization' stamp: 'JPF 6/21/2021 11:32:39' prior: 50884017!
initializeToCheckout: aCart charging: aCreditCard throught: aMerchantProcessor registeringOn: aSalesBook generatingTransactionIdWith: aTransactionIdGenerator 
	
	cart := aCart.
	creditCard := aCreditCard.
	merchantProcessor := aMerchantProcessor.
	salesBook := aSalesBook.
	transactionIdGenerator := aTransactionIdGenerator.! !

!testRun: #StoreFacadeTest #test11ShouldListClientPurchases stamp: 'JPF 6/21/2021 11:32:45'!
ERROR!

!testRun: #StoreFacadeTest #test11ShouldListClientPurchases stamp: 'JPF 6/21/2021 11:32:45'!
ERROR!
!StoreFacade methodsFor: 'initialization' stamp: 'JPF 6/21/2021 11:37:10' prior: 50883998!
initializeValidatingWith: aClientValidator having: aCatalog processingPaymentsWith: aMerchantProcessor 

	clientValidator := aClientValidator.
	catalog := aCatalog.
	cartRepository := Dictionary new.
	cartIdSequence := 1.
	transactionIdSequence :=1.
	salesBook := OrderedDictionary new.
	merchantProcessor := aMerchantProcessor.! !

!testRun: #StoreFacadeTest #test11ShouldListClientPurchases stamp: 'JPF 6/21/2021 11:37:16'!
ERROR!

!testRun: #StoreFacadeTest #test11ShouldListClientPurchases stamp: 'JPF 6/21/2021 11:37:16'!
ERROR!
!StoreFacade methodsFor: 'initialization' stamp: 'JPF 6/21/2021 11:38:08' prior: 50884082!
initializeValidatingWith: aClientValidator having: aCatalog processingPaymentsWith: aMerchantProcessor 

	clientValidator := aClientValidator.
	catalog := aCatalog.
	cartRepository := Dictionary new.
	cartIdSequence := 1.
	transactionIdSequence :=1.
	salesBook := OrderedDictionary new.
	transactionsByClient := Dictionary new.
	merchantProcessor := aMerchantProcessor.! !

!testRun: #StoreFacadeTest #test11ShouldListClientPurchases stamp: 'JPF 6/21/2021 11:38:18'!
FAILURE!

!testRun: #StoreFacadeTest #test11ShouldListClientPurchases stamp: 'JPF 6/21/2021 11:38:18'!
FAILURE!
!StoreFacadeTest methodsFor: 'tests' stamp: 'JPF 6/21/2021 12:02:06' prior: 50883858!
test11ShouldListClientPurchases

	| storeFacade cartId1  cartId2 purchasesDetailOfClient firstPurchase secondPurchase clientId |
	
	clientId := testObjectsFactory clientId.
	storeFacade := testObjectsFactory createStoreFacade.

	cartId1 := storeFacade createCartFor: clientId withPassword: testObjectsFactory password.
	storeFacade add: 3 of: testObjectsFactory itemSellByTheStore to: cartId1.
	storeFacade add: 1 of: testObjectsFactory itemSellByTheStore2 to: cartId1.
	storeFacade
		checkOutCart: cartId1
		payingWithCardNumber: testObjectsFactory validCreditCardNumber 
		of: testObjectsFactory validCreditCardName
		expiringOn: testObjectsFactory notExpiredCreditCardMonth
		for: clientId.
		
	cartId2 := storeFacade createCartFor: clientId withPassword: testObjectsFactory password.
	storeFacade add: 1 of: testObjectsFactory itemSellByTheStore to: cartId2.
	storeFacade add: 2 of: testObjectsFactory itemSellByTheStore2 to: cartId2.
	storeFacade
		checkOutCart: cartId2
		payingWithCardNumber: testObjectsFactory validCreditCardNumber 
		of: testObjectsFactory validCreditCardName
		expiringOn: testObjectsFactory notExpiredCreditCardMonth
		for: clientId.
		
	purchasesDetailOfClient := storeFacade
		listPurchasesOf: testObjectsFactory
		clientId withPassword: testObjectsFactory password.
		
	self assert: 2 equals: purchasesDetailOfClient size.
	
	firstPurchase := purchasesDetailOfClient first.
	secondPurchase := purchasesDetailOfClient second.
	
	self assert: 40 equals: firstPurchase total.
	self assert: 50 equals: secondPurchase total.
	
	self assert: 3 equals: (firstPurchase items at: testObjectsFactory itemSellByTheStore).
	self assert: 1 equals: (firstPurchase items at: testObjectsFactory itemSellByTheStore2).
	
	self assert: 1 equals: (secondPurchase items at: testObjectsFactory itemSellByTheStore).
	self assert: 2 equals: (secondPurchase items at: testObjectsFactory itemSellByTheStore2).
		
	! !
!StoreFacadeTest methodsFor: 'tests' stamp: 'JPF 6/21/2021 12:03:40' prior: 50884123!
test11ShouldListClientPurchases

	| storeFacade cartId1  cartId2 purchasesDetailOfClient clientId |
	
	clientId := testObjectsFactory clientId.
	storeFacade := testObjectsFactory createStoreFacade.

	cartId1 := storeFacade createCartFor: clientId withPassword: testObjectsFactory password.
	storeFacade add: 3 of: testObjectsFactory itemSellByTheStore to: cartId1.
	storeFacade add: 1 of: testObjectsFactory itemSellByTheStore2 to: cartId1.
	storeFacade
		checkOutCart: cartId1
		payingWithCardNumber: testObjectsFactory validCreditCardNumber 
		of: testObjectsFactory validCreditCardName
		expiringOn: testObjectsFactory notExpiredCreditCardMonth
		for: clientId.
		
	cartId2 := storeFacade createCartFor: clientId withPassword: testObjectsFactory password.
	storeFacade add: 1 of: testObjectsFactory itemSellByTheStore to: cartId2.
	storeFacade add: 2 of: testObjectsFactory itemSellByTheStore2 to: cartId2.
	storeFacade
		checkOutCart: cartId2
		payingWithCardNumber: testObjectsFactory validCreditCardNumber 
		of: testObjectsFactory validCreditCardName
		expiringOn: testObjectsFactory notExpiredCreditCardMonth
		for: clientId.
		
	purchasesDetailOfClient := storeFacade
		listPurchasesOf: testObjectsFactory
		clientId withPassword: testObjectsFactory password.
		
	self assert: 90 equals: purchasesDetailOfClient total.
	self assert: 2 equals: purchasesDetailOfClient items size.
	
	self assert: 4 equals: (purchasesDetailOfClient items at: testObjectsFactory itemSellByTheStore).
	self assert: 3 equals: (purchasesDetailOfClient items at: testObjectsFactory itemSellByTheStore2).

		
	! !
!StoreFacade methodsFor: 'actions' stamp: 'JPF 6/21/2021 12:06:01' prior: 50881489!
listPurchasesOf: aClientId withPassword: aPassword

	| transactionsOfClient |
	clientValidator validateClient: aClientId withPassword: aPassword.
	
	transactionsOfClient := transactionsByClient at: aClientId ifAbsent: [ OrderedCollection new ]
	
	^ OrderedCollection new.! !
!StoreFacade methodsFor: 'actions' stamp: 'JPF 6/21/2021 12:11:35' prior: 50884239!
listPurchasesOf: aClientId withPassword: aPassword

	| transactionsOfClient total items |
	
	clientValidator validateClient: aClientId withPassword: aPassword.
	
	transactionsOfClient := transactionsByClient at: aClientId ifAbsent: [ OrderedCollection new ].
	
	total := 0.
	items := OrderedDictionary new.
	
	transactionsOfClient do: [ :transactionId || sale |
		sale := salesBook at: transactionId.
		sale items do: [ :saleItem |]
		].
	
	^ OrderedCollection new.! !
!StoreFacade methodsFor: 'actions' stamp: 'JPF 6/21/2021 12:11:56' prior: 50884251!
listPurchasesOf: aClientId withPassword: aPassword

	| transactionsOfClient total purchasesDetailTotal |
	
	clientValidator validateClient: aClientId withPassword: aPassword.
	
	transactionsOfClient := transactionsByClient at: aClientId ifAbsent: [ OrderedCollection new ].
	
	total := 0.
	purchasesDetailTotal := OrderedDictionary new.
	
	transactionsOfClient do: [ :transactionId || sale |
		sale := salesBook at: transactionId.
		sale items do: [ :saleItem |]
		].
	
	^ OrderedCollection new.! !
!StoreFacade methodsFor: 'actions' stamp: 'JPF 6/21/2021 12:12:07' prior: 50884269!
listPurchasesOf: aClientId withPassword: aPassword

	| transactionsOfClient total purchasesDetailItems |
	
	clientValidator validateClient: aClientId withPassword: aPassword.
	
	transactionsOfClient := transactionsByClient at: aClientId ifAbsent: [ OrderedCollection new ].
	
	total := 0.
	purchasesDetailItems := OrderedDictionary new.
	
	transactionsOfClient do: [ :transactionId || sale |
		sale := salesBook at: transactionId.
		sale items do: [ :saleItem |]
		].
	
	^ OrderedCollection new.! !
!StoreFacade methodsFor: 'actions' stamp: 'JPF 6/21/2021 12:12:25' prior: 50884288!
listPurchasesOf: aClientId withPassword: aPassword

	| transactionsOfClient purchasesDetailTotal purchasesDetailItems |
	
	clientValidator validateClient: aClientId withPassword: aPassword.
	
	transactionsOfClient := transactionsByClient at: aClientId ifAbsent: [ OrderedCollection new ].
	
	purchasesDetailTotal := 0.
	purchasesDetailItems := OrderedDictionary new.
	
	transactionsOfClient do: [ :transactionId || sale |
		sale := salesBook at: transactionId.
		sale items do: [ :saleItem |]
		].
	
	^ OrderedCollection new.! !

!classDefinition: #PurchasesDetail category: 'TusLibros' stamp: 'JPF 6/21/2021 12:18:50'!
Object subclass: #PurchasesDetail
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreFacade methodsFor: 'actions' stamp: 'JPF 6/21/2021 12:18:45' prior: 50884307!
listPurchasesOf: aClientId withPassword: aPassword

	| transactionsOfClient purchasesDetailTotal purchasesDetailItems |
	
	clientValidator validateClient: aClientId withPassword: aPassword.
	
	transactionsOfClient := transactionsByClient at: aClientId ifAbsent: [ OrderedCollection new ].
	
	purchasesDetailTotal := 0.
	purchasesDetailItems := OrderedDictionary new.
	
	transactionsOfClient do: [ :transactionId || sale |
		sale := salesBook at: transactionId.
		sale items do: [ :saleItem || purchasesDetailItemQuantity |
			purchasesDetailItemQuantity := purchasesDetailItems at: saleItem key ifAbsent: [ 0 ].
			purchasesDetailItems at: saleItem key put: purchasesDetailItemQuantity + saleItem value
			].
		purchasesDetailTotal := purchasesDetailTotal + sale total.
		].
	
	^ PurchasesDetail with: purchasesDetailItems totalizing: purchasesDetailTotal! !

!testRun: #StoreFacadeTest #test11ShouldListClientPurchases stamp: 'JPF 6/21/2021 12:20:17'!
ERROR!

!testRun: #StoreFacadeTest #test11ShouldListClientPurchases stamp: 'JPF 6/21/2021 12:20:17'!
ERROR!

----SNAPSHOT----(21 June 2021 12:20:24) CaraInternaInterfaz.image priorSource: 17556929!

!testRun: #StoreFacadeTest #test11ShouldListClientPurchases stamp: 'JPF 6/21/2021 12:20:37'!
ERROR!

!testRun: #StoreFacadeTest #test11ShouldListClientPurchases stamp: 'JPF 6/21/2021 12:20:37'!
ERROR!
!Sale methodsFor: 'accessing' stamp: 'JPF 6/21/2021 12:21:40'!
items
	self shouldBeImplemented.
	^items! !
!Sale methodsFor: 'accessing' stamp: 'JPF 6/21/2021 12:21:50' prior: 50884379!
items
	
	^ items! !

!testRun: #StoreFacadeTest #test11ShouldListClientPurchases stamp: 'JPF 6/21/2021 12:21:59'!
ERROR!
!StoreFacade methodsFor: 'actions' stamp: 'JPF 6/21/2021 12:24:32' prior: 50884334!
listPurchasesOf: aClientId withPassword: aPassword

	| transactionsOfClient purchasesDetailTotal purchasesDetailItems |
	
	clientValidator validateClient: aClientId withPassword: aPassword.
	
	transactionsOfClient := transactionsByClient at: aClientId ifAbsent: [ OrderedCollection new ].
	
	purchasesDetailTotal := 0.
	purchasesDetailItems := OrderedDictionary new.
	
	transactionsOfClient do: [ :transactionId || sale |
		sale := salesBook at: transactionId.
		sale items associationsDo: [ :saleItem || purchasesDetailItemQuantity |
			purchasesDetailItemQuantity := purchasesDetailItems at: saleItem key ifAbsent: [ 0 ].
			purchasesDetailItems at: saleItem key put: purchasesDetailItemQuantity + saleItem value
			].
		purchasesDetailTotal := purchasesDetailTotal + sale total.
		].
	
	^ PurchasesDetail with: purchasesDetailItems totalizing: purchasesDetailTotal! !

!testRun: #StoreFacadeTest #test11ShouldListClientPurchases stamp: 'JPF 6/21/2021 12:24:38'!
ERROR!
!PurchasesDetail class methodsFor: 'instance creation' stamp: 'JPF 6/21/2021 12:24:53'!
with: anOrderedDictionary totalizing: aSmallInteger 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWith: anOrderedDictionary totalizing: aSmallInteger ! !
!PurchasesDetail class methodsFor: 'instance creation' stamp: 'JPF 6/21/2021 12:25:33' prior: 50884424!
with: items totalizing: aTotal
	
	^self new initializeWith: items totalizing: aTotal.! !

!testRun: #StoreFacadeTest #test11ShouldListClientPurchases stamp: 'JPF 6/21/2021 12:25:35'!
ERROR!

!classDefinition: #PurchasesDetail category: 'TusLibros' stamp: 'JPF 6/21/2021 12:25:47'!
Object subclass: #PurchasesDetail
	instanceVariableNames: 'items_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #PurchasesDetail category: 'TusLibros' stamp: 'JPF 6/21/2021 12:25:47'!
Object subclass: #PurchasesDetail
	instanceVariableNames: 'items_CHANGE_ME total'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!PurchasesDetail methodsFor: 'initialization' stamp: 'JPF 6/21/2021 12:25:47'!
initializeWith: items totalizing: aTotal 
	self shouldBeImplemented.
	items_CHANGE_ME := items.
	total := aTotal.! !
!PurchasesDetail methodsFor: 'initialization' stamp: 'JPF 6/21/2021 12:26:28' prior: 50884459!
initializeWith: items totalizing: aTotal 

	items_CHANGE_ME := items.
	total := aTotal.! !
!PurchasesDetail methodsFor: 'initialization' stamp: 'JPF 6/21/2021 12:26:44' prior: 50884466!
initializeWith: quantityByItem totalizing: aTotal 

	items_CHANGE_ME := quantityByItem.
	total := aTotal.! !

!classDefinition: #PurchasesDetail category: 'TusLibros' stamp: 'JPF 6/21/2021 12:26:52'!
Object subclass: #PurchasesDetail
	instanceVariableNames: 'item total'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!PurchasesDetail methodsFor: 'as yet unclassified' stamp: 'JPF 6/21/2021 12:26:52' prior: 50884472!
initializeWith: quantityByItem totalizing: aTotal 

	item := quantityByItem.
	total := aTotal.! !

!classDefinition: #PurchasesDetail category: 'TusLibros' stamp: 'JPF 6/21/2021 12:27:13'!
Object subclass: #PurchasesDetail
	instanceVariableNames: 'items total'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!PurchasesDetail methodsFor: 'as yet unclassified' stamp: 'JPF 6/21/2021 12:27:13' prior: 50884486!
initializeWith: quantityByItem totalizing: aTotal 

	items := quantityByItem.
	total := aTotal.! !

!testRun: #StoreFacadeTest #test11ShouldListClientPurchases stamp: 'JPF 6/21/2021 12:27:17'!
ERROR!
!PurchasesDetail methodsFor: 'accessing' stamp: 'JPF 6/21/2021 12:27:31'!
total
	self shouldBeImplemented.
	^total! !
!PurchasesDetail methodsFor: 'accessing' stamp: 'JPF 6/21/2021 12:27:38' prior: 50884509!
total
	
	^total! !

!testRun: #StoreFacadeTest #test11ShouldListClientPurchases stamp: 'JPF 6/21/2021 12:27:50'!
FAILURE!

purchasesDetailOfClient items!
!PurchasesDetail methodsFor: 'accessing' stamp: 'JPF 6/21/2021 12:28:27'!
items
	self shouldBeImplemented.
	^items! !
!PurchasesDetail methodsFor: 'accessing' stamp: 'JPF 6/21/2021 12:28:35' prior: 50884522!
items
	
	^items! !

purchasesDetailOfClient items!
!StoreFacadeTest methodsFor: 'tests' stamp: 'JPF 6/21/2021 12:30:04' prior: 50884186!
test11ShouldListClientPurchases

	| storeFacade cartId1  cartId2 purchasesDetailOfClient clientId |
	
	clientId := testObjectsFactory clientId.
	storeFacade := testObjectsFactory createStoreFacade.

	cartId1 := storeFacade createCartFor: clientId withPassword: testObjectsFactory password.
	storeFacade add: 3 of: testObjectsFactory itemSellByTheStore to: cartId1.
	storeFacade add: 1 of: testObjectsFactory itemSellByTheStore2 to: cartId1.
	storeFacade
		checkOutCart: cartId1
		payingWithCardNumber: testObjectsFactory validCreditCardNumber 
		of: testObjectsFactory validCreditCardName
		expiringOn: testObjectsFactory notExpiredCreditCardMonth
		for: clientId.
		
	cartId2 := storeFacade createCartFor: clientId withPassword: testObjectsFactory password.
	storeFacade add: 1 of: testObjectsFactory itemSellByTheStore to: cartId2.
	storeFacade add: 2 of: testObjectsFactory itemSellByTheStore2 to: cartId2.
	storeFacade
		checkOutCart: cartId2
		payingWithCardNumber: testObjectsFactory validCreditCardNumber 
		of: testObjectsFactory validCreditCardName
		expiringOn: testObjectsFactory notExpiredCreditCardMonth
		for: clientId.
		
	purchasesDetailOfClient := storeFacade
		listPurchasesOf: testObjectsFactory
		clientId withPassword: testObjectsFactory password.
		
	self assert: 100 equals: purchasesDetailOfClient total.
	self assert: 2 equals: purchasesDetailOfClient items size.
	
	self assert: 4 equals: (purchasesDetailOfClient items at: testObjectsFactory itemSellByTheStore).
	self assert: 3 equals: (purchasesDetailOfClient items at: testObjectsFactory itemSellByTheStore2).

		
	! !

!testRun: #StoreFacadeTest #test11ShouldListClientPurchases stamp: 'JPF 6/21/2021 12:30:09'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'JPF 6/21/2021 12:30:30'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'JPF 6/21/2021 12:30:30'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'JPF 6/21/2021 12:30:30'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'JPF 6/21/2021 12:30:30'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'JPF 6/21/2021 12:30:30'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'JPF 6/21/2021 12:30:30'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'JPF 6/21/2021 12:30:30'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'JPF 6/21/2021 12:30:30'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'JPF 6/21/2021 12:30:30'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'JPF 6/21/2021 12:30:30'!
ERROR!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'JPF 6/21/2021 12:30:30'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'JPF 6/21/2021 12:30:30'!
ERROR!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'JPF 6/21/2021 12:30:30'!
ERROR!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'JPF 6/21/2021 12:30:30'!
FAILURE!

!testRun: #CreditCardTest #test01ShouldFailWhenTheNameIsEmpty stamp: 'JPF 6/21/2021 12:30:30'!
PASSED!

!testRun: #CreditCardTest #test02ShouldFailWhenTheNameIsAllWithespaceCharacters stamp: 'JPF 6/21/2021 12:30:30'!
PASSED!

!testRun: #CreditCardTest #test03ShouldFailWhenTheNameHasMoreThan30Characters stamp: 'JPF 6/21/2021 12:30:30'!
PASSED!

!testRun: #CreditCardTest #test04ShouldFailWhenTheNumberHasNot16Digits stamp: 'JPF 6/21/2021 12:30:30'!
PASSED!

!testRun: #StoreFacadeTest #test01ShouldFailToCreateCartWhenClientIdOrPasswordAreIncorrect stamp: 'JPF 6/21/2021 12:30:30'!
PASSED!

!testRun: #StoreFacadeTest #test02ShouldCreateACartAndBeEmptyWhenListed stamp: 'JPF 6/21/2021 12:30:30'!
PASSED!

!testRun: #StoreFacadeTest #test03ShouldAddAnItemToTheCart stamp: 'JPF 6/21/2021 12:30:30'!
FAILURE!

!testRun: #StoreFacadeTest #test04ShouldFailWhenTryToAddItemsToAnInexistentCart stamp: 'JPF 6/21/2021 12:30:30'!
PASSED!

!testRun: #StoreFacadeTest #test05ShouldFailWhenTryToListAnInexistentCart stamp: 'JPF 6/21/2021 12:30:30'!
PASSED!

!testRun: #StoreFacadeTest #test06ShouldAddAnItemToTheCorrectCart stamp: 'JPF 6/21/2021 12:30:30'!
FAILURE!

!testRun: #StoreFacadeTest #test07ShouldReturnADifferentTransactionIdPerCheckout stamp: 'JPF 6/21/2021 12:30:30'!
PASSED!

!testRun: #StoreFacadeTest #test08ShouldFailWhenTryToCheckoutTheSameCartTwice stamp: 'JPF 6/21/2021 12:30:30'!
PASSED!

!testRun: #StoreFacadeTest #test09ShouldFailWhenListPurchasesForAnIncorrectClientIdOrPassword stamp: 'JPF 6/21/2021 12:30:30'!
PASSED!

!testRun: #StoreFacadeTest #test10ShouldReturnEmptyListOfPurchasesWhenClientDidNotMakeAnyPurchase stamp: 'JPF 6/21/2021 12:30:30'!
ERROR!

!testRun: #StoreFacadeTest #test11ShouldListClientPurchases stamp: 'JPF 6/21/2021 12:30:30'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'JPF 6/21/2021 12:32:01' prior: 50883686!
test02CalculatedTotalIsCorrect

	| cart cashier salesBook |
	
	cart := testObjectsFactory createCart.
	cart add: 2 of: testObjectsFactory itemSellByTheStore.
	salesBook := OrderedDictionary new.
	
	cashier :=  Cashier
		toCheckout: cart 
		charging: testObjectsFactory notExpiredCreditCard 
		throught: testObjectsFactory createMerchantProcessor
		on: testObjectsFactory today 
		registeringOn: OrderedCollection new
		generatingTransactionIdWith: testObjectsFactory transactionIdGenerator.
		
	
		
	self assert: cashier checkOut = (testObjectsFactory itemSellByTheStorePrice * 2)! !
!CashierTest methodsFor: 'tests' stamp: 'JPF 6/21/2021 12:32:24' prior: 50884689!
test02CalculatedTotalIsCorrect

	| cart cashier salesBook |
	
	cart := testObjectsFactory createCart.
	cart add: 2 of: testObjectsFactory itemSellByTheStore.
	salesBook := OrderedDictionary new.
	
	cashier :=  Cashier
		toCheckout: cart 
		charging: testObjectsFactory notExpiredCreditCard 
		throught: testObjectsFactory createMerchantProcessor
		on: testObjectsFactory today 
		registeringOn: salesBook
		generatingTransactionIdWith: testObjectsFactory transactionIdGenerator.
		
	
		
	self assert: cashier checkOut = (testObjectsFactory itemSellByTheStorePrice * 2)! !
!CashierTest methodsFor: 'tests' stamp: 'JPF 6/21/2021 12:33:17' prior: 50884710!
test02CalculatedTotalIsCorrect

	| cart cashier salesBook transactionId |
	
	cart := testObjectsFactory createCart.
	cart add: 2 of: testObjectsFactory itemSellByTheStore.
	salesBook := OrderedDictionary new.
	
	cashier :=  Cashier
		toCheckout: cart 
		charging: testObjectsFactory notExpiredCreditCard 
		throught: testObjectsFactory createMerchantProcessor
		on: testObjectsFactory today 
		registeringOn: salesBook
		generatingTransactionIdWith: testObjectsFactory transactionIdGenerator.
		
	transactionId := cashier checkOut.
		
	self assert: (salesBook at: transactionId) total = (testObjectsFactory itemSellByTheStorePrice * 2)! !

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'JPF 6/21/2021 12:33:32'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'JPF 6/21/2021 12:33:50'!
ERROR!
!CashierTest methodsFor: 'tests' stamp: 'JPF 6/21/2021 12:34:17' prior: 50883753!
test04CheckoutRegistersASale

	| cart cashier salesBook total |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	salesBook := OrderedDictionary new.
 
	cashier:= Cashier 
		toCheckout: cart 
		charging: testObjectsFactory notExpiredCreditCard
		throught: testObjectsFactory createMerchantProcessor
		on: testObjectsFactory today
		registeringOn: salesBook
		generatingTransactionIdWith: testObjectsFactory transactionIdGenerator.
		
	total := cashier checkOut.
					
	self assert: salesBook size = 1.
	self assert: salesBook first total = total.! !

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'JPF 6/21/2021 12:34:24'!
ERROR!
!CashierTest methodsFor: 'tests' stamp: 'JPF 6/21/2021 12:36:36' prior: 50884760!
test04CheckoutRegistersASale

	| cart cashier salesBook total |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	salesBook := OrderedDictionary new.
 
	cashier:= Cashier 
		toCheckout: cart 
		charging: testObjectsFactory notExpiredCreditCard
		throught: testObjectsFactory createMerchantProcessor
		on: testObjectsFactory today
		registeringOn: salesBook
		generatingTransactionIdWith: testObjectsFactory transactionIdGenerator.

	self assert: salesBook size = 1.! !
!CashierTest methodsFor: 'tests' stamp: 'JPF 6/21/2021 12:37:10' prior: 50884784!
test04CheckoutRegistersASale

	| cart cashier salesBook |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	salesBook := OrderedDictionary new.
 
	cashier := Cashier 
		toCheckout: cart 
		charging: testObjectsFactory notExpiredCreditCard
		throught: testObjectsFactory createMerchantProcessor
		on: testObjectsFactory today
		registeringOn: salesBook
		generatingTransactionIdWith: testObjectsFactory transactionIdGenerator.
		
	cashier checkOut.

	self assert: salesBook size = 1.! !

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'JPF 6/21/2021 12:37:18'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'JPF 6/21/2021 12:37:20'!
ERROR!
!CashierTest methodsFor: 'tests' stamp: 'JPF 6/21/2021 12:38:45' prior: 50883775!
test05CashierChargesCreditCardUsingMerchantProcessor

	| cart cashier salesBook total creditCard debitedAmout debitedCreditCard  transactionId |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	salesBook := OrderedCollection new.
	
	testObjectsFactory debitBehavior: [ :anAmount :aCreditCard | 
		debitedAmout := anAmount.
		debitedCreditCard := aCreditCard ].
	
 	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: testObjectsFactory createMerchantProcessor
		on: testObjectsFactory today
		registeringOn: salesBook
		generatingTransactionIdWith: testObjectsFactory transactionIdGenerator.	
		
	transactionId := cashier checkOut.
					
	self assert: debitedCreditCard = creditCard.
	self assert: debitedAmout = (salesBook at: transactionId) total.! !
!CashierTest methodsFor: 'tests' stamp: 'JPF 6/21/2021 12:39:01' prior: 50884829!
test05CashierChargesCreditCardUsingMerchantProcessor

	| cart cashier salesBook creditCard debitedAmout debitedCreditCard  transactionId |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	salesBook := OrderedDictionary new.
	
	testObjectsFactory debitBehavior: [ :anAmount :aCreditCard | 
		debitedAmout := anAmount.
		debitedCreditCard := aCreditCard ].
	
 	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: testObjectsFactory createMerchantProcessor
		on: testObjectsFactory today
		registeringOn: salesBook
		generatingTransactionIdWith: testObjectsFactory transactionIdGenerator.	
		
	transactionId := cashier checkOut.
					
	self assert: debitedCreditCard = creditCard.
	self assert: debitedAmout = (salesBook at: transactionId) total.! !

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'JPF 6/21/2021 12:39:17'!
PASSED!

!testRun: #StoreFacadeTest #test10ShouldReturnEmptyListOfPurchasesWhenClientDidNotMakeAnyPurchase stamp: 'JPF 6/21/2021 12:39:19'!
ERROR!
!PurchasesDetail methodsFor: 'testing' stamp: 'JPF 6/21/2021 12:39:56'!
isEmpty
	self shouldBeImplemented.! !
!PurchasesDetail methodsFor: 'testing' stamp: 'JPF 6/21/2021 12:40:09' prior: 50884897!
isEmpty
	
	^ items isEmpty.! !
!PurchasesDetail methodsFor: 'testing' stamp: 'JPF 6/21/2021 12:40:10' prior: 50884901!
isEmpty
	
	^ items isEmpty! !

!testRun: #StoreFacadeTest #test10ShouldReturnEmptyListOfPurchasesWhenClientDidNotMakeAnyPurchase stamp: 'JPF 6/21/2021 12:40:12'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'JPF 6/21/2021 12:40:15'!
FAILURE!
!CashierTest methodsFor: 'tests' stamp: 'JPF 6/21/2021 12:41:04' prior: 50883804!
test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit

	| cart cashier salesBook creditCard |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	salesBook := OrderedDictionary new.
 	debitBehavior := [ :anAmount :aCreditCard | self error: Cashier creditCardHasNoCreditErrorMessage].
	
	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: testObjectsFactory createMerchantProcessor
		on: testObjectsFactory today
		registeringOn: salesBook
		generatingTransactionIdWith: testObjectsFactory transactionIdGenerator.
		
	self 
		should: [cashier checkOut ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier creditCardHasNoCreditErrorMessage.
			self assert: salesBook isEmpty ]! !

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'JPF 6/21/2021 12:41:17'!
FAILURE!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'JPF 6/21/2021 12:42:10'!
FAILURE!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'JPF 6/21/2021 12:42:40'!
PASSED!

!testRun: #StoreFacadeTest #test03ShouldAddAnItemToTheCart stamp: 'JPF 6/21/2021 12:42:43'!
FAILURE!
!StoreFacadeTest methodsFor: 'tests' stamp: 'JPF 6/21/2021 12:44:06' prior: 50878819!
test03ShouldAddAnItemToTheCart

	| storeFacade cartItems cartId |
	
	storeFacade := testObjectsFactory createStoreFacade.
	
	cartId := storeFacade createCartFor: testObjectsFactory clientId withPassword: testObjectsFactory password.
	
	storeFacade add: 3 of: testObjectsFactory itemSellByTheStore to: cartId.
	
	cartItems := storeFacade listCart: cartId.
	
	self assert: cartItems size = 1.
	self assert: (cartItems at: testObjectsFactory itemSellByTheStore) = 3.! !

!testRun: #StoreFacadeTest #test03ShouldAddAnItemToTheCart stamp: 'JPF 6/21/2021 12:44:10'!
PASSED!

!testRun: #StoreFacadeTest #test06ShouldAddAnItemToTheCorrectCart stamp: 'JPF 6/21/2021 12:44:11'!
FAILURE!
!StoreFacadeTest methodsFor: 'tests' stamp: 'JPF 6/21/2021 12:45:05' prior: 50878862!
test06ShouldAddAnItemToTheCorrectCart

	| storeFacade cartItemsNotEmpty cartIdToAdd cartIdEmpty cartItemsEmpty |
	
	storeFacade := testObjectsFactory createStoreFacade.
	
	cartIdEmpty := storeFacade createCartFor: testObjectsFactory clientId withPassword: testObjectsFactory password.
	cartIdToAdd := storeFacade createCartFor: testObjectsFactory clientId withPassword: testObjectsFactory password.
	
	storeFacade add: 3 of: testObjectsFactory itemSellByTheStore to: cartIdToAdd.
	cartItemsNotEmpty := storeFacade listCart: cartIdToAdd.
	
	cartItemsEmpty := storeFacade listCart: cartIdEmpty.

	self assert: cartItemsNotEmpty size = 1.
	self assert: (cartItemsNotEmpty at: testObjectsFactory itemSellByTheStore) = 3.

	
	self assert: cartItemsEmpty isEmpty! !
!StoreFacadeTest methodsFor: 'tests' stamp: 'JPF 6/21/2021 12:45:09' prior: 50884985!
test06ShouldAddAnItemToTheCorrectCart

	| storeFacade cartItemsNotEmpty cartIdToAdd cartIdEmpty cartItemsEmpty |
	
	storeFacade := testObjectsFactory createStoreFacade.
	
	cartIdEmpty := storeFacade createCartFor: testObjectsFactory clientId withPassword: testObjectsFactory password.
	cartIdToAdd := storeFacade createCartFor: testObjectsFactory clientId withPassword: testObjectsFactory password.
	
	storeFacade add: 3 of: testObjectsFactory itemSellByTheStore to: cartIdToAdd.
	cartItemsNotEmpty := storeFacade listCart: cartIdToAdd.
	
	cartItemsEmpty := storeFacade listCart: cartIdEmpty.

	self assert: cartItemsNotEmpty size = 1.
	self assert: (cartItemsNotEmpty at: testObjectsFactory itemSellByTheStore) = 3.

	self assert: cartItemsEmpty isEmpty! !

!testRun: #StoreFacadeTest #test06ShouldAddAnItemToTheCorrectCart stamp: 'JPF 6/21/2021 12:45:12'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'JPF 6/21/2021 12:45:18'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'JPF 6/21/2021 12:45:18'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'JPF 6/21/2021 12:45:18'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'JPF 6/21/2021 12:45:18'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'JPF 6/21/2021 12:45:18'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'JPF 6/21/2021 12:45:18'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'JPF 6/21/2021 12:45:18'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'JPF 6/21/2021 12:45:18'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'JPF 6/21/2021 12:45:18'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'JPF 6/21/2021 12:45:18'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'JPF 6/21/2021 12:45:18'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'JPF 6/21/2021 12:45:18'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'JPF 6/21/2021 12:45:18'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'JPF 6/21/2021 12:45:18'!
FAILURE!

!testRun: #CreditCardTest #test01ShouldFailWhenTheNameIsEmpty stamp: 'JPF 6/21/2021 12:45:18'!
PASSED!

!testRun: #CreditCardTest #test02ShouldFailWhenTheNameIsAllWithespaceCharacters stamp: 'JPF 6/21/2021 12:45:18'!
PASSED!

!testRun: #CreditCardTest #test03ShouldFailWhenTheNameHasMoreThan30Characters stamp: 'JPF 6/21/2021 12:45:18'!
PASSED!

!testRun: #CreditCardTest #test04ShouldFailWhenTheNumberHasNot16Digits stamp: 'JPF 6/21/2021 12:45:18'!
PASSED!

!testRun: #StoreFacadeTest #test01ShouldFailToCreateCartWhenClientIdOrPasswordAreIncorrect stamp: 'JPF 6/21/2021 12:45:18'!
PASSED!

!testRun: #StoreFacadeTest #test02ShouldCreateACartAndBeEmptyWhenListed stamp: 'JPF 6/21/2021 12:45:18'!
PASSED!

!testRun: #StoreFacadeTest #test03ShouldAddAnItemToTheCart stamp: 'JPF 6/21/2021 12:45:18'!
PASSED!

!testRun: #StoreFacadeTest #test04ShouldFailWhenTryToAddItemsToAnInexistentCart stamp: 'JPF 6/21/2021 12:45:18'!
PASSED!

!testRun: #StoreFacadeTest #test05ShouldFailWhenTryToListAnInexistentCart stamp: 'JPF 6/21/2021 12:45:18'!
PASSED!

!testRun: #StoreFacadeTest #test06ShouldAddAnItemToTheCorrectCart stamp: 'JPF 6/21/2021 12:45:18'!
PASSED!

!testRun: #StoreFacadeTest #test07ShouldReturnADifferentTransactionIdPerCheckout stamp: 'JPF 6/21/2021 12:45:18'!
PASSED!

!testRun: #StoreFacadeTest #test08ShouldFailWhenTryToCheckoutTheSameCartTwice stamp: 'JPF 6/21/2021 12:45:18'!
PASSED!

!testRun: #StoreFacadeTest #test09ShouldFailWhenListPurchasesForAnIncorrectClientIdOrPassword stamp: 'JPF 6/21/2021 12:45:18'!
PASSED!

!testRun: #StoreFacadeTest #test10ShouldReturnEmptyListOfPurchasesWhenClientDidNotMakeAnyPurchase stamp: 'JPF 6/21/2021 12:45:18'!
PASSED!

!testRun: #StoreFacadeTest #test11ShouldListClientPurchases stamp: 'JPF 6/21/2021 12:45:18'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'JPF 6/21/2021 12:45:18'!
FAILURE!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'JPF 6/21/2021 12:45:37'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'JPF 6/21/2021 12:45:40'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'JPF 6/21/2021 12:45:40'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'JPF 6/21/2021 12:45:40'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'JPF 6/21/2021 12:45:40'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'JPF 6/21/2021 12:45:40'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'JPF 6/21/2021 12:45:40'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'JPF 6/21/2021 12:45:40'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'JPF 6/21/2021 12:45:40'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'JPF 6/21/2021 12:45:40'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'JPF 6/21/2021 12:45:40'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'JPF 6/21/2021 12:45:40'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'JPF 6/21/2021 12:45:40'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'JPF 6/21/2021 12:45:40'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'JPF 6/21/2021 12:45:40'!
FAILURE!

!testRun: #CreditCardTest #test01ShouldFailWhenTheNameIsEmpty stamp: 'JPF 6/21/2021 12:45:40'!
PASSED!

!testRun: #CreditCardTest #test02ShouldFailWhenTheNameIsAllWithespaceCharacters stamp: 'JPF 6/21/2021 12:45:40'!
PASSED!

!testRun: #CreditCardTest #test03ShouldFailWhenTheNameHasMoreThan30Characters stamp: 'JPF 6/21/2021 12:45:40'!
PASSED!

!testRun: #CreditCardTest #test04ShouldFailWhenTheNumberHasNot16Digits stamp: 'JPF 6/21/2021 12:45:40'!
PASSED!

!testRun: #StoreFacadeTest #test01ShouldFailToCreateCartWhenClientIdOrPasswordAreIncorrect stamp: 'JPF 6/21/2021 12:45:40'!
PASSED!

!testRun: #StoreFacadeTest #test02ShouldCreateACartAndBeEmptyWhenListed stamp: 'JPF 6/21/2021 12:45:40'!
PASSED!

!testRun: #StoreFacadeTest #test03ShouldAddAnItemToTheCart stamp: 'JPF 6/21/2021 12:45:40'!
PASSED!

!testRun: #StoreFacadeTest #test04ShouldFailWhenTryToAddItemsToAnInexistentCart stamp: 'JPF 6/21/2021 12:45:40'!
PASSED!

!testRun: #StoreFacadeTest #test05ShouldFailWhenTryToListAnInexistentCart stamp: 'JPF 6/21/2021 12:45:40'!
PASSED!

!testRun: #StoreFacadeTest #test06ShouldAddAnItemToTheCorrectCart stamp: 'JPF 6/21/2021 12:45:40'!
PASSED!

!testRun: #StoreFacadeTest #test07ShouldReturnADifferentTransactionIdPerCheckout stamp: 'JPF 6/21/2021 12:45:40'!
PASSED!

!testRun: #StoreFacadeTest #test08ShouldFailWhenTryToCheckoutTheSameCartTwice stamp: 'JPF 6/21/2021 12:45:40'!
PASSED!

!testRun: #StoreFacadeTest #test09ShouldFailWhenListPurchasesForAnIncorrectClientIdOrPassword stamp: 'JPF 6/21/2021 12:45:40'!
PASSED!

!testRun: #StoreFacadeTest #test10ShouldReturnEmptyListOfPurchasesWhenClientDidNotMakeAnyPurchase stamp: 'JPF 6/21/2021 12:45:40'!
PASSED!

!testRun: #StoreFacadeTest #test11ShouldListClientPurchases stamp: 'JPF 6/21/2021 12:45:40'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'JPF 6/21/2021 12:45:40'!
FAILURE!

total!

cart total!
!CashierTest methodsFor: 'tests' stamp: 'JPF 6/21/2021 12:48:27' prior: 50884917!
test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit

	| cart cashier salesBook creditCard |

	testObjectsFactory debitBehavior: [ :anAmount :aCreditCard | self error: Cashier creditCardHasNoCreditErrorMessage].
	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	salesBook := OrderedDictionary new.
 	
	
	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: testObjectsFactory createMerchantProcessor
		on: testObjectsFactory today
		registeringOn: salesBook
		generatingTransactionIdWith: testObjectsFactory transactionIdGenerator.
		
	self 
		should: [cashier checkOut ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier creditCardHasNoCreditErrorMessage.
			self assert: salesBook isEmpty ]! !

!methodRemoval: CashierTest #debit:from: stamp: 'JPF 6/21/2021 12:48:46'!
debit: anAmount from: aCreditCard 

	^debitBehavior value: anAmount value: aCreditCard !

TestCase subclass: #CashierTest
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'JPF 6/21/2021 12:48:54'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'JPF 6/21/2021 12:48:58'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'JPF 6/21/2021 12:48:58'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'JPF 6/21/2021 12:48:58'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'JPF 6/21/2021 12:48:58'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'JPF 6/21/2021 12:48:58'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'JPF 6/21/2021 12:48:58'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'JPF 6/21/2021 12:49:01'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'JPF 6/21/2021 12:49:01'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'JPF 6/21/2021 12:49:01'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'JPF 6/21/2021 12:49:01'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'JPF 6/21/2021 12:49:01'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'JPF 6/21/2021 12:49:01'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'JPF 6/21/2021 12:49:01'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'JPF 6/21/2021 12:49:01'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'JPF 6/21/2021 12:49:01'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'JPF 6/21/2021 12:49:01'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'JPF 6/21/2021 12:49:01'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'JPF 6/21/2021 12:49:01'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'JPF 6/21/2021 12:49:01'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'JPF 6/21/2021 12:49:01'!
PASSED!

!testRun: #CreditCardTest #test01ShouldFailWhenTheNameIsEmpty stamp: 'JPF 6/21/2021 12:49:01'!
PASSED!

!testRun: #CreditCardTest #test02ShouldFailWhenTheNameIsAllWithespaceCharacters stamp: 'JPF 6/21/2021 12:49:01'!
PASSED!

!testRun: #CreditCardTest #test03ShouldFailWhenTheNameHasMoreThan30Characters stamp: 'JPF 6/21/2021 12:49:01'!
PASSED!

!testRun: #CreditCardTest #test04ShouldFailWhenTheNumberHasNot16Digits stamp: 'JPF 6/21/2021 12:49:01'!
PASSED!

!testRun: #StoreFacadeTest #test01ShouldFailToCreateCartWhenClientIdOrPasswordAreIncorrect stamp: 'JPF 6/21/2021 12:49:01'!
PASSED!

!testRun: #StoreFacadeTest #test02ShouldCreateACartAndBeEmptyWhenListed stamp: 'JPF 6/21/2021 12:49:01'!
PASSED!

!testRun: #StoreFacadeTest #test03ShouldAddAnItemToTheCart stamp: 'JPF 6/21/2021 12:49:01'!
PASSED!

!testRun: #StoreFacadeTest #test04ShouldFailWhenTryToAddItemsToAnInexistentCart stamp: 'JPF 6/21/2021 12:49:01'!
PASSED!

!testRun: #StoreFacadeTest #test05ShouldFailWhenTryToListAnInexistentCart stamp: 'JPF 6/21/2021 12:49:01'!
PASSED!

!testRun: #StoreFacadeTest #test06ShouldAddAnItemToTheCorrectCart stamp: 'JPF 6/21/2021 12:49:01'!
PASSED!

!testRun: #StoreFacadeTest #test07ShouldReturnADifferentTransactionIdPerCheckout stamp: 'JPF 6/21/2021 12:49:01'!
PASSED!

!testRun: #StoreFacadeTest #test08ShouldFailWhenTryToCheckoutTheSameCartTwice stamp: 'JPF 6/21/2021 12:49:01'!
PASSED!

!testRun: #StoreFacadeTest #test09ShouldFailWhenListPurchasesForAnIncorrectClientIdOrPassword stamp: 'JPF 6/21/2021 12:49:01'!
PASSED!

!testRun: #StoreFacadeTest #test10ShouldReturnEmptyListOfPurchasesWhenClientDidNotMakeAnyPurchase stamp: 'JPF 6/21/2021 12:49:01'!
PASSED!

!testRun: #StoreFacadeTest #test11ShouldListClientPurchases stamp: 'JPF 6/21/2021 12:49:01'!
PASSED!
!StoreFacadeTest methodsFor: 'tests' stamp: 'JPF 6/21/2021 13:00:58'!
test12ShouldFailWhenTryToAccessACartAfter30MinutesFromTheLastAccess

	| storeFacade cartId1  cartId2 purchasesDetailOfClient clientId |
	
	clientId := testObjectsFactory clientId.
	storeFacade := testObjectsFactory createStoreFacade.

	cartId1 := storeFacade createCartFor: clientId withPassword: testObjectsFactory password.
	storeFacade add: 3 of: testObjectsFactory itemSellByTheStore to: cartId1.
	storeFacade add: 1 of: testObjectsFactory itemSellByTheStore2 to: cartId1.
	storeFacade
		checkOutCart: cartId1
		payingWithCardNumber: testObjectsFactory validCreditCardNumber 
		of: testObjectsFactory validCreditCardName
		expiringOn: testObjectsFactory notExpiredCreditCardMonth
		for: clientId.
		
	cartId2 := storeFacade createCartFor: clientId withPassword: testObjectsFactory password.
	storeFacade add: 1 of: testObjectsFactory itemSellByTheStore to: cartId2.
	storeFacade add: 2 of: testObjectsFactory itemSellByTheStore2 to: cartId2.
	storeFacade
		checkOutCart: cartId2
		payingWithCardNumber: testObjectsFactory validCreditCardNumber 
		of: testObjectsFactory validCreditCardName
		expiringOn: testObjectsFactory notExpiredCreditCardMonth
		for: clientId.
		
	purchasesDetailOfClient := storeFacade
		listPurchasesOf: testObjectsFactory
		clientId withPassword: testObjectsFactory password.
		
	self assert: 100 equals: purchasesDetailOfClient total.
	self assert: 2 equals: purchasesDetailOfClient items size.
	
	self assert: 4 equals: (purchasesDetailOfClient items at: testObjectsFactory itemSellByTheStore).
	self assert: 3 equals: (purchasesDetailOfClient items at: testObjectsFactory itemSellByTheStore2).

		
	! !
!StoreFacadeTest methodsFor: 'tests' stamp: 'JPF 6/21/2021 13:01:45' prior: 50885424!
test12ShouldFailWhenTryToAccessACartAfter30MinutesFromTheLastAccess

	| storeFacade cartId1  purchasesDetailOfClient clientId |
	
	clientId := testObjectsFactory clientId.
	storeFacade := testObjectsFactory createStoreFacade.

	cartId1 := storeFacade createCartFor: clientId withPassword: testObjectsFactory password.
	storeFacade add: 3 of: testObjectsFactory itemSellByTheStore to: cartId1.
	storeFacade add: 1 of: testObjectsFactory itemSellByTheStore2 to: cartId1.
	storeFacade
		checkOutCart: cartId1
		payingWithCardNumber: testObjectsFactory validCreditCardNumber 
		of: testObjectsFactory validCreditCardName
		expiringOn: testObjectsFactory notExpiredCreditCardMonth
		for: clientId.
		
	purchasesDetailOfClient := storeFacade
		listPurchasesOf: testObjectsFactory
		clientId withPassword: testObjectsFactory password.

		
	! !
!StoreFacadeTest methodsFor: 'tests' stamp: 'JPF 6/21/2021 13:02:15' prior: 50885478!
test12ShouldFailWhenTryToAccessACartAfter30MinutesFromTheLastAccess

	| storeFacade cartId  purchasesDetailOfClient clientId |
	
	clientId := testObjectsFactory clientId.
	storeFacade := testObjectsFactory createStoreFacade.

	cartId := storeFacade createCartFor: clientId withPassword: testObjectsFactory password.
	storeFacade add: 3 of: testObjectsFactory itemSellByTheStore to: cartId.
	storeFacade add: 1 of: testObjectsFactory itemSellByTheStore2 to: cartId.
	storeFacade
		checkOutCart: cartId
		payingWithCardNumber: testObjectsFactory validCreditCardNumber 
		of: testObjectsFactory validCreditCardName
		expiringOn: testObjectsFactory notExpiredCreditCardMonth
		for: clientId.
		
	purchasesDetailOfClient := storeFacade
		listPurchasesOf: testObjectsFactory
		clientId withPassword: testObjectsFactory password.

		
	! !
!StoreFacadeTest methodsFor: 'tests' stamp: 'JPF 6/21/2021 13:02:51' prior: 50885507!
test12ShouldFailWhenTryToAccessACartAfter30MinutesFromTheLastAccess

	| storeFacade cartId  clientId |
	
	clientId := testObjectsFactory clientId.
	storeFacade := testObjectsFactory createStoreFacade.

	cartId := storeFacade createCartFor: clientId withPassword: testObjectsFactory password.
	storeFacade add: 3 of: testObjectsFactory itemSellByTheStore to: cartId.

		
	! !
!StoreFacadeTest methodsFor: 'tests' stamp: 'JPF 6/21/2021 13:04:09' prior: 50885536!
test12ShouldFailWhenTryToAccessACartAfter30MinutesFromTheLastAccess

	| storeFacade cartId  clientId |
	
	clientId := testObjectsFactory clientId.
	storeFacade := testObjectsFactory createStoreFacade.

	cartId := storeFacade createCartFor: clientId withPassword: testObjectsFactory password.
	self 
		should: [ storeFacade listCart: cartId ]
		raise: Error - MessageNotUnderstood
		withMessageText: StoreFacade inexistentCartErrorMessage.
	
	cartId := storeFacade createCartFor: clientId withPassword: testObjectsFactory password.
	storeFacade add: 3 of: testObjectsFactory itemSellByTheStore to: cartId.
	self 
		should: [ storeFacade listCart: cartId ]
		raise: Error - MessageNotUnderstood
		withMessageText: StoreFacade inexistentCartErrorMessage.
		
	

		
	! !
!StoreFacadeTest methodsFor: 'tests' stamp: 'JPF 6/21/2021 13:05:21' prior: 50885551!
test12ShouldFailWhenTryToAccessACartAfter30MinutesFromTheLastAccess

	| storeFacade cartId  clientId |
	
	clientId := testObjectsFactory clientId.
	storeFacade := testObjectsFactory createStoreFacade.

	cartId := storeFacade createCartFor: clientId withPassword: testObjectsFactory password.
	self 
		should: [ storeFacade listCart: cartId ]
		raise: Error - MessageNotUnderstood
		withMessageText: StoreFacade inexistentCartErrorMessage.
		
	cartId := storeFacade createCartFor: clientId withPassword: testObjectsFactory password.
	self 
		should: [ storeFacade add: 3 of: testObjectsFactory itemSellByTheStore to: cartId ]
		raise: Error - MessageNotUnderstood
		withMessageText: StoreFacade inexistentCartErrorMessage.
	
	cartId := storeFacade createCartFor: clientId withPassword: testObjectsFactory password.
	storeFacade add: 3 of: testObjectsFactory itemSellByTheStore to: cartId.
	self 
		should: [ storeFacade listCart: cartId ]
		raise: Error - MessageNotUnderstood
		withMessageText: StoreFacade inexistentCartErrorMessage.
		
	

		
	! !
!StoreFacadeTest methodsFor: 'tests' stamp: 'JPF 6/21/2021 13:05:39' prior: 50885578!
test12ShouldFailWhenTryToAccessACartAfter30MinutesFromTheLastAccess

	| storeFacade cartId  clientId |
	
	clientId := testObjectsFactory clientId.
	storeFacade := testObjectsFactory createStoreFacade.

	cartId := storeFacade createCartFor: clientId withPassword: testObjectsFactory password.
	self 
		should: [ storeFacade listCart: cartId ]
		raise: Error - MessageNotUnderstood
		withMessageText: StoreFacade inexistentCartErrorMessage.
		
	cartId := storeFacade createCartFor: clientId withPassword: testObjectsFactory password.
	self 
		should: [ storeFacade add: 1 of: testObjectsFactory itemSellByTheStore to: cartId ]
		raise: Error - MessageNotUnderstood
		withMessageText: StoreFacade inexistentCartErrorMessage.
	
	cartId := storeFacade createCartFor: clientId withPassword: testObjectsFactory password.
	storeFacade add: 3 of: testObjectsFactory itemSellByTheStore to: cartId.
	self 
		should: [ storeFacade listCart: cartId ]
		raise: Error - MessageNotUnderstood
		withMessageText: StoreFacade inexistentCartErrorMessage.
		
	

		
	! !
!StoreFacadeTest methodsFor: 'tests' stamp: 'JPF 6/21/2021 13:06:09' prior: 50885614!
test12ShouldFailWhenTryToAccessACartAfter30MinutesFromTheLastAccess

	| storeFacade cartId  clientId |
	
	clientId := testObjectsFactory clientId.
	storeFacade := testObjectsFactory createStoreFacade.

	cartId := storeFacade createCartFor: clientId withPassword: testObjectsFactory password.
	self 
		should: [ storeFacade listCart: cartId ]
		raise: Error - MessageNotUnderstood
		withMessageText: StoreFacade inexistentCartErrorMessage.
		
	cartId := storeFacade createCartFor: clientId withPassword: testObjectsFactory password.
	self 
		should: [ storeFacade add: 1 of: testObjectsFactory itemSellByTheStore to: cartId ]
		raise: Error - MessageNotUnderstood
		withMessageText: StoreFacade inexistentCartErrorMessage.
	
	cartId := storeFacade createCartFor: clientId withPassword: testObjectsFactory password.
	storeFacade add: 3 of: testObjectsFactory itemSellByTheStore to: cartId.
	self 
		should: [ storeFacade listCart: cartId ]
		raise: Error - MessageNotUnderstood
		withMessageText: StoreFacade inexistentCartErrorMessage.
	
	cartId := storeFacade createCartFor: clientId withPassword: testObjectsFactory password.
	storeFacade listCart: cartId.
	self 
		should: [ storeFacade add: 3 of: testObjectsFactory itemSellByTheStore to: cartId ]
		raise: Error - MessageNotUnderstood
		withMessageText: StoreFacade inexistentCartErrorMessage.
		
	

		
	! !

clock := PointInTime new.!

clock next!

clock := Time new.!

clock := GregorianDateTime now !

clock := GregorianDateTime now .!

clock !

clock  !

clock  !
!StoreFacadeTest methodsFor: 'tests' stamp: 'JPF 6/21/2021 13:29:22' prior: 50885650!
test12ShouldFailWhenTryToAccessACartAfter30MinutesFromTheLastAccess

	| storeFacade cartId  clientId today |
	
	clientId := testObjectsFactory clientId.
	storeFacade := testObjectsFactory createStoreFacade.
	
	today := testObjectsFactory today.

	cartId := storeFacade createCartFor: clientId withPassword: testObjectsFactory password.
	testObjectsFactory clockBehaviour: [ GregorianDateTime date: today timeOfDay: 1]
	self 
		should: [ storeFacade listCart: cartId ]
		raise: Error - MessageNotUnderstood
		withMessageText: StoreFacade inexistentCartErrorMessage.
		
	cartId := storeFacade createCartFor: clientId withPassword: testObjectsFactory password.
	self 
		should: [ storeFacade add: 1 of: testObjectsFactory itemSellByTheStore to: cartId ]
		raise: Error - MessageNotUnderstood
		withMessageText: StoreFacade inexistentCartErrorMessage.
	
	cartId := storeFacade createCartFor: clientId withPassword: testObjectsFactory password.
	storeFacade add: 3 of: testObjectsFactory itemSellByTheStore to: cartId.
	self 
		should: [ storeFacade listCart: cartId ]
		raise: Error - MessageNotUnderstood
		withMessageText: StoreFacade inexistentCartErrorMessage.
	
	cartId := storeFacade createCartFor: clientId withPassword: testObjectsFactory password.
	storeFacade listCart: cartId.
	self 
		should: [ storeFacade add: 3 of: testObjectsFactory itemSellByTheStore to: cartId ]
		raise: Error - MessageNotUnderstood
		withMessageText: StoreFacade inexistentCartErrorMessage.
		
	

		
	! !
!StoreFacadeTest methodsFor: 'tests' stamp: 'JPF 6/21/2021 13:29:27' prior: 50885701!
test12ShouldFailWhenTryToAccessACartAfter30MinutesFromTheLastAccess

	| storeFacade cartId  clientId today |
	
	clientId := testObjectsFactory clientId.
	storeFacade := testObjectsFactory createStoreFacade.
	
	today := testObjectsFactory today.

	cartId := storeFacade createCartFor: clientId withPassword: testObjectsFactory password.
	testObjectsFactory clockBehaviour: [ GregorianDateTime date: today timeOfDay: 1].
	self 
		should: [ storeFacade listCart: cartId ]
		raise: Error - MessageNotUnderstood
		withMessageText: StoreFacade inexistentCartErrorMessage.
		
	cartId := storeFacade createCartFor: clientId withPassword: testObjectsFactory password.
	self 
		should: [ storeFacade add: 1 of: testObjectsFactory itemSellByTheStore to: cartId ]
		raise: Error - MessageNotUnderstood
		withMessageText: StoreFacade inexistentCartErrorMessage.
	
	cartId := storeFacade createCartFor: clientId withPassword: testObjectsFactory password.
	storeFacade add: 3 of: testObjectsFactory itemSellByTheStore to: cartId.
	self 
		should: [ storeFacade listCart: cartId ]
		raise: Error - MessageNotUnderstood
		withMessageText: StoreFacade inexistentCartErrorMessage.
	
	cartId := storeFacade createCartFor: clientId withPassword: testObjectsFactory password.
	storeFacade listCart: cartId.
	self 
		should: [ storeFacade add: 3 of: testObjectsFactory itemSellByTheStore to: cartId ]
		raise: Error - MessageNotUnderstood
		withMessageText: StoreFacade inexistentCartErrorMessage.
		
	

		
	! !
!StoreFacadeTest methodsFor: 'tests' stamp: 'JPF 6/21/2021 13:34:40' prior: 50885751!
test12ShouldFailWhenTryToAccessACartAfter30MinutesFromTheLastAccess

	| storeFacade cartId  clientId today |
	
	clientId := testObjectsFactory clientId.
	storeFacade := testObjectsFactory createStoreFacade.
	
	today := testObjectsFactory today.

	testObjectsFactory clockBehaviour: [ today ].
	cartId := storeFacade createCartFor: clientId withPassword: testObjectsFactory password.
	testObjectsFactory clockBehaviour: [ today + (Duration minutes: 30) ].
	self 
		should: [ storeFacade listCart: cartId ]
		raise: Error - MessageNotUnderstood
		withMessageText: StoreFacade inexistentCartErrorMessage.
		
	cartId := storeFacade createCartFor: clientId withPassword: testObjectsFactory password.
	self 
		should: [ storeFacade add: 1 of: testObjectsFactory itemSellByTheStore to: cartId ]
		raise: Error - MessageNotUnderstood
		withMessageText: StoreFacade inexistentCartErrorMessage.
	
	cartId := storeFacade createCartFor: clientId withPassword: testObjectsFactory password.
	storeFacade add: 3 of: testObjectsFactory itemSellByTheStore to: cartId.
	self 
		should: [ storeFacade listCart: cartId ]
		raise: Error - MessageNotUnderstood
		withMessageText: StoreFacade inexistentCartErrorMessage.
	
	cartId := storeFacade createCartFor: clientId withPassword: testObjectsFactory password.
	storeFacade listCart: cartId.
	self 
		should: [ storeFacade add: 3 of: testObjectsFactory itemSellByTheStore to: cartId ]
		raise: Error - MessageNotUnderstood
		withMessageText: StoreFacade inexistentCartErrorMessage.
		
	

		
	! !
!StoreFacadeTest methodsFor: 'tests' stamp: 'JPF 6/21/2021 13:37:03' prior: 50885801!
test12ShouldFailWhenTryToAccessACartAfter30MinutesFromTheLastAccess

	| storeFacade cartId  clientId today |
	
	clientId := testObjectsFactory clientId.
	storeFacade := testObjectsFactory createStoreFacade.
	
	today := testObjectsFactory today.

	testObjectsFactory clockBehaviour: [ today ].
	cartId := storeFacade createCartFor: clientId withPassword: testObjectsFactory password.
	testObjectsFactory clockBehaviour: [ today + (Duration minutes: 30) ].
	self 
		should: [ storeFacade listCart: cartId ]
		raise: Error - MessageNotUnderstood
		withMessageText: StoreFacade inexistentCartErrorMessage.
	
	testObjectsFactory clockBehaviour: [ today ].	
	cartId := storeFacade createCartFor: clientId withPassword: testObjectsFactory password.
	testObjectsFactory clockBehaviour: [ today + (Duration minutes: 30) ].
	self 
		should: [ storeFacade add: 1 of: testObjectsFactory itemSellByTheStore to: cartId ]
		raise: Error - MessageNotUnderstood
		withMessageText: StoreFacade inexistentCartErrorMessage.
	
	testObjectsFactory clockBehaviour: [ today ].	
	cartId := storeFacade createCartFor: clientId withPassword: testObjectsFactory password.
	testObjectsFactory clockBehaviour: [ today + (Duration minutes: 29) ].
	storeFacade add: 3 of: testObjectsFactory itemSellByTheStore to: cartId.
	testObjectsFactory clockBehaviour: [ today + (Duration minutes: 30) ].
	self 
		should: [ storeFacade listCart: cartId ]
		raise: Error - MessageNotUnderstood
		withMessageText: StoreFacade inexistentCartErrorMessage.
	
	testObjectsFactory clockBehaviour: [ today ].	
	cartId := storeFacade createCartFor: clientId withPassword: testObjectsFactory password.
	testObjectsFactory clockBehaviour: [ today + (Duration minutes: 29) ].
	storeFacade listCart: cartId.
	testObjectsFactory clockBehaviour: [ today + (Duration minutes: 30) ].
	self 
		should: [ storeFacade add: 3 of: testObjectsFactory itemSellByTheStore to: cartId ]
		raise: Error - MessageNotUnderstood
		withMessageText: StoreFacade inexistentCartErrorMessage.
		
	

		
	! !
!StoreTestObjectsFactory methodsFor: 'clock protocol' stamp: 'JPF 6/21/2021 13:39:32'!
now:

	clockBehaviour! !

Object subclass: #StoreTestObjectsFactory
	instanceVariableNames: 'today validateClientBehaviour debitBehavior transactionIdSequence clockBehaviour'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

Object subclass: #StoreTestObjectsFactory
	instanceVariableNames: 'today validateClientBehaviour debitBehavior transactionIdSequence clockBehaviour'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

Object subclass: #StoreTestObjectsFactory
	instanceVariableNames: 'today validateClientBehaviour debitBehavior transactionIdSequence'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #StoreTestObjectsFactory category: 'TusLibros' stamp: 'JPF 6/21/2021 13:41:01'!
Object subclass: #StoreTestObjectsFactory
	instanceVariableNames: 'today validateClientBehaviour debitBehavior transactionIdSequence'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreTestObjectsFactory methodsFor: 'clock protocol' stamp: 'JPF 6/21/2021 13:41:33'!
now
! !

!methodRemoval: StoreTestObjectsFactory #now: stamp: 'JPF 6/21/2021 13:41:41'!
now:

	clockBehaviour!

!classDefinition: #StoreTestObjectsFactory category: 'TusLibros' stamp: 'JPF 6/21/2021 13:42:07'!
Object subclass: #StoreTestObjectsFactory
	instanceVariableNames: 'today validateClientBehaviour debitBehavior transactionIdSequence clockBehaviour'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreTestObjectsFactory methodsFor: 'clock protocol' stamp: 'JPF 6/21/2021 13:42:05' prior: 50885953!
now

	^ clockBehaviour value
! !
!StoreTestObjectsFactory methodsFor: 'initialization' stamp: 'JPF 6/21/2021 13:42:49' prior: 50883673 overrides: 16896425!
initialize

	today := DateAndTime now.
	validateClientBehaviour := [ :clientIdArg :passwordArg | ].
	debitBehavior := [ :anAmount :aCreditCard | ].
	clockBehaviour := [ DateAndTime now ].
	transactionIdSequence := 1.! !
!StoreFacade class methodsFor: 'instance creation' stamp: 'JPF 6/21/2021 13:44:50'!
validatingWith: aClientValidator having: aCatalog processingPaymentsWith: aMerchantProcessor accessingTimeThrough: aClock    
	
	^self new initializeValidatingWith: aClientValidator having: aCatalog processingPaymentsWith: aMerchantProcessor ! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'JPF 6/21/2021 13:44:50' prior: 50883927!
createStoreFacade
	
	^ StoreFacade validatingWith: self having: self defaultCatalog processingPaymentsWith: self accessingTimeThrough: aClock.! !

!methodRemoval: StoreFacade class #validatingWith:having:processingPaymentsWith: stamp: 'JPF 6/21/2021 13:44:50'!
validatingWith: aClientValidator having: aCatalog processingPaymentsWith: aMerchantProcessor   
	
	^self new initializeValidatingWith: aClientValidator having: aCatalog processingPaymentsWith: aMerchantProcessor !
!StoreTestObjectsFactory methodsFor: 'storeFacade' stamp: 'JPF 6/21/2021 13:45:08' prior: 50885997!
createStoreFacade
	
	^ StoreFacade validatingWith: self having: self defaultCatalog processingPaymentsWith: self accessingTimeThrough: self.! !
!StoreFacade methodsFor: 'initialization' stamp: 'JPF 6/21/2021 13:46:04'!
initializeValidatingWith: aClientValidator having: aCatalog processingPaymentsWith: aMerchantProcessor accessingTimeThrough: aClock  

	clientValidator := aClientValidator.
	catalog := aCatalog.
	cartRepository := Dictionary new.
	cartIdSequence := 1.
	transactionIdSequence :=1.
	salesBook := OrderedDictionary new.
	transactionsByClient := Dictionary new.
	merchantProcessor := aMerchantProcessor.! !
!StoreFacade class methodsFor: 'as yet unclassified' stamp: 'JPF 6/21/2021 13:46:04' prior: 50885985!
validatingWith: aClientValidator having: aCatalog processingPaymentsWith: aMerchantProcessor accessingTimeThrough: aClock    
	
	^self new initializeValidatingWith: aClientValidator having: aCatalog processingPaymentsWith: aMerchantProcessor accessingTimeThrough: aClock ! !

!methodRemoval: StoreFacade #initializeValidatingWith:having:processingPaymentsWith: stamp: 'JPF 6/21/2021 13:46:04'!
initializeValidatingWith: aClientValidator having: aCatalog processingPaymentsWith: aMerchantProcessor 

	clientValidator := aClientValidator.
	catalog := aCatalog.
	cartRepository := Dictionary new.
	cartIdSequence := 1.
	transactionIdSequence :=1.
	salesBook := OrderedDictionary new.
	transactionsByClient := Dictionary new.
	merchantProcessor := aMerchantProcessor.!

!classDefinition: #StoreFacade category: 'TusLibros' stamp: 'JPF 6/21/2021 13:46:31'!
Object subclass: #StoreFacade
	instanceVariableNames: 'clientValidator cartRepository cartIdSequence catalog transactionIdSequence merchantProcessor salesBook transactionsByClient transactionIdGenerator clock'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreFacade methodsFor: 'initialization' stamp: 'JPF 6/21/2021 13:46:29' prior: 50886022!
initializeValidatingWith: aClientValidator having: aCatalog processingPaymentsWith: aMerchantProcessor accessingTimeThrough: aClock  

	clientValidator := aClientValidator.
	catalog := aCatalog.
	cartRepository := Dictionary new.
	cartIdSequence := 1.
	transactionIdSequence :=1.
	salesBook := OrderedDictionary new.
	transactionsByClient := Dictionary new.
	merchantProcessor := aMerchantProcessor.
	clock := aClock.! !
!StoreFacade methodsFor: 'private' stamp: 'JPF 6/21/2021 13:48:59' prior: 50878304!
findCart: aCartId

	| cart |
	cart := cartRepository at: aCartId ifAbsent: [ self error: self class inexistentCartErrorMessage ].
	! !

!classDefinition: #StoreFacade category: 'TusLibros' stamp: 'JPF 6/21/2021 13:55:13'!
Object subclass: #StoreFacade
	instanceVariableNames: 'clientValidator cartRepository cartIdSequence catalog transactionIdSequence merchantProcessor salesBook transactionsByClient transactionIdGenerator clock lastCartAccessRegistry'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreFacade methodsFor: 'private' stamp: 'JPF 6/21/2021 13:55:12' prior: 50886093!
findCart: aCartId

	| cart |
	
	cart := cartRepository at: aCartId ifAbsent: [ self error: self class inexistentCartErrorMessage ].
	(clock now - (lastCartAccessRegistry at: aCartId)) >= (Duration minutes: 30) ifTrue: [
		cartRepository removeCart: aCartId.
		self error: self class inexistentCartErrorMessage
		].
	lastCartAccessRegistry at: aCartId put: clock now.
	! !
!StoreFacade methodsFor: 'private' stamp: 'JPF 6/21/2021 13:55:50' prior: 50886113!
findCart: aCartId

	| cart |
	
	cart := cartRepository at: aCartId ifAbsent: [ self error: self class inexistentCartErrorMessage ].
	(clock now - (lastCartAccessRegistry at: aCartId)) >= (Duration minutes: 30) ifTrue: [
		cartRepository removeCart: aCartId.
		self error: self class inexistentCartErrorMessage
		].
	lastCartAccessRegistry at: aCartId put: clock now.
	
	^ cart
	! !
!StoreFacadeTest methodsFor: 'tests' stamp: 'JPF 6/21/2021 13:56:15' prior: 50885852!
test12ShouldFailWhenTryToAccessACartAfter30MinutesFromTheLastAccess

	| storeFacade cartId  clientId today |
	
	clientId := testObjectsFactory clientId.
	storeFacade := testObjectsFactory createStoreFacade.
	
	today := testObjectsFactory today.

	testObjectsFactory clockBehaviour: [ today ].
	cartId := storeFacade createCartFor: clientId withPassword: testObjectsFactory password.
	testObjectsFactory clockBehaviour: [ today + (Duration minutes: 30) ].
	self 
		should: [ storeFacade listCart: cartId ]
		raise: Error - MessageNotUnderstood
		withMessageText: StoreFacade inexistentCartErrorMessage.
	
	testObjectsFactory clockBehaviour: [ today ].	
	cartId := storeFacade createCartFor: clientId withPassword: testObjectsFactory password.
	testObjectsFactory clockBehaviour: [ today + (Duration minutes: 30) ].
	self 
		should: [ storeFacade add: 1 of: testObjectsFactory itemSellByTheStore to: cartId ]
		raise: Error - MessageNotUnderstood
		withMessageText: StoreFacade inexistentCartErrorMessage.
	
	testObjectsFactory clockBehaviour: [ today ].	
	cartId := storeFacade createCartFor: clientId withPassword: testObjectsFactory password.
	testObjectsFactory clockBehaviour: [ today + (Duration minutes: 29) ].
	storeFacade add: 3 of: testObjectsFactory itemSellByTheStore to: cartId.
	testObjectsFactory clockBehaviour: [ today + (Duration minutes: 59) ].
	self 
		should: [ storeFacade listCart: cartId ]
		raise: Error - MessageNotUnderstood
		withMessageText: StoreFacade inexistentCartErrorMessage.
	
	testObjectsFactory clockBehaviour: [ today ].	
	cartId := storeFacade createCartFor: clientId withPassword: testObjectsFactory password.
	testObjectsFactory clockBehaviour: [ today + (Duration minutes: 29) ].
	storeFacade listCart: cartId.
	testObjectsFactory clockBehaviour: [ today + (Duration minutes: 30) ].
	self 
		should: [ storeFacade add: 3 of: testObjectsFactory itemSellByTheStore to: cartId ]
		raise: Error - MessageNotUnderstood
		withMessageText: StoreFacade inexistentCartErrorMessage.
		
	

		
	! !
!StoreFacadeTest methodsFor: 'tests' stamp: 'JPF 6/21/2021 13:56:22' prior: 50886143!
test12ShouldFailWhenTryToAccessACartAfter30MinutesFromTheLastAccess

	| storeFacade cartId  clientId today |
	
	clientId := testObjectsFactory clientId.
	storeFacade := testObjectsFactory createStoreFacade.
	
	today := testObjectsFactory today.

	testObjectsFactory clockBehaviour: [ today ].
	cartId := storeFacade createCartFor: clientId withPassword: testObjectsFactory password.
	testObjectsFactory clockBehaviour: [ today + (Duration minutes: 30) ].
	self 
		should: [ storeFacade listCart: cartId ]
		raise: Error - MessageNotUnderstood
		withMessageText: StoreFacade inexistentCartErrorMessage.
	
	testObjectsFactory clockBehaviour: [ today ].	
	cartId := storeFacade createCartFor: clientId withPassword: testObjectsFactory password.
	testObjectsFactory clockBehaviour: [ today + (Duration minutes: 30) ].
	self 
		should: [ storeFacade add: 1 of: testObjectsFactory itemSellByTheStore to: cartId ]
		raise: Error - MessageNotUnderstood
		withMessageText: StoreFacade inexistentCartErrorMessage.
	
	testObjectsFactory clockBehaviour: [ today ].	
	cartId := storeFacade createCartFor: clientId withPassword: testObjectsFactory password.
	testObjectsFactory clockBehaviour: [ today + (Duration minutes: 29) ].
	storeFacade add: 3 of: testObjectsFactory itemSellByTheStore to: cartId.
	testObjectsFactory clockBehaviour: [ today + (Duration minutes: 59) ].
	self 
		should: [ storeFacade listCart: cartId ]
		raise: Error - MessageNotUnderstood
		withMessageText: StoreFacade inexistentCartErrorMessage.
	
	testObjectsFactory clockBehaviour: [ today ].	
	cartId := storeFacade createCartFor: clientId withPassword: testObjectsFactory password.
	testObjectsFactory clockBehaviour: [ today + (Duration minutes: 29) ].
	storeFacade listCart: cartId.
	testObjectsFactory clockBehaviour: [ today + (Duration minutes: 59) ].
	self 
		should: [ storeFacade add: 3 of: testObjectsFactory itemSellByTheStore to: cartId ]
		raise: Error - MessageNotUnderstood
		withMessageText: StoreFacade inexistentCartErrorMessage.
		
	

		
	! !
!StoreFacade methodsFor: 'actions' stamp: 'JPF 6/21/2021 13:57:12' prior: 50880804!
createCartFor: aClientId withPassword: aPassword

	| cartId |
	
	clientValidator validateClient: aClientId withPassword: aPassword.
	
	cartId := self nextCartId.
	
	cartRepository at: cartId put: (Cart acceptingItemsOf: catalog).
	lastCartAccessRegistry at: cartId put: clock now.
	
	^ cartId! !
!StoreFacade methodsFor: 'initialization' stamp: 'JPF 6/21/2021 13:57:30' prior: 50886077!
initializeValidatingWith: aClientValidator having: aCatalog processingPaymentsWith: aMerchantProcessor accessingTimeThrough: aClock  

	clientValidator := aClientValidator.
	catalog := aCatalog.
	cartRepository := Dictionary new.
	cartIdSequence := 1.
	transactionIdSequence :=1.
	salesBook := OrderedDictionary new.
	transactionsByClient := Dictionary new.
	merchantProcessor := aMerchantProcessor.
	clock := aClock.
	lastCartAccessRegistry := Dictionary new.! !

!testRun: #StoreFacadeTest #test12ShouldFailWhenTryToAccessACartAfter30MinutesFromTheLastAccess stamp: 'JPF 6/21/2021 13:57:39'!
ERROR!

!testRun: #StoreFacadeTest #test12ShouldFailWhenTryToAccessACartAfter30MinutesFromTheLastAccess stamp: 'JPF 6/21/2021 13:57:39'!
ERROR!
!StoreTestObjectsFactory methodsFor: 'clock protocol' stamp: 'JPF 6/21/2021 13:58:23'!
clockBehaviour: aBlockClosure 
	self shouldBeImplemented.
	clockBehaviour _ aBlockClosure! !
!StoreTestObjectsFactory methodsFor: 'clock protocol' stamp: 'JPF 6/21/2021 13:58:30' prior: 50886315!
clockBehaviour: aBlockClosure 
	
	clockBehaviour _ aBlockClosure! !
!StoreTestObjectsFactory methodsFor: 'clock protocol' stamp: 'JPF 6/21/2021 13:58:36' prior: 50886322!
clockBehaviour: aBlockClosure 
	
	clockBehaviour := aBlockClosure! !
!StoreTestObjectsFactory methodsFor: 'clock protocol' stamp: 'JPF 6/21/2021 13:58:51' prior: 50886328!
clockBehaviour: aClockBehaviour 
	
	clockBehaviour := aClockBehaviour! !

!testRun: #StoreFacadeTest #test12ShouldFailWhenTryToAccessACartAfter30MinutesFromTheLastAccess stamp: 'JPF 6/21/2021 13:58:57'!
ERROR!
!StoreFacade methodsFor: 'private' stamp: 'JPF 6/21/2021 14:00:14' prior: 50886128!
findCart: aCartId

	| cart |
	
	cart := cartRepository at: aCartId ifAbsent: [ self error: self class inexistentCartErrorMessage ].
	(clock now - (lastCartAccessRegistry at: aCartId)) >= (Duration minutes: 30) ifTrue: [
		cartRepository removeKey: aCartId.
		self error: self class inexistentCartErrorMessage
		].
	lastCartAccessRegistry at: aCartId put: clock now.
	
	^ cart
	! !

!testRun: #StoreFacadeTest #test12ShouldFailWhenTryToAccessACartAfter30MinutesFromTheLastAccess stamp: 'JPF 6/21/2021 14:00:30'!
PASSED!

!testRun: #StoreFacadeTest #test12ShouldFailWhenTryToAccessACartAfter30MinutesFromTheLastAccess stamp: 'JPF 6/21/2021 14:00:37'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'JPF 6/21/2021 14:00:43'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'JPF 6/21/2021 14:00:43'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'JPF 6/21/2021 14:00:43'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'JPF 6/21/2021 14:00:43'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'JPF 6/21/2021 14:00:43'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'JPF 6/21/2021 14:00:43'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'JPF 6/21/2021 14:00:43'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'JPF 6/21/2021 14:00:43'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'JPF 6/21/2021 14:00:43'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'JPF 6/21/2021 14:00:43'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'JPF 6/21/2021 14:00:43'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'JPF 6/21/2021 14:00:43'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'JPF 6/21/2021 14:00:43'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'JPF 6/21/2021 14:00:43'!
PASSED!

!testRun: #CreditCardTest #test01ShouldFailWhenTheNameIsEmpty stamp: 'JPF 6/21/2021 14:00:43'!
PASSED!

!testRun: #CreditCardTest #test02ShouldFailWhenTheNameIsAllWithespaceCharacters stamp: 'JPF 6/21/2021 14:00:43'!
PASSED!

!testRun: #CreditCardTest #test03ShouldFailWhenTheNameHasMoreThan30Characters stamp: 'JPF 6/21/2021 14:00:43'!
PASSED!

!testRun: #CreditCardTest #test04ShouldFailWhenTheNumberHasNot16Digits stamp: 'JPF 6/21/2021 14:00:43'!
PASSED!

!testRun: #StoreFacadeTest #test01ShouldFailToCreateCartWhenClientIdOrPasswordAreIncorrect stamp: 'JPF 6/21/2021 14:00:43'!
PASSED!

!testRun: #StoreFacadeTest #test02ShouldCreateACartAndBeEmptyWhenListed stamp: 'JPF 6/21/2021 14:00:43'!
PASSED!

!testRun: #StoreFacadeTest #test03ShouldAddAnItemToTheCart stamp: 'JPF 6/21/2021 14:00:43'!
PASSED!

!testRun: #StoreFacadeTest #test04ShouldFailWhenTryToAddItemsToAnInexistentCart stamp: 'JPF 6/21/2021 14:00:43'!
PASSED!

!testRun: #StoreFacadeTest #test05ShouldFailWhenTryToListAnInexistentCart stamp: 'JPF 6/21/2021 14:00:43'!
PASSED!

!testRun: #StoreFacadeTest #test06ShouldAddAnItemToTheCorrectCart stamp: 'JPF 6/21/2021 14:00:43'!
PASSED!

!testRun: #StoreFacadeTest #test07ShouldReturnADifferentTransactionIdPerCheckout stamp: 'JPF 6/21/2021 14:00:43'!
PASSED!

!testRun: #StoreFacadeTest #test08ShouldFailWhenTryToCheckoutTheSameCartTwice stamp: 'JPF 6/21/2021 14:00:43'!
PASSED!

!testRun: #StoreFacadeTest #test09ShouldFailWhenListPurchasesForAnIncorrectClientIdOrPassword stamp: 'JPF 6/21/2021 14:00:43'!
PASSED!

!testRun: #StoreFacadeTest #test10ShouldReturnEmptyListOfPurchasesWhenClientDidNotMakeAnyPurchase stamp: 'JPF 6/21/2021 14:00:44'!
PASSED!

!testRun: #StoreFacadeTest #test11ShouldListClientPurchases stamp: 'JPF 6/21/2021 14:00:44'!
PASSED!

!testRun: #StoreFacadeTest #test12ShouldFailWhenTryToAccessACartAfter30MinutesFromTheLastAccess stamp: 'JPF 6/21/2021 14:00:44'!
PASSED!
!StoreFacadeTest methodsFor: 'tests' stamp: 'JPF 6/21/2021 14:02:15' prior: 50886210!
test12ShouldFailWhenTryToAccessACartAfter30MinutesFromTheLastAccess

	| storeFacade cartId  clientId today |
	
	clientId := testObjectsFactory clientId.
	storeFacade := testObjectsFactory createStoreFacade.
	
	today := testObjectsFactory today.

	testObjectsFactory clockBehaviour: [ today ].
	cartId := storeFacade createCartFor: clientId withPassword: testObjectsFactory password.
	testObjectsFactory clockBehaviour: [ today + (Duration minutes: 30) ].
	self 
		should: [ storeFacade listCart: cartId ]
		raise: Error - MessageNotUnderstood
		withMessageText: StoreFacade inexistentCartErrorMessage.
	
	testObjectsFactory clockBehaviour: [ today ].	
	cartId := storeFacade createCartFor: clientId withPassword: testObjectsFactory password.
	testObjectsFactory clockBehaviour: [ today + (Duration minutes: 30) ].
	self 
		should: [ storeFacade add: 1 of: testObjectsFactory itemSellByTheStore to: cartId ]
		raise: Error - MessageNotUnderstood
		withMessageText: StoreFacade inexistentCartErrorMessage.
	
	testObjectsFactory clockBehaviour: [ today ].	
	cartId := storeFacade createCartFor: clientId withPassword: testObjectsFactory password.
	testObjectsFactory clockBehaviour: [ today + (Duration minutes: 29) ].
	storeFacade add: 3 of: testObjectsFactory itemSellByTheStore to: cartId.
	testObjectsFactory clockBehaviour: [ today + (Duration minutes: 59) ].
	self 
		should: [ storeFacade listCart: cartId ]
		raise: Error - MessageNotUnderstood
		withMessageText: StoreFacade inexistentCartErrorMessage.
	
	testObjectsFactory clockBehaviour: [ today ].	
	cartId := storeFacade createCartFor: clientId withPassword: testObjectsFactory password.
	testObjectsFactory clockBehaviour: [ today + (Duration minutes: 29) ].
	storeFacade listCart: cartId.
	testObjectsFactory clockBehaviour: [ today + (Duration minutes: 59) ].
	self 
		should: [ storeFacade add: 3 of: testObjectsFactory itemSellByTheStore to: cartId ]
		raise: Error - MessageNotUnderstood
		withMessageText: StoreFacade inexistentCartErrorMessage.
		
	testObjectsFactory clockBehaviour: [ today + (Duration minutes: 62) ].
	self 
		should: [ storeFacade listCart: cartId. ]
		raise: Error - MessageNotUnderstood
		withMessageText: StoreFacade inexistentCartErrorMessage.
		
	

		
	! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'JPF 6/21/2021 14:02:22'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'JPF 6/21/2021 14:02:22'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'JPF 6/21/2021 14:02:22'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'JPF 6/21/2021 14:02:22'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'JPF 6/21/2021 14:02:22'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'JPF 6/21/2021 14:02:22'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'JPF 6/21/2021 14:02:22'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'JPF 6/21/2021 14:02:22'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'JPF 6/21/2021 14:02:22'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'JPF 6/21/2021 14:02:22'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'JPF 6/21/2021 14:02:22'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'JPF 6/21/2021 14:02:22'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'JPF 6/21/2021 14:02:22'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'JPF 6/21/2021 14:02:22'!
PASSED!

!testRun: #CreditCardTest #test01ShouldFailWhenTheNameIsEmpty stamp: 'JPF 6/21/2021 14:02:22'!
PASSED!

!testRun: #CreditCardTest #test02ShouldFailWhenTheNameIsAllWithespaceCharacters stamp: 'JPF 6/21/2021 14:02:22'!
PASSED!

!testRun: #CreditCardTest #test03ShouldFailWhenTheNameHasMoreThan30Characters stamp: 'JPF 6/21/2021 14:02:22'!
PASSED!

!testRun: #CreditCardTest #test04ShouldFailWhenTheNumberHasNot16Digits stamp: 'JPF 6/21/2021 14:02:22'!
PASSED!

!testRun: #StoreFacadeTest #test01ShouldFailToCreateCartWhenClientIdOrPasswordAreIncorrect stamp: 'JPF 6/21/2021 14:02:22'!
PASSED!

!testRun: #StoreFacadeTest #test02ShouldCreateACartAndBeEmptyWhenListed stamp: 'JPF 6/21/2021 14:02:22'!
PASSED!

!testRun: #StoreFacadeTest #test03ShouldAddAnItemToTheCart stamp: 'JPF 6/21/2021 14:02:22'!
PASSED!

!testRun: #StoreFacadeTest #test04ShouldFailWhenTryToAddItemsToAnInexistentCart stamp: 'JPF 6/21/2021 14:02:22'!
PASSED!

!testRun: #StoreFacadeTest #test05ShouldFailWhenTryToListAnInexistentCart stamp: 'JPF 6/21/2021 14:02:22'!
PASSED!

!testRun: #StoreFacadeTest #test06ShouldAddAnItemToTheCorrectCart stamp: 'JPF 6/21/2021 14:02:22'!
PASSED!

!testRun: #StoreFacadeTest #test07ShouldReturnADifferentTransactionIdPerCheckout stamp: 'JPF 6/21/2021 14:02:22'!
PASSED!

!testRun: #StoreFacadeTest #test08ShouldFailWhenTryToCheckoutTheSameCartTwice stamp: 'JPF 6/21/2021 14:02:22'!
PASSED!

!testRun: #StoreFacadeTest #test09ShouldFailWhenListPurchasesForAnIncorrectClientIdOrPassword stamp: 'JPF 6/21/2021 14:02:22'!
PASSED!

!testRun: #StoreFacadeTest #test10ShouldReturnEmptyListOfPurchasesWhenClientDidNotMakeAnyPurchase stamp: 'JPF 6/21/2021 14:02:22'!
PASSED!

!testRun: #StoreFacadeTest #test11ShouldListClientPurchases stamp: 'JPF 6/21/2021 14:02:22'!
PASSED!

!testRun: #StoreFacadeTest #test12ShouldFailWhenTryToAccessACartAfter30MinutesFromTheLastAccess stamp: 'JPF 6/21/2021 14:02:22'!
PASSED!
!StoreFacade methodsFor: 'private' stamp: 'JPF 6/21/2021 14:02:55' prior: 50886344!
findCart: aCartId

	| cart |
	
	cart := cartRepository at: aCartId ifAbsent: [ self error: self class inexistentCartErrorMessage ].
	(clock now - (lastCartAccessRegistry at: aCartId)) >= (Duration minutes: 30) ifTrue: [
		cartRepository removeKey: aCartId.
		lastCartAccessRegistry removeKey: aCartId.
		self error: self class inexistentCartErrorMessage
		].
	lastCartAccessRegistry at: aCartId put: clock now.
	
	^ cart
	! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'JPF 6/21/2021 14:03:04'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'JPF 6/21/2021 14:03:04'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'JPF 6/21/2021 14:03:04'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'JPF 6/21/2021 14:03:04'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'JPF 6/21/2021 14:03:04'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'JPF 6/21/2021 14:03:04'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'JPF 6/21/2021 14:03:04'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'JPF 6/21/2021 14:03:04'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'JPF 6/21/2021 14:03:04'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'JPF 6/21/2021 14:03:04'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'JPF 6/21/2021 14:03:04'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'JPF 6/21/2021 14:03:04'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'JPF 6/21/2021 14:03:04'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'JPF 6/21/2021 14:03:04'!
PASSED!

!testRun: #CreditCardTest #test01ShouldFailWhenTheNameIsEmpty stamp: 'JPF 6/21/2021 14:03:04'!
PASSED!

!testRun: #CreditCardTest #test02ShouldFailWhenTheNameIsAllWithespaceCharacters stamp: 'JPF 6/21/2021 14:03:04'!
PASSED!

!testRun: #CreditCardTest #test03ShouldFailWhenTheNameHasMoreThan30Characters stamp: 'JPF 6/21/2021 14:03:04'!
PASSED!

!testRun: #CreditCardTest #test04ShouldFailWhenTheNumberHasNot16Digits stamp: 'JPF 6/21/2021 14:03:04'!
PASSED!

!testRun: #StoreFacadeTest #test01ShouldFailToCreateCartWhenClientIdOrPasswordAreIncorrect stamp: 'JPF 6/21/2021 14:03:04'!
PASSED!

!testRun: #StoreFacadeTest #test02ShouldCreateACartAndBeEmptyWhenListed stamp: 'JPF 6/21/2021 14:03:04'!
PASSED!

!testRun: #StoreFacadeTest #test03ShouldAddAnItemToTheCart stamp: 'JPF 6/21/2021 14:03:04'!
PASSED!

!testRun: #StoreFacadeTest #test04ShouldFailWhenTryToAddItemsToAnInexistentCart stamp: 'JPF 6/21/2021 14:03:04'!
PASSED!

!testRun: #StoreFacadeTest #test05ShouldFailWhenTryToListAnInexistentCart stamp: 'JPF 6/21/2021 14:03:04'!
PASSED!

!testRun: #StoreFacadeTest #test06ShouldAddAnItemToTheCorrectCart stamp: 'JPF 6/21/2021 14:03:04'!
PASSED!

!testRun: #StoreFacadeTest #test07ShouldReturnADifferentTransactionIdPerCheckout stamp: 'JPF 6/21/2021 14:03:04'!
PASSED!

!testRun: #StoreFacadeTest #test08ShouldFailWhenTryToCheckoutTheSameCartTwice stamp: 'JPF 6/21/2021 14:03:04'!
PASSED!

!testRun: #StoreFacadeTest #test09ShouldFailWhenListPurchasesForAnIncorrectClientIdOrPassword stamp: 'JPF 6/21/2021 14:03:04'!
PASSED!

!testRun: #StoreFacadeTest #test10ShouldReturnEmptyListOfPurchasesWhenClientDidNotMakeAnyPurchase stamp: 'JPF 6/21/2021 14:03:04'!
PASSED!

!testRun: #StoreFacadeTest #test11ShouldListClientPurchases stamp: 'JPF 6/21/2021 14:03:04'!
PASSED!

!testRun: #StoreFacadeTest #test12ShouldFailWhenTryToAccessACartAfter30MinutesFromTheLastAccess stamp: 'JPF 6/21/2021 14:03:04'!
PASSED!
!StoreFacade methodsFor: 'private' stamp: 'JPF 6/21/2021 14:04:09'!
assertCartWasAccessedInTheLast30Minutes: aCartId

	^ (clock now - (lastCartAccessRegistry at: aCartId)) >= (Duration minutes: 30) ifTrue: [
		cartRepository removeKey: aCartId.
		lastCartAccessRegistry removeKey: aCartId.
		self error: self class inexistentCartErrorMessage
		]! !
!StoreFacade methodsFor: 'private' stamp: 'JPF 6/21/2021 14:04:09' prior: 50886652!
findCart: aCartId

	| cart |
	
	cart := cartRepository at: aCartId ifAbsent: [ self error: self class inexistentCartErrorMessage ].
	self assertCartWasAccessedInTheLast30Minutes: aCartId.
	lastCartAccessRegistry at: aCartId put: clock now.
	
	^ cart
	! !
!StoreFacade methodsFor: 'private' stamp: 'JPF 6/21/2021 14:05:15'!
updateLastAccessFor: aCartId

	^ lastCartAccessRegistry at: aCartId put: clock now! !
!StoreFacade methodsFor: 'private' stamp: 'JPF 6/21/2021 14:05:15' prior: 50886785!
findCart: aCartId

	| cart |
	
	cart := cartRepository at: aCartId ifAbsent: [ self error: self class inexistentCartErrorMessage ].
	self assertCartWasAccessedInTheLast30Minutes: aCartId.
	self updateLastAccessFor: aCartId.
	
	^ cart
	! !
!StoreFacade methodsFor: 'actions' stamp: 'JPF 6/21/2021 14:05:42' prior: 50886276!
createCartFor: aClientId withPassword: aPassword

	| cartId |
	
	clientValidator validateClient: aClientId withPassword: aPassword.
	
	cartId := self nextCartId.
	
	cartRepository at: cartId put: (Cart acceptingItemsOf: catalog).
	self updateLastAccessFor: cartId.
	
	^ cartId! !
!StoreFacade methodsFor: 'actions' stamp: 'JPF 6/21/2021 14:06:58'!
createNewCart: cartId

	^ cartRepository at: cartId put: (Cart acceptingItemsOf: catalog)! !
!StoreFacade methodsFor: 'actions' stamp: 'JPF 6/21/2021 14:06:58' prior: 50886813!
createCartFor: aClientId withPassword: aPassword

	| cartId |
	
	clientValidator validateClient: aClientId withPassword: aPassword.
	
	cartId := self nextCartId.
	
	self createNewCart: cartId.
	self updateLastAccessFor: cartId.
	
	^ cartId! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'JPF 6/21/2021 14:07:16'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'JPF 6/21/2021 14:07:16'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'JPF 6/21/2021 14:07:16'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'JPF 6/21/2021 14:07:16'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'JPF 6/21/2021 14:07:16'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'JPF 6/21/2021 14:07:16'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'JPF 6/21/2021 14:07:16'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'JPF 6/21/2021 14:07:16'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'JPF 6/21/2021 14:07:16'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'JPF 6/21/2021 14:07:16'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'JPF 6/21/2021 14:07:16'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'JPF 6/21/2021 14:07:16'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'JPF 6/21/2021 14:07:16'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'JPF 6/21/2021 14:07:16'!
PASSED!

!testRun: #CreditCardTest #test01ShouldFailWhenTheNameIsEmpty stamp: 'JPF 6/21/2021 14:07:16'!
PASSED!

!testRun: #CreditCardTest #test02ShouldFailWhenTheNameIsAllWithespaceCharacters stamp: 'JPF 6/21/2021 14:07:16'!
PASSED!

!testRun: #CreditCardTest #test03ShouldFailWhenTheNameHasMoreThan30Characters stamp: 'JPF 6/21/2021 14:07:16'!
PASSED!

!testRun: #CreditCardTest #test04ShouldFailWhenTheNumberHasNot16Digits stamp: 'JPF 6/21/2021 14:07:16'!
PASSED!

!testRun: #StoreFacadeTest #test01ShouldFailToCreateCartWhenClientIdOrPasswordAreIncorrect stamp: 'JPF 6/21/2021 14:07:16'!
PASSED!

!testRun: #StoreFacadeTest #test02ShouldCreateACartAndBeEmptyWhenListed stamp: 'JPF 6/21/2021 14:07:16'!
PASSED!

!testRun: #StoreFacadeTest #test03ShouldAddAnItemToTheCart stamp: 'JPF 6/21/2021 14:07:16'!
PASSED!

!testRun: #StoreFacadeTest #test04ShouldFailWhenTryToAddItemsToAnInexistentCart stamp: 'JPF 6/21/2021 14:07:16'!
PASSED!

!testRun: #StoreFacadeTest #test05ShouldFailWhenTryToListAnInexistentCart stamp: 'JPF 6/21/2021 14:07:16'!
PASSED!

!testRun: #StoreFacadeTest #test06ShouldAddAnItemToTheCorrectCart stamp: 'JPF 6/21/2021 14:07:16'!
PASSED!

!testRun: #StoreFacadeTest #test07ShouldReturnADifferentTransactionIdPerCheckout stamp: 'JPF 6/21/2021 14:07:16'!
PASSED!

!testRun: #StoreFacadeTest #test08ShouldFailWhenTryToCheckoutTheSameCartTwice stamp: 'JPF 6/21/2021 14:07:16'!
PASSED!

!testRun: #StoreFacadeTest #test09ShouldFailWhenListPurchasesForAnIncorrectClientIdOrPassword stamp: 'JPF 6/21/2021 14:07:16'!
PASSED!

!testRun: #StoreFacadeTest #test10ShouldReturnEmptyListOfPurchasesWhenClientDidNotMakeAnyPurchase stamp: 'JPF 6/21/2021 14:07:16'!
PASSED!

!testRun: #StoreFacadeTest #test11ShouldListClientPurchases stamp: 'JPF 6/21/2021 14:07:16'!
PASSED!

!testRun: #StoreFacadeTest #test12ShouldFailWhenTryToAccessACartAfter30MinutesFromTheLastAccess stamp: 'JPF 6/21/2021 14:07:16'!
PASSED!
!StoreFacadeTest methodsFor: 'tests' stamp: 'JPF 6/21/2021 14:09:07' prior: 50878806!
test02ShouldCreateACartAndBeEmptyWhenListed

	| storeFacade cartDetail cartId |
	
	storeFacade := testObjectsFactory createStoreFacade.
	
	cartId := storeFacade createCartFor: testObjectsFactory clientId withPassword: testObjectsFactory password.
	
	cartDetail := storeFacade listCart: cartId.
	
	self assert: cartDetail isEmpty! !
!StoreFacadeTest methodsFor: 'tests' stamp: 'JPF 6/21/2021 14:09:54' prior: 50884961!
test03ShouldAddAnItemToTheCart

	| storeFacade cartDetail cartId |
	
	storeFacade := testObjectsFactory createStoreFacade.
	
	cartId := storeFacade createCartFor: testObjectsFactory clientId withPassword: testObjectsFactory password.
	
	storeFacade add: 3 of: testObjectsFactory itemSellByTheStore to: cartId.
	
	cartDetail := storeFacade listCart: cartId.
	
	self assert: cartDetail size = 1.
	self assert: (cartDetail at: testObjectsFactory itemSellByTheStore) = 3.! !
!StoreFacadeTest methodsFor: 'tests' stamp: 'JPF 6/21/2021 14:10:30' prior: 50885012!
test06ShouldAddAnItemToTheCorrectCart

	| storeFacade cartDetailNotEmpty cartIdToAdd cartIdEmpty cartItemsEmpty |
	
	storeFacade := testObjectsFactory createStoreFacade.
	
	cartIdEmpty := storeFacade createCartFor: testObjectsFactory clientId withPassword: testObjectsFactory password.
	cartIdToAdd := storeFacade createCartFor: testObjectsFactory clientId withPassword: testObjectsFactory password.
	
	storeFacade add: 3 of: testObjectsFactory itemSellByTheStore to: cartIdToAdd.
	cartDetailNotEmpty := storeFacade listCart: cartIdToAdd.
	
	cartItemsEmpty := storeFacade listCart: cartIdEmpty.

	self assert: cartDetailNotEmpty size = 1.
	self assert: (cartDetailNotEmpty at: testObjectsFactory itemSellByTheStore) = 3.

	self assert: cartItemsEmpty isEmpty! !
!StoreFacadeTest methodsFor: 'tests' stamp: 'JPF 6/21/2021 14:10:42' prior: 50886978!
test06ShouldAddAnItemToTheCorrectCart

	| storeFacade cartDetailNotEmpty cartIdToAdd cartIdEmpty cartDetailEmpty |
	
	storeFacade := testObjectsFactory createStoreFacade.
	
	cartIdEmpty := storeFacade createCartFor: testObjectsFactory clientId withPassword: testObjectsFactory password.
	cartIdToAdd := storeFacade createCartFor: testObjectsFactory clientId withPassword: testObjectsFactory password.
	
	storeFacade add: 3 of: testObjectsFactory itemSellByTheStore to: cartIdToAdd.
	cartDetailNotEmpty := storeFacade listCart: cartIdToAdd.
	
	cartDetailEmpty := storeFacade listCart: cartIdEmpty.

	self assert: cartDetailNotEmpty size = 1.
	self assert: (cartDetailNotEmpty at: testObjectsFactory itemSellByTheStore) = 3.

	self assert: cartDetailEmpty isEmpty! !

----SNAPSHOT----(21 June 2021 14:13:17) CaraInternaInterfaz.image priorSource: 17687012!